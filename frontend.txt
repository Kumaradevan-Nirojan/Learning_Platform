frontend\src\components\common\AvatarUpload.js
import React, { useState } from 'react';
import { Form, Button, Image, Spinner } from 'react-bootstrap';
import axios from 'axios';

const AvatarUpload = ({ currentAvatarUrl = '', onUpload }) => {
  const [preview, setPreview] = useState(currentAvatarUrl || '');
  const [uploading, setUploading] = useState(false);

  const handleFileChange = async (e) => {
    const file = e.target.files[0];
    if (!file || !file.type.startsWith('image/')) return;

    const formData = new FormData();
    formData.append('avatar', file);
    setUploading(true);

    try {
      const { data } = await axios.post('http://localhost:5000/api/v1/users/upload-avatar', formData, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'multipart/form-data',
        },
      });

      setPreview(`http://localhost:5000/${data.avatarUrl}`);
      onUpload(data.avatarUrl); // pass to parent
    } catch (err) {
      console.error('Upload failed', err);
      alert('Avatar upload failed!');
    } finally {
      setUploading(false);
    }
  };

  const handleReset = () => {
    setPreview('');
    onUpload(''); // reset in parent state too
  };

  return (
    <Form.Group className="mb-3">
      <Form.Label>Avatar</Form.Label>
      <div className="d-flex align-items-center gap-3">
        {preview ? (
          <Image src={preview} roundedCircle width={80} height={80} />
        ) : (
          <span className="text-muted">No avatar</span>
        )}
        <Form.Control type="file" accept="image/*" onChange={handleFileChange} disabled={uploading} />
        {uploading && <Spinner animation="border" size="sm" />}
        {preview && (
          <Button variant="outline-danger" size="sm" onClick={handleReset}>
            Remove
          </Button>
        )}
      </div>
    </Form.Group>
  );
};

export default AvatarUpload;

frontend\src\components\common\DashboardTitle.js
import React from 'react';

const DashboardTitle = ({ title, subtitle, icon }) => {
  return (
    <div className="my-4 px-3">
      {title && (
        <div className="d-flex align-items-center">
          {icon && <span className="me-2">{icon}</span>}
          <h2 className="fw-bold text-primary mb-0">{title}</h2>
        </div>
      )}
      {subtitle && <p className="text-muted mb-1">{subtitle}</p>}
    </div>
  );
};

export default DashboardTitle;

frontend\src\components\coordinator\CoordinatorAnalytics.js
import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import { Container, Row, Col, Spinner, Card, Button, Form } from 'react-bootstrap';
import {
  PieChart, Pie, Cell,
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer,
  LineChart, Line, CartesianGrid,
} from 'recharts';
import { toast } from 'react-toastify';
import { CSVLink } from 'react-csv';
import { useReactToPrint } from 'react-to-print';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AA00FF'];

const CoordinatorAnalytics = () => {
  const [loading, setLoading] = useState(true);
  const [categoryData, setCategoryData] = useState([]);
  const [learnerData, setLearnerData] = useState([]);
  const [filteredLearnerData, setFilteredLearnerData] = useState([]);
  const [enrollmentData, setEnrollmentData] = useState([]);
  const [filteredEnrollmentData, setFilteredEnrollmentData] = useState([]);
  const [sortField, setSortField] = useState('title');
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const token = localStorage.getItem('token');
  const user = JSON.parse(localStorage.getItem('user'));
  const printRef = useRef();

  const handlePrint = useReactToPrint({
    content: () => printRef.current,
    documentTitle: 'Coordinator_Analytics_Report',
  });

  useEffect(() => {
    const fetchAnalytics = async () => {
      try {
        const res = await axios.get('http://localhost:5000/api/v1/dashboard/analytics', {
          headers: { Authorization: `Bearer ${token}` },
        });

        setCategoryData(res.data.categoryDistribution || []);
        setLearnerData(res.data.learnersPerCourse || []);
        setEnrollmentData(res.data.enrollmentsOverTime || []);
        setFilteredEnrollmentData(res.data.enrollmentsOverTime || []);
      } catch (err) {
        toast.error('Failed to load analytics');
      } finally {
        setLoading(false);
      }
    };

    if (user?.role === 'coordinator') {
      fetchAnalytics();
    } else {
      toast.error('Unauthorized access');
    }
  }, [token, user]);

  useEffect(() => {
    const sortedData = [...learnerData].sort((a, b) => {
      if (sortField === 'learners') {
        return b.learners - a.learners;
      } else {
        return a.title.localeCompare(b.title);
      }
    });
    setFilteredLearnerData(sortedData);
  }, [learnerData, sortField]);

  useEffect(() => {
    if (startDate && endDate) {
      const filtered = enrollmentData.filter(e => {
        const d = new Date(e.fullDate);
        return d >= startDate && d <= endDate;
      });
      setFilteredEnrollmentData(filtered);
    } else {
      setFilteredEnrollmentData(enrollmentData);
    }
  }, [startDate, endDate, enrollmentData]);

  if (!user || user.role !== 'coordinator') {
    return <Container className="text-center my-5"><p>Unauthorized</p></Container>;
  }

  if (loading) {
    return <Container className="text-center my-5"><Spinner animation="border" /></Container>;
  }

  return (
    <Container className="my-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h4 className="mb-0">Coordinator Analytics</h4>
        <Button variant="outline-secondary" size="sm" onClick={handlePrint}>Print Report</Button>
      </div>

      <div ref={printRef}>
        <Row className="mb-4">
          <Col md={6} className="mb-3 mb-md-0">
            <Card className="p-3 shadow-sm">
              <h6 className="text-center">Course Categories</h6>
              <ResponsiveContainer width="100%" height={250}>
                <PieChart>
                  <Pie data={categoryData} dataKey="value" nameKey="category" outerRadius={100} label>
                    {categoryData.map((_, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </Card>
          </Col>

          <Col md={6}>
            <Card className="p-3 shadow-sm">
              <div className="d-flex justify-content-between align-items-center">
                <h6 className="text-center">Learners per Course</h6>
                <Form.Select size="sm" style={{ width: 'auto' }} value={sortField} onChange={e => setSortField(e.target.value)}>
                  <option value="title">Sort by Title</option>
                  <option value="learners">Sort by Learners</option>
                </Form.Select>
              </div>
              <ResponsiveContainer width="100%" height={250}>
                <BarChart data={filteredLearnerData} margin={{ top: 5, right: 20, bottom: 30, left: 0 }}>
                  <XAxis dataKey="title" interval={0} angle={-30} textAnchor="end" height={60} />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="learners" fill="#007BFF" />
                </BarChart>
              </ResponsiveContainer>
              <div className="text-center mt-3">
                <CSVLink
                  data={filteredLearnerData}
                  filename="learners-per-course.csv"
                  className="btn btn-sm btn-outline-primary"
                >
                  Export CSV
                </CSVLink>
              </div>
            </Card>
          </Col>
        </Row>

        <Row>
          <Col>
            <Card className="p-3 shadow-sm">
              <div className="d-flex justify-content-between align-items-center mb-3">
                <h6 className="mb-0">Enrollments Over Time</h6>
                <div className="d-flex gap-2 align-items-center">
                  <DatePicker
                    selected={startDate}
                    onChange={(date) => setStartDate(date)}
                    selectsStart
                    startDate={startDate}
                    endDate={endDate}
                    placeholderText="Start Date"
                    className="form-control form-control-sm"
                  />
                  <DatePicker
                    selected={endDate}
                    onChange={(date) => setEndDate(date)}
                    selectsEnd
                    startDate={startDate}
                    endDate={endDate}
                    minDate={startDate}
                    placeholderText="End Date"
                    className="form-control form-control-sm"
                  />
                </div>
              </div>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={filteredEnrollmentData} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Line type="monotone" dataKey="enrollments" stroke="#28A745" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </Card>
          </Col>
        </Row>
      </div>
    </Container>
  );
};

export default CoordinatorAnalytics;

frontend\src\components\educator\CreateQuizForm.js
// frontend/src/components/educator/CreateQuizForm.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Form, Button, Container, Card, Alert, Spinner } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import ManageQuestionsModal from './ManageQuestionsModal'; // ✅ adjust path if needed


const CreateQuizForm = () => {
  const [courses, setCourses] = useState([]);
  const [form, setForm] = useState({
    courseId: '',
    title: '',
    description: '',
    startDate: '',
    endDate: '',
    numQuestions: '',
    file: null,
  });
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const res = await axios.get('/api/v1/courses/my-courses');
        setCourses(res.data || []);
      } catch (err) {
        console.error('Failed to fetch courses:', err);
      }
    };
    fetchCourses();
  }, []);

  const handleChange = (e) => {
    if (e.target.name === 'file') {
      setForm({ ...form, file: e.target.files[0] });
    } else {
      setForm({ ...form, [e.target.name]: e.target.value });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage('');
    setLoading(true);

    try {
      const data = new FormData();
      Object.entries(form).forEach(([key, value]) => {
        if (value) data.append(key, value);
      });

      await axios.post('/api/v1/quizzes', data, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      setMessage('Quiz created successfully!');
      navigate('/educator/my-quizzes');
    } catch (err) {
      console.error(err);
      setMessage('Failed to create quiz.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container className="my-4">
      <Card className="p-4 shadow-sm">
        <h3>Create Quiz</h3>
        {message && <Alert variant={message.includes('successfully') ? 'success' : 'danger'}>{message}</Alert>}
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Course</Form.Label>
            <Form.Select name="courseId" value={form.courseId} onChange={handleChange} required>
              <option value="">-- Select Course --</option>
              {courses.map((course) => (
                <option key={course._id} value={course._id}>
                  {course.title}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Quiz Title</Form.Label>
            <Form.Control type="text" name="title" value={form.title} onChange={handleChange} required />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Description</Form.Label>
            <Form.Control as="textarea" name="description" value={form.description} onChange={handleChange} rows={3} />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Start Date</Form.Label>
            <Form.Control type="date" name="startDate" value={form.startDate} onChange={handleChange} required />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>End Date</Form.Label>
            <Form.Control type="date" name="endDate" value={form.endDate} onChange={handleChange} required />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Number of Questions</Form.Label>
            <Form.Control type="number" name="numQuestions" value={form.numQuestions} onChange={handleChange} min="1" required />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Upload Instructions (PDF/DOC)</Form.Label>
            <Form.Control type="file" name="file" accept=".pdf,.doc,.docx" onChange={handleChange} />
          </Form.Group>

          <Button type="submit" disabled={loading}>
            {loading ? <Spinner animation="border" size="sm" /> : 'Create Quiz'}
          </Button>
        </Form>
      </Card>
    </Container>
  );
};

export default CreateQuizForm;

frontend\src\components\educator\CreateZoomSession.js
// CreateZoomSession.js
import React, { useState, useEffect } from 'react';
import { Form, Button, Container, Alert, Spinner } from 'react-bootstrap';
import axios from 'axios';
import { toast } from 'react-toastify';

const CreateZoomSession = () => {
  const [topic, setTopic] = useState('');
  const [description, setDescription] = useState('');
  const [course, setCourse] = useState('');
  const [date, setDate] = useState('');
  const [duration, setDuration] = useState(30);
  const [link, setLink] = useState('');
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(false);
  const token = localStorage.getItem('token');

  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCourses(data.courses || data);
      } catch (err) {
        toast.error('Failed to load courses');
      }
    };

    fetchCourses();
  }, [token]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await axios.post('http://localhost:5000/api/v1/doubts', {
        topic,
        description,
        course,
        scheduledDate: date,
        durationMinutes: duration,
        link,
      }, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('Zoom session created!');
      setTopic('');
      setDescription('');
      setCourse('');
      setDate('');
      setDuration(30);
      setLink('');
    } catch (err) {
      toast.error(err.response?.data?.message || 'Creation failed');
    }
    setLoading(false);
  };

  return (
    <Container className="my-4">
      <h4>Create Zoom Session</h4>
      <Form onSubmit={handleSubmit}>
        <Form.Group controlId="topic" className="mb-3">
          <Form.Label>Topic</Form.Label>
          <Form.Control
            type="text"
            value={topic}
            onChange={(e) => setTopic(e.target.value)}
            required
          />
        </Form.Group>

        <Form.Group controlId="description" className="mb-3">
          <Form.Label>Description</Form.Label>
          <Form.Control
            as="textarea"
            rows={3}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
        </Form.Group>

        <Form.Group controlId="course" className="mb-3">
          <Form.Label>Course</Form.Label>
          <Form.Select
            value={course}
            onChange={(e) => setCourse(e.target.value)}
            required
          >
            <option value=''>-- Select Course --</option>
            {courses.map((c) => (
              <option key={c._id} value={c._id}>{c.title}</option>
            ))}
          </Form.Select>
        </Form.Group>

        <Form.Group controlId="scheduledDate" className="mb-3">
          <Form.Label>Scheduled Date & Time</Form.Label>
          <Form.Control
            type="datetime-local"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            required
          />
        </Form.Group>

        <Form.Group controlId="duration" className="mb-3">
          <Form.Label>Duration (minutes)</Form.Label>
          <Form.Control
            type="number"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}
            min="1"
            max="180"
            required
          />
        </Form.Group>

        <Form.Group controlId="link" className="mb-3">
          <Form.Label>Zoom Link</Form.Label>
          <Form.Control
            type="url"
            value={link}
            onChange={(e) => setLink(e.target.value)}
          />
        </Form.Group>

        <Button type="submit" disabled={loading}>
          {loading ? <Spinner size="sm" animation="border" /> : 'Create Session'}
        </Button>
      </Form>
    </Container>
  );
};

export default CreateZoomSession;

frontend\src\components\educator\EducatorEvaluation.js
import React, { useEffect, useState } from 'react';
import {
  Container,
  Table,
  Form,
  Button,
  Spinner,
  Badge,
} from 'react-bootstrap';
import axios from 'axios';
import { toast } from 'react-toastify';

const EducatorEvaluation = () => {
  const [submissions, setSubmissions] = useState([]);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem('token');

  const fetchSubmissions = async () => {
    try {
      const { data } = await axios.get('http://localhost:5000/api/v1/submissions', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setSubmissions(data);
    } catch (err) {
      console.error('Failed to fetch submissions:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchSubmissions();
  }, []);

  const handleGradeSubmit = async (id, grade, feedback, status) => {
    try {
      await axios.patch(
        `http://localhost:5000/api/v1/submissions/${id}`,
        { grade, feedback, status },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      toast.success('✅ Evaluation submitted!');
      fetchSubmissions(); // refresh table
    } catch (err) {
      console.error('Failed to update evaluation:', err);
      toast.error('❌ Failed to save evaluation!');
    }
  };

  if (loading) {
    return (
      <Container className="text-center my-4">
        <Spinner animation="border" />
        <p>Loading submissions...</p>
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <h4 className="mb-4">Evaluate Submissions</h4>
      <Table striped bordered hover responsive>
        <thead>
          <tr>
            <th>Course</th>
            <th>Assignment</th>
            <th>Learner</th>
            <th>Submitted</th>
            <th>PDF</th>
            <th>Grade</th>
            <th>Feedback</th>
            <th>Status</th>
            <th>Save</th>
          </tr>
        </thead>
        <tbody>
          {submissions.map((submission) => (
            <tr key={submission._id}>
              <td>{submission.assignment?.course?.title || '-'}</td>
              <td>{submission.assignment?.name || '-'}</td>
              <td>{submission.learner?.firstName} {submission.learner?.lastName}</td>
              <td>{new Date(submission.submittedAt).toLocaleString()}</td>
              <td>
                <a
                  href={`http://localhost:5000/${submission.fileUrl}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  View
                </a>
              </td>
              <td>
                <Form.Control
                  type="number"
                  defaultValue={submission.grade || ''}
                  onChange={(e) => (submission._grade = e.target.value)}
                />
              </td>
              <td>
                <Form.Control
                  as="textarea"
                  defaultValue={submission.feedback || ''}
                  rows={2}
                  onChange={(e) => (submission._feedback = e.target.value)}
                />
              </td>
              <td>
                <Form.Select
                  defaultValue={submission.status || 'graded'}
                  onChange={(e) => (submission._status = e.target.value)}
                >
                  <option value="graded">Graded</option>
                  <option value="resubmitted">Resubmitted</option>
                </Form.Select>
              </td>
              <td>
                <Button
                  size="sm"
                  onClick={() =>
                    handleGradeSubmit(
                      submission._id,
                      submission._grade || submission.grade,
                      submission._feedback || submission.feedback,
                      submission._status || submission.status
                    )
                  }
                >
                  Save
                </Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </Container>
  );
};

export default EducatorEvaluation;


frontend\src\components\educator\EducatorQuizList.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { ListGroup, Button, Spinner } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const EducatorQuizList = () => {
  const [quizzes, setQuizzes] = useState([]);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem('token');
  const educatorId = JSON.parse(localStorage.getItem('user'))?._id;

  useEffect(() => {
    const fetchEducatorQuizzes = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/quizzes', {
          headers: { Authorization: `Bearer ${token}` },
        });
        const ownQuizzes = data.filter(q => q.educator._id === educatorId);
        setQuizzes(ownQuizzes);
      } catch (err) {
        toast.error('Failed to load quizzes');
      } finally {
        setLoading(false);
      }
    };

    fetchEducatorQuizzes();
  }, [token, educatorId]);

  const handlePublish = async (id) => {
    try {
      await axios.patch(`http://localhost:5000/api/v1/quizzes/publish/${id}`, {}, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('Quiz published');
      setQuizzes(prev => prev.map(q => q._id === id ? { ...q, published: true } : q));
    } catch (err) {
      toast.error('Failed to publish quiz');
    }
  };

  return (
    <div className="container my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-3">📘 My Quizzes (Educator View)</h4>
      {loading ? (
        <Spinner animation="border" />
      ) : quizzes.length === 0 ? (
        <p className="text-muted">No quizzes created yet.</p>
      ) : (
        <ListGroup>
          {quizzes.map((quiz) => (
            <ListGroup.Item key={quiz._id} className="d-flex justify-content-between align-items-start">
              <div>
                <strong>{quiz.title}</strong><br />
                Course: {quiz.course?.title || 'N/A'}<br />
                Duration: {quiz.durationMinutes} minutes<br />
                Learners Attempted: <strong>{quiz.submissions?.length || 0}</strong><br />
                Status:{' '}
                <span className={`badge ${quiz.published ? 'bg-success' : 'bg-warning text-dark'}`}>
                  {quiz.published ? 'Published' : 'Not Published'}
                </span>
              </div>
              <div className="d-flex flex-column gap-2">
                <Link to={`/quizzes/attempt/${quiz._id}`}>
                  <Button variant="outline-primary" size="sm">Trail</Button>
                </Link>
                {!quiz.published && (
                  <Button variant="success" size="sm" onClick={() => handlePublish(quiz._id)}>
                    Publish
                  </Button>
                )}
              </div>
            </ListGroup.Item>
          ))}
        </ListGroup>
      )}
    </div>
  );
};

export default EducatorQuizList;

frontend\src\components\educator\EMyAssignments.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, Spinner, Row, Col, Container } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const MyAssignments = () => {
  const token = localStorage.getItem('token');
  const [assignments, setAssignments] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchAssignments = async () => {
      setLoading(true);
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/assignments', {
          headers: { Authorization: `Bearer ${token}` }
        });

        // Filter assignments created by this educator (backend already handles this if restricted)
        setAssignments(data);
      } catch (error) {
        console.error('Error fetching assignments:', error);
        toast.error('Failed to load assignments');
      } finally {
        setLoading(false);
      }
    };

    fetchAssignments();
  }, [token]);

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4 text-center"> Students Assignments</h4>
      {loading ? (
        <div className="text-center"><Spinner animation="border" /></div>
      ) : assignments.length === 0 ? (
        <p>No assignments found.</p>
      ) : (
        <Row>
          {assignments.map((assignment) => (
            <Col md={6} lg={4} key={assignment._id} className="mb-4">
              <Card>
                <Card.Body>
                  <Card.Title>{assignment.name}</Card.Title>
                  <Card.Text>
                    <strong>Course:</strong> {assignment.course?.title || 'N/A'}<br />
                    <strong>Due:</strong> {new Date(assignment.dueDate).toLocaleString()}<br />
                    <strong>Instructions:</strong> {assignment.instructions || 'N/A'}
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      )}
    </Container>
  );
};

export default MyAssignments;

frontend\src\components\educator\EMyCourses.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, Spinner, Row, Col, Container } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const EMyCourses = () => {
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(false);
  const token = localStorage.getItem('token');

  useEffect(() => {
    const fetchCourses = async () => {
      setLoading(true);
      try {
        const { data } = await axios.get(
          'http://localhost:5000/api/v1/courses/my',
          {
            headers: { Authorization: `Bearer ${token}` }
          }
        );
        setCourses(data);
      } catch (error) {
        console.error(error);
        toast.error('Failed to load your courses');
      } finally {
        setLoading(false);
      }
    };

    fetchCourses();
  }, [token]);

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4">My Assigned Courses</h4>
      {loading ? (
        <Spinner animation="border" />
      ) : (
        <Row>
          {courses.length === 0 ? (
            <p>No courses assigned to you.</p>
          ) : (
            courses.map(course => (
              <Col md={6} lg={4} key={course._id} className="mb-4">
                <Card>
                  <Card.Body>
                    <Card.Title>{course.title}</Card.Title>
                    <Card.Text>
                      <strong>Category:</strong> {course.category}<br />
                      <strong>Duration:</strong> {course.duration} weeks<br />
                      <strong>Start:</strong> {course.startDate?.substring(0, 10)}<br />
                      <strong>End:</strong> {course.endDate?.substring(0, 10)}
                    </Card.Text>
                  </Card.Body>
                </Card>
              </Col>
            ))
          )}
        </Row>
      )}
    </Container>
  );
};

export default EMyCourses;

frontend\src\components\educator\EMySubmissions.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Row, Col, Card, Spinner, Form, Button } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import Papa from 'papaparse';
import 'react-toastify/dist/ReactToastify.css';

const EMySubmissions = () => {
  const token = localStorage.getItem('token');
  const [submissions, setSubmissions] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [courses, setCourses] = useState([]);
  const [assignments, setAssignments] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState('');
  const [selectedAssignment, setSelectedAssignment] = useState('');
  const [dateFilter, setDateFilter] = useState('');
  const [loading, setLoading] = useState(true);
  const [grades, setGrades] = useState({});

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [subRes, courseRes] = await Promise.all([
          axios.get('http://localhost:5000/api/v1/submissions/my', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/courses/my', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);
        setSubmissions(subRes.data);
        setFiltered(subRes.data);
        setCourses(courseRes.data);
      } catch (error) {
        toast.error('Failed to load submissions or courses');
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [token]);

  useEffect(() => {
    const result = submissions.filter(s => {
      const matchesCourse = selectedCourse
        ? s.assignment?.course?._id === selectedCourse
        : true;
      const matchesAssignment = selectedAssignment
        ? s.assignment?._id === selectedAssignment
        : true;
      const matchesDate = dateFilter
        ? s.submittedAt?.slice(0, 10) === dateFilter
        : true;
      return matchesCourse && matchesAssignment && matchesDate;
    });
    setFiltered(result);
  }, [selectedCourse, selectedAssignment, dateFilter, submissions]);

  useEffect(() => {
    if (selectedCourse) {
      const courseAssignments = submissions
        .filter(s => s.assignment?.course?._id === selectedCourse)
        .map(s => s.assignment)
        .filter((a, index, self) => a && self.findIndex(o => o._id === a._id) === index);
      setAssignments(courseAssignments);
    } else {
      setAssignments([]);
    }
    setSelectedAssignment('');
  }, [selectedCourse, submissions]);

  const handleInputChange = (id, field, value) => {
    setGrades(prev => ({
      ...prev,
      [id]: { ...prev[id], [field]: value }
    }));
  };

  const handleGradeSubmit = async (id) => {
    try {
      const payload = grades[id];
      await axios.patch(`http://localhost:5000/api/v1/submissions/${id}`, payload, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('Grading saved successfully');
    } catch (error) {
      toast.error('Failed to save grade');
    }
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    const table = filtered.map(s => [
      s.assignment?.name,
      s.assignment?.course?.title,
      `${s.learner?.firstName} ${s.learner?.lastName}`,
      s.grade || '-',
      new Date(s.submittedAt).toLocaleString(),
    ]);
    autoTable(doc, {
      head: [['Assignment', 'Course', 'Learner', 'Grade', 'Submitted At']],
      body: table,
    });
    doc.save('submissions.pdf');
  };

  const exportCSV = () => {
    const rows = filtered.map(s => ({
      Assignment: s.assignment?.name,
      Course: s.assignment?.course?.title,
      Learner: `${s.learner?.firstName} ${s.learner?.lastName}`,
      Grade: s.grade || '-',
      SubmittedAt: new Date(s.submittedAt).toLocaleString(),
    }));
    const csv = Papa.unparse(rows);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'submissions.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const downloadZIP = async () => {
    try {
      const res = await axios.get('http://localhost:5000/api/v1/submissions/my/zip', {
        responseType: 'blob',
        headers: { Authorization: `Bearer ${token}` },
      });
      const url = window.URL.createObjectURL(new Blob([res.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'submissions.zip');
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      toast.error('Failed to download ZIP');
    }
  };

  return (
    <Container className="my-4">
      <ToastContainer />
      <h4 className="mb-4 text-center">Educator Submissions Management</h4>
      <Row className="mb-3">
        <Col md={3}>
          <Form.Select value={selectedCourse} onChange={e => setSelectedCourse(e.target.value)}>
            <option value="">Filter by Course</option>
            {courses.map(course => (
              <option key={course._id} value={course._id}>
                {course.title}
              </option>
            ))}
          </Form.Select>
        </Col>
        <Col md={3}>
          <Form.Select value={selectedAssignment} onChange={e => setSelectedAssignment(e.target.value)} disabled={!assignments.length}>
            <option value="">Filter by Assignment</option>
            {assignments.map(a => (
              <option key={a._id} value={a._id}>
                {a.name}
              </option>
            ))}
          </Form.Select>
        </Col>
        <Col md={3}>
          <Form.Control type="date" value={dateFilter} onChange={e => setDateFilter(e.target.value)} />
        </Col>
        <Col md={3} className="d-flex justify-content-end">
          <Button variant="success" className="me-2" onClick={exportCSV}>Export CSV</Button>
          <Button variant="danger" className="me-2" onClick={exportPDF}>Export PDF</Button>
          <Button variant="primary" onClick={downloadZIP}>Download ZIP</Button>
        </Col>
      </Row>

      {loading ? (
        <Spinner animation="border" />
      ) : filtered.length === 0 ? (
        <p>No submissions match the filters.</p>
      ) : (
        <Row>
          {filtered.map(s => (
            <Col md={6} lg={4} key={s._id} className="mb-4">
              <Card>
                <Card.Body>
                  <Card.Title>{s.assignment?.name}</Card.Title>
                  <Card.Text>
                    <strong>Course:</strong> {s.assignment?.course?.title}<br />
                    <strong>Learner:</strong> {s.learner?.firstName} {s.learner?.lastName}<br />
                    <strong>Submitted At:</strong> {new Date(s.submittedAt).toLocaleString()}<br />
                    <strong>Grade:</strong> {s.grade || 'Not graded'}<br />
                    <a href={`/${s.fileUrl}`} target="_blank" rel="noreferrer">Download File</a>
                  </Card.Text>

                  <Form.Group className="mb-2">
                    <Form.Label>Grade</Form.Label>
                    <Form.Control
                      type="number"
                      value={grades[s._id]?.grade || ''}
                      onChange={e => handleInputChange(s._id, 'grade', e.target.value)}
                    />
                  </Form.Group>

                  <Form.Group className="mb-2">
                    <Form.Label>Comment</Form.Label>
                    <Form.Control
                      as="textarea"
                      value={grades[s._id]?.comment || ''}
                      onChange={e => handleInputChange(s._id, 'comment', e.target.value)}
                    />
                  </Form.Group>

                  <Form.Group className="mb-2">
                    <Form.Label>Status</Form.Label>
                    <Form.Select
                      value={grades[s._id]?.status || ''}
                      onChange={e => handleInputChange(s._id, 'status', e.target.value)}
                    >
                      <option value="">Select Status</option>
                      <option value="Pending">Pending</option>
                      <option value="Reviewed">Reviewed</option>
                      <option value="Graded">Graded</option>
                    </Form.Select>
                  </Form.Group>

                  <Button onClick={() => handleGradeSubmit(s._id)} variant="primary" size="sm">
                    Submit Grade
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      )}
    </Container>
  );
};

export default EMySubmissions;

frontend\src\components\educator\EStudyPlanPage.js
// frontend/src/components/educator/EStudyPlanPage.js
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Spinner, Button } from 'react-bootstrap';
import axios from 'axios';
import StudyPlanForm from '../StudyPlanForm';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const EStudyPlanPage = () => {
  const token = localStorage.getItem('token');
  const user = JSON.parse(localStorage.getItem('user'));
  const [studyPlans, setStudyPlans] = useState([]);
  const [loading, setLoading] = useState(true);
  const [refresh, setRefresh] = useState(false);
  const [editData, setEditData] = useState(null);

  const fetchStudyPlans = async () => {
    setLoading(true);
    try {
      const { data } = await axios.get('http://localhost:5000/api/v1/studyplans', {
        headers: { Authorization: `Bearer ${token}` },
      });
      const myPlans = data.filter(plan => plan.educator._id === user._id);
      setStudyPlans(myPlans);
    } catch (err) {
      toast.error('Failed to fetch study plans');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStudyPlans();
  }, [refresh]);

  const handleEdit = (plan) => {
    setEditData(plan);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this study plan?')) return;
    try {
      await axios.delete(`http://localhost:5000/api/v1/studyplans/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('Study plan deleted');
      setRefresh(prev => !prev);
    } catch (err) {
      toast.error('Failed to delete study plan');
    }
  };

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="text-center mb-4">Educator: Study Plan Management</h4>

      <Row>
        {/* Left: Create/Edit Form */}
        <Col md={6}>
          <Card className="p-3 shadow-sm">
            <h5>{editData ? 'Edit Study Plan' : 'Create New Study Plan'}</h5>
            <StudyPlanForm
              existingData={editData}
              onSuccess={() => {
                setRefresh(prev => !prev);
                setEditData(null);
              }}
            />
          </Card>
        </Col>

        {/* Right: List of Study Plans */}
        <Col md={6}>
          <Card className="p-3 shadow-sm">
            <h5>Your Study Plans</h5>
            {loading ? (
              <div className="text-center py-3">
                <Spinner animation="border" />
              </div>
            ) : studyPlans.length > 0 ? (
              studyPlans.map(plan => (
                <Card key={plan._id} className="mb-3 p-2 border rounded">
                  <h6 className="mb-1">{plan.title}</h6>
                  <p className="mb-1 text-muted">{plan.description}</p>
                  <small>Course: {plan.course?.title || 'N/A'}</small>
                  <div className="mt-2 d-flex justify-content-end gap-2">
                    <Button
                      size="sm"
                      variant="outline-primary"
                      onClick={() => handleEdit(plan)}
                    >
                      Edit
                    </Button>
                    <Button
                      size="sm"
                      variant="outline-danger"
                      onClick={() => handleDelete(plan._id)}
                    >
                      Delete
                    </Button>
                  </div>
                </Card>
              ))
            ) : (
              <p className="text-muted">No study plans created yet.</p>
            )}
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default EStudyPlanPage;


frontend\src\components\educator\ManageQuestionsModal.js
// frontend/src/components/educator/ManageQuestionsModal.js
import React, { useState, useEffect } from 'react';
import { Modal, Button, Form, ListGroup } from 'react-bootstrap';

const ManageQuestionsModal = ({ show, onClose, onSave, initialQuestions = [] }) => {
  const [questions, setQuestions] = useState([]);
  const [current, setCurrent] = useState({ text: '', options: ['', '', '', ''], correctIndex: 0 });
  const [editIndex, setEditIndex] = useState(null);

  useEffect(() => {
    setQuestions(initialQuestions);
  }, [initialQuestions]);

  const handleInputChange = (e, i = null) => {
    const { name, value } = e.target;
    if (name === 'text') {
      setCurrent({ ...current, text: value });
    } else if (name === 'option') {
      const newOptions = [...current.options];
      newOptions[i] = value;
      setCurrent({ ...current, options: newOptions });
    } else if (name === 'correctIndex') {
      setCurrent({ ...current, correctIndex: parseInt(value) });
    }
  };

  const resetForm = () => {
    setCurrent({ text: '', options: ['', '', '', ''], correctIndex: 0 });
    setEditIndex(null);
  };

  const handleAdd = () => {
    if (!current.text.trim()) return;
    const updated = [...questions];
    if (editIndex !== null) {
      updated[editIndex] = { ...current };
    } else {
      updated.push({ ...current });
    }
    setQuestions(updated);
    resetForm();
  };

  const handleEdit = (i) => {
    setCurrent({ ...questions[i] });
    setEditIndex(i);
  };

  const handleDelete = (i) => {
    if (!window.confirm('Are you sure to delete this question?')) return;
    const updated = [...questions];
    updated.splice(i, 1);
    setQuestions(updated);
    resetForm();
  };

  const handleSave = () => {
    onSave(questions);
    onClose();
  };

  return (
    <Modal show={show} onHide={onClose} size="lg" backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>Manage Questions</Modal.Title>
      </Modal.Header>

      <Modal.Body>
        <Form>
          <Form.Group>
            <Form.Label>Question Text</Form.Label>
            <Form.Control
              name="text"
              value={current.text}
              onChange={handleInputChange}
              placeholder="Enter question..."
            />
          </Form.Group>

          {current.options.map((opt, i) => (
            <Form.Group key={i} className="mt-2">
              <Form.Label>Option {i + 1}</Form.Label>
              <Form.Control
                name="option"
                value={opt}
                onChange={(e) => handleInputChange(e, i)}
                placeholder={`Option ${i + 1}`}
              />
            </Form.Group>
          ))}

          <Form.Group className="mt-3">
            <Form.Label>Correct Option</Form.Label>
            <Form.Select name="correctIndex" value={current.correctIndex} onChange={handleInputChange}>
              {current.options.map((_, i) => (
                <option key={i} value={i}>
                  Option {i + 1}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <div className="mt-3 d-flex gap-2">
            <Button variant="success" onClick={handleAdd}>
              {editIndex !== null ? 'Update Question' : 'Add Question'}
            </Button>
            {editIndex !== null && (
              <Button variant="secondary" onClick={resetForm}>
                Cancel Edit
              </Button>
            )}
          </div>
        </Form>

        <hr />
        <h6>Current Questions</h6>
        <ListGroup>
          {questions.map((q, i) => (
            <ListGroup.Item key={i}>
              <div className="d-flex justify-content-between align-items-center">
                <div>
                  <strong>Q{i + 1}:</strong> {q.text} <br />
                  <small>
                    Correct Answer: {q.options[q.correctIndex]}
                  </small>
                </div>
                <div className="d-flex gap-2">
                  <Button size="sm" onClick={() => handleEdit(i)} variant="outline-primary">
                    Edit
                  </Button>
                  <Button size="sm" onClick={() => handleDelete(i)} variant="outline-danger">
                    Delete
                  </Button>
                </div>
              </div>
            </ListGroup.Item>
          ))}
        </ListGroup>
      </Modal.Body>

      <Modal.Footer>
        <Button variant="secondary" onClick={onClose}>
          Close
        </Button>
        <Button variant="primary" onClick={handleSave}>
          Save Questions
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default ManageQuestionsModal;


frontend\src\components\learner\AssignmentList.js
import React, { useEffect, useState } from 'react';
import {
  Container,
  Card,
  Button,
  Form,
  Spinner,
  Badge,
  Row,
  Col,
} from 'react-bootstrap';
import axios from 'axios';
import { FaCloudUploadAlt } from 'react-icons/fa';
import {toast} from 'react-toastify';

const AssignmentList = () => {
  const token = localStorage.getItem('token');
  const [assignments, setAssignments] = useState([]);
  const [uploadingId, setUploadingId] = useState('');
  const [fileMap, setFileMap] = useState({});
  const [loading, setLoading] = useState(true);
  const [submittedIds, setSubmittedIds] = useState(new Set());

  useEffect(() => {
    const fetchAssignments = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/assignments', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setAssignments(data);
      } catch (err) {
        console.error('Failed to fetch assignments:', err);
      } finally {
        setLoading(false);
      }
    };

    const fetchSubmissions = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/submissions', {
          headers: { Authorization: `Bearer ${token}` },
        });
        const ids = new Set(data.map((s) => s.assignment));
        setSubmittedIds(ids);
      } catch (err) {
        console.error('Failed to fetch submissions:', err);
      }
    };

    fetchAssignments();
    fetchSubmissions();
  }, [token]);

  const handleFileChange = (assignmentId, e) => {
    const file = e.target.files[0];
    if (!file) return;
    if (file.type !== 'application/pdf') {
    toast.error('❌ Only PDF files are allowed!');
    return;
     }
   if (file.size > 5 * 1024 * 1024) {
    toast.error('❌ File size must be less than 5MB');
    return;
    }

    setFileMap((prev) => ({ ...prev, [assignmentId]: file }));
  };

  const handleUpload = async (assignment) => {
    const file = fileMap[assignment._id];
    if (!file) return toast.warn('⚠️ No file selected');

    const formData = new FormData();
    formData.append('file', file);
    formData.append('assignment', assignment._id);

    setUploadingId(assignment._id);
    try {
      await axios.post('http://localhost:5000/api/v1/submissions', formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'multipart/form-data',
        },
      });
      toast.success('✅ Submission uploaded!');
      setSubmittedIds((prev) => new Set(prev).add(assignment._id));
    } catch (err) {
      console.error('Upload failed:', err);
      toast.error('❌ Upload failed!');
    } finally {
      setUploadingId('');
    }
  };

  if (loading) {
    return (
      <Container className="text-center my-4">
        <Spinner animation="border" />
        <p>Loading assignments...</p>
      </Container>
    );
  }

  if (assignments.length === 0) {
    return <p className="text-center">No assignments available.</p>;
  }

  return (
    <Container className="my-4">
      <h4 className="mb-4">My Assignments</h4>
      <Row xs={1} md={2} lg={2} className="g-4">
        {assignments.map((assignment) => (
          <Col key={assignment._id}>
            <Card className="p-3 shadow-sm">
              <Card.Title>{assignment.name}</Card.Title>
              <Card.Subtitle className="mb-2 text-muted">
                Course: {assignment.course?.title || '-'}
              </Card.Subtitle>
              <Card.Text>
                Due Date:{' '}
                {assignment.dueDate
                  ? new Date(assignment.dueDate).toLocaleDateString()
                  : '-'}
              </Card.Text>

              {submittedIds.has(assignment._id) ? (
                <Badge bg="success">Already Submitted</Badge>
              ) : (
                <>
                  <Form.Group controlId={`file-${assignment._id}`} className="mb-2">
                    <Form.Label>Upload PDF</Form.Label>
                    <Form.Control
                      type="file"
                      accept=".pdf"
                      onChange={(e) => handleFileChange(assignment._id, e)}
                    />
                  </Form.Group>

                  <Button
                    variant="primary"
                    onClick={() => handleUpload(assignment)}
                    disabled={uploadingId === assignment._id}
                  >
                    {uploadingId === assignment._id ? (
                      <Spinner animation="border" size="sm" />
                    ) : (
                      <>
                        <FaCloudUploadAlt /> Submit
                      </>
                    )}
                  </Button>
                </>
              )}
            </Card>
          </Col>
        ))}
      </Row>
    </Container>
  );
};

export default AssignmentList;

frontend\src\components\learner\LearnerQuizList.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, Button, Spinner, Form, Row, Col } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import 'react-toastify/dist/ReactToastify.css';

const LearnerQuizList = () => {
  const [quizzes, setQuizzes] = useState([]);
  const [enrollments, setEnrollments] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState('');
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState(null);

  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  useEffect(() => {
    const u = localStorage.getItem('user');
    if (u) setUser(JSON.parse(u));
  }, []);

  useEffect(() => {
    const isActive = localStorage.getItem('isActive');
    if (isActive === 'false') {
      window.location.href = '/inactive';
    }
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [quizRes, enrollRes, attemptsRes] = await Promise.all([
          axios.get('http://localhost:5000/api/v1/quizzes', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/enrollments', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/quizAttempts/my/all', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);

        const today = new Date();
        const enrolled = enrollRes.data || [];
        const eligibleEnrollments = enrolled.filter((e) => {
          const enrolledDate = new Date(e.createdAt);
          const daysSinceEnroll = (today - enrolledDate) / (1000 * 60 * 60 * 24);
          return e.paymentStatus === 'success' || daysSinceEnroll <= 7;
        });

        const eligibleCourseIds = eligibleEnrollments.map((e) => e.course._id);
        const availableQuizzes = quizRes.data.filter(
          (quiz) =>
            quiz.published === true &&
            eligibleCourseIds.includes(quiz.course?._id)
        );

        const attemptedQuizIds = attemptsRes.data.map((attempt) => attempt.quiz);

        // Attach attempts for display
        const quizzesWithAttemptFlag = availableQuizzes.map((q) => ({
          ...q,
          attempted: attemptedQuizIds.includes(q._id),
        }));

        setEnrollments(eligibleEnrollments);
        setQuizzes(quizzesWithAttemptFlag);
      } catch (err) {
        console.error(err);
        toast.error('❌ Failed to load quizzes or enrollments.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [token]);

  const filteredQuizzes = selectedCourse
    ? quizzes.filter((q) => q.course._id === selectedCourse)
    : quizzes;

  const handleStartQuiz = (quizId) => {
    navigate(`/learner/quiz/attempt/${quizId}`);
  };

  return (
    <div>
      <ToastContainer />
      <h5 className="mb-3">❓ Available Quizzes</h5>

      <Form.Group className="mb-3">
        <Form.Label>Filter by Course</Form.Label>
        <Form.Select
          value={selectedCourse}
          onChange={(e) => setSelectedCourse(e.target.value)}
        >
          <option value="">-- All Courses --</option>
          {[...new Map(quizzes.map((q) => [q.course._id, q.course])).values()].map((course) => (
            <option key={course._id} value={course._id}>
              {course.title}
            </option>
          ))}
        </Form.Select>
      </Form.Group>

      {loading ? (
        <Spinner animation="border" />
      ) : filteredQuizzes.length === 0 ? (
        <p className="text-muted">No quizzes available for your courses.</p>
      ) : (
        <Row>
          {filteredQuizzes.map((quiz) => (
            <Col md={6} lg={4} key={quiz._id} className="mb-4">
              <Card>
                <Card.Body>
                  <Card.Title>{quiz.title}</Card.Title>
                  <Card.Text>
                    <strong>Course:</strong> {quiz.course?.title || 'N/A'} <br />
                    <strong>Duration:</strong> {quiz.durationMinutes} mins <br />
                    <strong>Learners Attempted:</strong> {quiz.submissions?.length || 0}
                  </Card.Text>

                  {user?.role === 'learner' && !quiz.attempted && (
                    <Button variant="primary" onClick={() => handleStartQuiz(quiz._id)}>
                      Start Quiz
                    </Button>
                  )}

                  {user?.role === 'learner' && quiz.attempted && (
                    <p className="text-success">✅ You have already attempted this quiz.</p>
                  )}
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      )}
    </div>
  );
};

export default LearnerQuizList;


frontend\src\components\learner\ResultHistory.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Card, Row, Col, Spinner, Alert } from 'react-bootstrap';
import { FaCheckCircle } from 'react-icons/fa';

const ResultHistory = () => {
  const [attempts, setAttempts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchAttempts = async () => {
      try {
        const { data } = await axios.get('/api/v1/attempts/mine');
        setAttempts(data);
      } catch (err) {
        setError('Failed to load results. Please try again.');
      } finally {
        setLoading(false);
      }
    };
    fetchAttempts();
  }, []);

  return (
    <Container className="mt-4">
      <h3 className="mb-4 text-center">📜 Quiz Result History</h3>
      {loading ? (
        <div className="text-center"><Spinner animation="border" /></div>
      ) : error ? (
        <Alert variant="danger">{error}</Alert>
      ) : attempts.length === 0 ? (
        <Alert variant="info">You haven't attempted any quizzes yet.</Alert>
      ) : (
        <Row xs={1} md={2} lg={3}>
          {attempts.map((attempt, index) => (
            <Col key={index} className="mb-4">
              <Card border="success">
                <Card.Body>
                  <Card.Title>{attempt.quiz.title}</Card.Title>
                  <Card.Subtitle className="mb-2 text-muted">
                    Score: {attempt.score} / {attempt.quiz.questions.length}
                  </Card.Subtitle>
                  <Card.Text>
                    Attempted on: {new Date(attempt.attemptedAt).toLocaleString()}
                  </Card.Text>
                  <FaCheckCircle className="text-success me-2" />
                  Completed
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      )}
    </Container>
  );
};

export default ResultHistory;

frontend\src\components\learner\SubmissionHistory.js
import React, { useEffect, useState } from 'react';
import {
  Table,
  Badge,
  Spinner,
  Container,
  Button,
  Row,
  Col,
  Form,
} from 'react-bootstrap';
import axios from 'axios';
import { FaFilePdf, FaCheckCircle, FaRedo, FaHourglassHalf, FaDownload } from 'react-icons/fa';
import { CSVLink } from 'react-csv';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const SubmissionHistory = () => {
  const [submissions, setSubmissions] = useState([]);
  const [filteredSubmissions, setFilteredSubmissions] = useState([]);
  const [courses, setCourses] = useState([]);
  const [courseFilter, setCourseFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [minGrade, setMinGrade] = useState('');
  const [maxGrade, setMaxGrade] = useState('');
  const [sortOrder, setSortOrder] = useState('desc');
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem('token');

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [subRes, courseRes] = await Promise.all([
          axios.get('http://localhost:5000/api/v1/submissions', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/courses', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);

        setSubmissions(subRes.data);
        setCourses(courseRes.data.courses || courseRes.data);
      } catch (error) {
        console.error('Error loading data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [token]);

  useEffect(() => {
    let data = [...submissions];

    if (courseFilter) {
      data = data.filter(s => s.assignment?.course?.title === courseFilter);
    }

    if (statusFilter) {
      data = data.filter(s => s.status === statusFilter);
    }

    if (minGrade) {
      data = data.filter(s => s.grade >= parseFloat(minGrade));
    }

    if (maxGrade) {
      data = data.filter(s => s.grade <= parseFloat(maxGrade));
    }

    if (sortOrder === 'asc') {
      data.sort((a, b) => new Date(a.submittedAt) - new Date(b.submittedAt));
    } else {
      data.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));
    }

    setFilteredSubmissions(data);
  }, [submissions, courseFilter, statusFilter, minGrade, maxGrade, sortOrder]);

  const renderStatus = (status) => {
    switch (status) {
      case 'submitted':
        return <Badge bg="info"><FaHourglassHalf /> Submitted</Badge>;
      case 'resubmitted':
        return <Badge bg="warning"><FaRedo /> Resubmitted</Badge>;
      case 'graded':
        return <Badge bg="success"><FaCheckCircle /> Graded</Badge>;
      default:
        return <Badge bg="secondary">Unknown</Badge>;
    }
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    doc.text('Submission History Report', 14, 15);
    doc.autoTable({
      startY: 20,
      head: [['#', 'Course', 'Assignment', 'Submitted At', 'Status', 'Grade', 'Feedback']],
      body: filteredSubmissions.map((s, index) => [
        index + 1,
        s.assignment?.course?.title || '-',
        s.assignment?.name || '-',
        new Date(s.submittedAt).toLocaleString(),
        s.status,
        s.grade ?? '-',
        s.feedback || '-',
      ]),
    });
    doc.save('submission-history.pdf');
  };

  const csvData = filteredSubmissions.map((s, index) => ({
    No: index + 1,
    Course: s.assignment?.course?.title || '-',
    Assignment: s.assignment?.name || '-',
    Submitted_At: new Date(s.submittedAt).toLocaleString(),
    Status: s.status,
    Grade: s.grade ?? '-',
    Feedback: s.feedback || '-',
  }));

  if (loading) {
    return (
      <Container className="text-center my-4">
        <Spinner animation="border" />
        <p>Loading submissions...</p>
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <h4>📥 Submission History</h4>

      {/* Filters */}
      <Row className="mb-3 g-3">
        <Col md={3}>
          <Form.Select value={courseFilter} onChange={(e) => setCourseFilter(e.target.value)}>
            <option value="">Filter by Course</option>
            {courses.map((c) => (
              <option key={c._id} value={c.title}>{c.title}</option>
            ))}
          </Form.Select>
        </Col>
        <Col md={2}>
          <Form.Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
            <option value="">Status</option>
            <option value="submitted">Submitted</option>
            <option value="graded">Graded</option>
            <option value="resubmitted">Resubmitted</option>
          </Form.Select>
        </Col>
        <Col md={2}>
          <Form.Control type="number" placeholder="Min Grade" value={minGrade} onChange={(e) => setMinGrade(e.target.value)} />
        </Col>
        <Col md={2}>
          <Form.Control type="number" placeholder="Max Grade" value={maxGrade} onChange={(e) => setMaxGrade(e.target.value)} />
        </Col>
        <Col md={2}>
          <Form.Select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
            <option value="desc">Newest First</option>
            <option value="asc">Oldest First</option>
          </Form.Select>
        </Col>
        <Col md={1} className="text-end">
          <CSVLink data={csvData} filename="submission-history.csv" className="btn btn-outline-primary me-2">
            <FaDownload />
          </CSVLink>
          <Button variant="outline-danger" onClick={exportPDF}><FaFilePdf /></Button>
        </Col>
      </Row>

      <Table striped bordered hover responsive>
        <thead>
          <tr>
            <th>#</th>
            <th>Course</th>
            <th>Assignment</th>
            <th>Submitted At</th>
            <th>Status</th>
            <th>Grade</th>
            <th>Feedback</th>
            <th>File</th>
          </tr>
        </thead>
        <tbody>
          {filteredSubmissions.length > 0 ? (
            filteredSubmissions.map((submission, index) => (
              <tr key={submission._id}>
                <td>{index + 1}</td>
                <td>{submission.assignment?.course?.title || '-'}</td>
                <td>{submission.assignment?.name || '-'}</td>
                <td>{new Date(submission.submittedAt).toLocaleString()}</td>
                <td>{renderStatus(submission.status)}</td>
                <td>{submission.grade ?? '-'}</td>
                <td>{submission.feedback || '-'}</td>
                <td>
                  <a
                    href={`http://localhost:5000/${submission.fileUrl}`}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    View
                  </a>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="8" className="text-center">No submissions found for the selected filters.</td>
            </tr>
          )}
        </tbody>
      </Table>
    </Container>
  );
};

export default SubmissionHistory;

frontend\src\components\shared\ForumPostCard.js
// ForumPostCard.js
import React, { useState } from 'react';
import { Button, Card, Form, Badge } from 'react-bootstrap';
import { FaEdit, FaReply, FaTrash } from 'react-icons/fa';
import axios from 'axios';
import { toast } from 'react-toastify';

const ForumPostCard = ({ post, replies, currentUser, onUpdate, depth = 0 }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [isReplying, setIsReplying] = useState(false);
  const [editedContent, setEditedContent] = useState(post.content);
  const [replyContent, setReplyContent] = useState('');
  const token = localStorage.getItem('token');

  const handleEdit = async () => {
    try {
      await axios.patch(`http://localhost:5000/api/v1/forum/${post._id}`, {
        content: editedContent,
      }, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('Post updated');
      setIsEditing(false);
      onUpdate();
    } catch (err) {
      toast.error('Failed to update post');
    }
  };

  const handleReply = async () => {
    try {
      await axios.post('http://localhost:5000/api/v1/forum', {
        content: replyContent,
        parentPost: post._id,
      }, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('Reply added');
      setReplyContent('');
      setIsReplying(false);
      onUpdate();
    } catch (err) {
      toast.error('Failed to post reply');
    }
  };

  const isEdited = post.updatedAt && new Date(post.updatedAt).getTime() !== new Date(post.createdAt).getTime();

  return (
    <Card className="mb-2" style={{ marginLeft: `${depth * 20}px` }}>
      <Card.Body>
        <Card.Title>
          {post.user?.firstName} {post.user?.lastName} {' '}
          <small className="text-muted">@{post.user?.role}</small>
        </Card.Title>
        {!isEditing ? (
          <Card.Text>
            {post.content}
            {isEdited && (
              <div>
                <Badge bg="light" text="dark" className="ms-2">
                  (edited on {new Date(post.updatedAt).toLocaleString()})
                </Badge>
              </div>
            )}
          </Card.Text>
        ) : (
          <Form.Control
            as="textarea"
            value={editedContent}
            onChange={(e) => setEditedContent(e.target.value)}
            rows={3}
          />
        )}

        <div className="d-flex gap-2">
          {currentUser?._id === post.user?._id && (
            <>
              <Button
                variant={isEditing ? 'success' : 'outline-primary'}
                size="sm"
                onClick={isEditing ? handleEdit : () => setIsEditing(true)}
              >
                <FaEdit /> {isEditing ? 'Save' : 'Edit'}
              </Button>
            </>
          )}

          <Button
            variant={isReplying ? 'success' : 'outline-secondary'}
            size="sm"
            onClick={isReplying ? handleReply : () => setIsReplying(true)}
          >
            <FaReply /> {isReplying ? 'Post Reply' : 'Reply'}
          </Button>
        </div>

        {isReplying && (
          <Form.Control
            as="textarea"
            className="mt-2"
            placeholder="Write your reply..."
            value={replyContent}
            onChange={(e) => setReplyContent(e.target.value)}
          />
        )}
      </Card.Body>

      {/* Nested replies */}
      {replies && replies.length > 0 && replies.map((r) => (
        <ForumPostCard
          key={r._id}
          post={r}
          replies={r.replies || []}
          currentUser={currentUser}
          onUpdate={onUpdate}
          depth={depth + 1}
        />
      ))}
    </Card>
  );
};

export default ForumPostCard;

frontend\src\components\shared\ZoomSessionList.js
// frontend/src/components/ZoomSessionList.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Table, Spinner, Badge } from 'react-bootstrap';
import { FaVideo, FaClock, FaCheck } from 'react-icons/fa';

const LiveZoomSessions = () => {
  const [sessions, setSessions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [paidCourseIds, setPaidCourseIds] = useState([]);
  const token = localStorage.getItem('token');

  useEffect(() => {
    const fetchSessions = async () => {
      try {
        const [sessionRes, enrollRes] = await Promise.all([
          axios.get('http://localhost:5000/api/v1/doubts', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/enrollments', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);

        const paidIds = enrollRes.data
          .filter((e) => e.paymentStatus === 'success')
          .map((e) => e.course._id);

        setPaidCourseIds(paidIds);

        const filtered = sessionRes.data.filter(
          (session) => session.course && paidIds.includes(session.course._id)
        );

        setSessions(filtered);
      } catch (err) {
        console.error('Error fetching Zoom sessions:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchSessions();
  }, [token]);

  const isUpcoming = (date) => new Date(date) > new Date();

  return (
    <Container className="my-4">
      <h4>📺 Live Zoom Sessions</h4>
      {loading ? (
        <div className="text-center"><Spinner animation="border" /></div>
      ) : (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Course</th>
              <th>Topic</th>
              <th>Educator</th>
              <th>Scheduled</th>
              <th>Duration</th>
              <th>Status</th>
              <th>Join</th>
            </tr>
          </thead>
          <tbody>
            {sessions.length > 0 ? (
              sessions.map((session) => (
                <tr key={session._id}>
                  <td>{session.course?.title || '-'}</td>
                  <td>{session.topic}</td>
                  <td>{session.educator?.firstName} {session.educator?.lastName}</td>
                  <td>{new Date(session.scheduledDate).toLocaleString()}</td>
                  <td>{session.durationMinutes} min</td>
                  <td>
                    {isUpcoming(session.scheduledDate) ? (
                      <Badge bg="info"><FaClock /> Upcoming</Badge>
                    ) : (
                      <Badge bg="secondary"><FaCheck /> Past</Badge>
                    )}
                  </td>
                  <td>
                    {session.link ? (
                      <a
                        href={session.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="btn btn-sm btn-outline-primary"
                      >
                        <FaVideo /> Join
                      </a>
                    ) : (
                      '-'
                    )}
                  </td>
                </tr>
              ))
            ) : (
              <tr><td colSpan="7" className="text-center text-muted">No Zoom sessions available or payment pending.</td></tr>
            )}
          </tbody>
        </Table>
      )}
    </Container>
  );
};

export default LiveZoomSessions;

frontend\src\components\AssignmentForm.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Spinner, Form, Button, Card } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const AssignmentForm = ({ existingData, onSuccess }) => {
  const token = localStorage.getItem('token');

  const [name, setName] = useState(existingData?.name || '');
  const [instructions, setInstructions] = useState(existingData?.instructions || '');
  const [dueDate, setDueDate] = useState(
    existingData?.dueDate
      ? new Date(existingData.dueDate).toISOString().slice(0, 16)
      : ''
  );
  const [course, setCourse] = useState(
    existingData?.course?._id || existingData?.course || ''
  );

  const [courses, setCourses] = useState([]);
  const [loadingCourses, setLoadingCourses] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const fetchCourses = async () => {
      setLoadingCourses(true);
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setCourses(data.courses || data);
      } catch (err) {
        console.error('Error loading courses:', err);
        toast.error('Unable to load courses. Please try again.');
      } finally {
        setLoadingCourses(false);
      }
    };
    fetchCourses();
  }, [token]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name || !course || !dueDate) {
      toast.warn('Please fill in all required fields.');
      return;
    }

    setSubmitting(true);
    try {
      const payload = {
        name,
        instructions,
        course, // Must be course._id
        dueDate: new Date(dueDate).toISOString()
      };

      const config = {
        headers: { Authorization: `Bearer ${token}` }
      };

      if (existingData?._id) {
        await axios.patch(
          `http://localhost:5000/api/v1/assignments/${existingData._id}`,
          payload,
          config
        );
        toast.success('Assignment updated successfully!');
      } else {
        await axios.post(
          'http://localhost:5000/api/v1/assignments',
          payload,
          config
        );
        toast.success('Assignment created successfully!');
        setName('');
        setInstructions('');
        setCourse('');
        setDueDate('');
      }

      onSuccess && onSuccess();
    } catch (err) {
      console.error('Submit error:', err);
      const msg = err.response?.data?.message || err.message || 'Submission failed';
      toast.error(msg);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Card className="p-4">
      <ToastContainer position="top-center" />
      <h5 className="mb-4 text-center">
        {existingData?._id ? 'Edit Assignment' : 'Create New Assignment'}
      </h5>

      {loadingCourses ? (
        <div className="text-center my-3">
          <Spinner animation="border" /> Loading courses...
        </div>
      ) : (
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>
              Name <span className="text-danger">*</span>
            </Form.Label>
            <Form.Control
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Enter assignment name"
              disabled={submitting}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>
              Course <span className="text-danger">*</span>
            </Form.Label>
            <Form.Select
              value={course}
              onChange={(e) => setCourse(e.target.value)}
              disabled={submitting}
              required
            >
              <option value="">-- Select Course --</option>
              {courses.map((c) => (
                <option key={c._id} value={c._id}>
                  {c.title}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Instructions</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              value={instructions}
              onChange={(e) => setInstructions(e.target.value)}
              disabled={submitting}
            />
          </Form.Group>

          <Form.Group className="mb-4">
            <Form.Label>
              Due Date & Time <span className="text-danger">*</span>
            </Form.Label>
            <Form.Control
              type="datetime-local"
              value={dueDate}
              onChange={(e) => setDueDate(e.target.value)}
              disabled={submitting}
              required
            />
          </Form.Group>

          <Button
            type="submit"
            variant="primary"
            className="w-100"
            disabled={submitting}
          >
            {submitting ? (
              <>
                <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" />
                {' '}Submitting...
              </>
            ) : existingData?._id ? 'Update Assignment' : 'Create Assignment'}
          </Button>
        </Form>
      )}
    </Card>
  );
};

export default AssignmentForm;

frontend\src\components\AssignmentSubmission.js
// frontend/src/components/AssignmentSubmission.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Card, Form, Button, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const AssignmentSubmission = ({ existingData = {}, onSuccess }) => {
  const token = localStorage.getItem('token');

  const [courses, setCourses] = useState([]);
  const [assignments, setAssignments] = useState([]);

  const [course, setCourse] = useState(existingData.course || '');
  const [assignment, setAssignment] = useState(existingData.assignment || '');
  const [file, setFile] = useState(null);

  const [loadingCourses, setLoadingCourses] = useState(false);
  const [loadingAssignments, setLoadingAssignments] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // Fetch all courses
  useEffect(() => {
    const fetchCourses = async () => {
      setLoadingCourses(true);
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setCourses(data.courses || data);
      } catch (err) {
        console.error('Error loading courses:', err);
        toast.error('Unable to load courses.');
      } finally {
        setLoadingCourses(false);
      }
    };
    fetchCourses();
  }, [token]);

  // Fetch assignments when a course is selected
  useEffect(() => {
    const fetchAssignments = async () => {
      if (!course) {
        setAssignments([]);
        return;
      }
      setLoadingAssignments(true);
      try {
        // Assuming your backend supports filtering by course
        const { data } = await axios.get(
          `http://localhost:5000/api/v1/assignments?course=${course}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setAssignments(data);
      } catch (err) {
        console.error('Error loading assignments:', err);
        toast.error('Unable to load assignments.');
      } finally {
        setLoadingAssignments(false);
      }
    };
    fetchAssignments();
  }, [course, token]);

  const handleFileChange = (e) => {
    const selected = e.target.files[0];
    if (selected && selected.type !== 'application/pdf') {
      toast.warn('Only PDF files are allowed');
      return;
    }
    setFile(selected);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!course || !assignment || !file) {
      toast.warn('Please select a course, assignment, and upload a PDF.');
      return;
    }

    setSubmitting(true);
    try {
      const formData = new FormData();
      formData.append('course', course);
      formData.append('assignment', assignment);
      formData.append('file', file);

      if (existingData._id) {
        // Update existing submission
        await axios.patch(
          `http://localhost:5000/api/v1/submissions/${existingData._id}`,
          formData,
          {
            headers: {
              Authorization: `Bearer ${token}`,
              'Content-Type': 'multipart/form-data',
            },
          }
        );
        toast.success('Submission updated successfully!');
      } else {
        // Create new submission
        await axios.post(
          'http://localhost:5000/api/v1/submissions',
          formData,
          {
            headers: {
              Authorization: `Bearer ${token}`,
              'Content-Type': 'multipart/form-data',
            },
          }
        );
        toast.success('Assignment submitted successfully!');
        // reset form
        setCourse('');
        setAssignment('');
        setFile(null);
      }

      // notify parent to refresh list/modal
      onSuccess && onSuccess();
    } catch (err) {
      console.error('Submission error:', err);
      const msg = err.response?.data?.message || err.message || 'Submission failed';
      toast.error(msg);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Card className="p-4">
      <ToastContainer position="top-center" />
      <h5 className="mb-4 text-center">
        {existingData._id ? 'Update Submission' : 'Submit Assignment (PDF)'}
      </h5>

      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3">
          <Form.Label>Select Course</Form.Label>
          {loadingCourses ? (
            <div><Spinner animation="border" size="sm" /> Loading courses...</div>
          ) : (
            <Form.Select
              value={course}
              onChange={(e) => setCourse(e.target.value)}
              disabled={submitting}
              required
            >
              <option value="">-- Select Course --</option>
              {courses.map((c) => (
                <option key={c._id} value={c._id}>{c.title}</option>
              ))}
            </Form.Select>
          )}
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Select Assignment</Form.Label>
          {loadingAssignments ? (
            <div><Spinner animation="border" size="sm" /> Loading assignments...</div>
          ) : (
            <Form.Select
              value={assignment}
              onChange={(e) => setAssignment(e.target.value)}
              disabled={!course || submitting}
              required
            >
              <option value="">-- Select Assignment --</option>
              {assignments.map((a) => (
                <option key={a._id} value={a._id}>{a.name}</option>
              ))}
            </Form.Select>
          )}
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Upload PDF File</Form.Label>
          <Form.Control
            type="file"
            accept="application/pdf"
            onChange={handleFileChange}
            disabled={submitting}
            required
          />
        </Form.Group>

        {file && (
          <div className="mb-3">
            <strong>Selected File:</strong> {file.name}
          </div>
        )}

        <Button
          type="submit"
          variant="success"
          className="w-100"
          disabled={submitting}
        >
          {submitting ? (
            <>
              <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" />
              {' '}Submitting...
            </>
          ) : existingData._id ? 'Update Submission' : 'Submit Assignment'}
        </Button>
      </Form>
    </Card>
  );
};

export default AssignmentSubmission;

frontend\src\components\CourseForm.js
// CourseForm.js – with full edit support for all course details
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import { Form, Button, Spinner, Card, Row, Col } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';


const CourseForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const [formData, setFormData] = useState({
    title: '', description: '', category: '', syllabus: '',
    duration: '', startDate: '', endDate: '', fee: '',
    educator: '', medium: '', venue: '', classDays: [],
  });
  const [image, setImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [educators, setEducators] = useState([]);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [timeByDay, setTimeByDay] = useState({});

  const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];

  const categories = [
    'Mathematics', 'Physics', 'Chemistry', 'Biology',
    'Engineering', 'Science and Technology',
    'Programming and Web Development', 'Commerce and Management'
  ];

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const educatorsRes = await axios.get('http://localhost:5000/api/v1/users?role=educator', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setEducators(educatorsRes.data);

        if (id) {
          const courseRes = await axios.get(`http://localhost:5000/api/v1/courses/${id}`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          const data = courseRes.data;

          // Setup class schedule state
          const timeObj = {};
          const classDays = (data.classTimes || []).map(item => {
            timeObj[item.day] = {
              startTime: item.startTime,
              endTime: item.endTime
            };
            return { day: item.day };
          });

          setFormData({
            title: data.title || '',
            description: data.description || '',
            category: data.category || '',
            syllabus: data.syllabus || '',
            duration: data.duration || '',
            startDate: data.startDate ? data.startDate.substring(0, 10) : '',
            endDate: data.endDate ? data.endDate.substring(0, 10) : '',
            fee: data.fee || '',
            educator: data.educator || '',
            medium: data.medium || '',
            venue: data.venue || '',
            classDays
          });

          setTimeByDay(timeObj);
          if (data.image) setImagePreview(data.image);
        }
      } catch (err) {
        toast.error('Failed to load data.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id, token]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleDayToggle = (day) => {
    setFormData(prev => {
      const exists = prev.classDays.some(d => d.day === day);
      const updated = exists
        ? prev.classDays.filter(d => d.day !== day)
        : [...prev.classDays, { day }];
      return { ...prev, classDays: updated };
    });
  };

  const handleTimeChange = (day, field, value) => {
    setTimeByDay(prev => ({
      ...prev,
      [day]: {
        ...prev[day],
        [field]: value
      }
    }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setImagePreview(URL.createObjectURL(file));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    try {
      let finalPayload = { ...formData };

      // Convert classDays + timeByDay → classTimes
      const classTimesParsed = formData.classDays.map(({ day }) => ({
        day,
        startTime: timeByDay[day]?.startTime || '',
        endTime: timeByDay[day]?.endTime || ''
      }));
      finalPayload.classTimes = classTimesParsed;
      delete finalPayload.classDays;

      if (image) {
        const formDataImage = new FormData();
        formDataImage.append('image', image);
        const res = await axios.post('http://localhost:5000/api/upload-course-image', formDataImage, {
          headers: { Authorization: `Bearer ${token}` }
        });
        finalPayload.image = res.data.imageUrl;
      }

      const config = {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        }
      };

      if (id) {
        await axios.patch(`http://localhost:5000/api/v1/courses/${id}`, finalPayload, config);
        toast.success('Course updated successfully!');
      } else {
        await axios.post('http://localhost:5000/api/v1/courses', finalPayload, config);
        toast.success('Course created successfully!');
      }

      setTimeout(() => navigate('/coordinator/course'), 1500);
    } catch (err) {
      toast.error(err.response?.data?.message || 'Submission failed.');
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) return <div className="text-center my-4"><Spinner animation="border" /> Loading...</div>;

  return (
    <Card className="p-4">
      <ToastContainer />
      <h5 className="mb-4 text-center">{id ? 'Edit Course' : 'Create New Course'}</h5>
      <Form onSubmit={handleSubmit} encType="multipart/form-data">
        <Form.Group className="mb-3"><Form.Label>Title</Form.Label>
          <Form.Control name="title" value={formData.title} onChange={handleChange} required />
        </Form.Group>

        <Form.Group className="mb-3"><Form.Label>Description</Form.Label>
          <Form.Control as="textarea" name="description" value={formData.description} onChange={handleChange} required />
        </Form.Group>

        <Form.Group className="mb-3"><Form.Label>Category</Form.Label>
          <Form.Select name="category" value={formData.category} onChange={handleChange} required>
            <option value="">Select category</option>
            {categories.map(cat => <option key={cat} value={cat}>{cat}</option>)}
          </Form.Select>
        </Form.Group>

        <Form.Group className="mb-3"><Form.Label>Syllabus</Form.Label>
          <Form.Control as="textarea" name="syllabus" value={formData.syllabus} onChange={handleChange} required />
        </Form.Group>

        <Form.Group className="mb-3"><Form.Label>Duration (weeks)</Form.Label>
          <Form.Control name="duration" value={formData.duration} onChange={handleChange} required />
        </Form.Group>

        <Row>
          <Col><Form.Group className="mb-3"><Form.Label>Start Date</Form.Label>
            <Form.Control type="date" name="startDate" value={formData.startDate} onChange={handleChange} required />
          </Form.Group></Col>
          <Col><Form.Group className="mb-3"><Form.Label>End Date</Form.Label>
            <Form.Control type="date" name="endDate" value={formData.endDate} onChange={handleChange} required />
          </Form.Group></Col>
        </Row>

        <Form.Group className="mb-3"><Form.Label>Fee</Form.Label>
          <Form.Control name="fee" type="number" value={formData.fee} onChange={handleChange} required />
        </Form.Group>

        <Form.Group className="mb-3"><Form.Label>Medium</Form.Label>
          <Form.Select name="medium" value={formData.medium} onChange={handleChange} required>
            <option value="">Select Medium</option>
            <option value="English">English</option>
            <option value="Tamil">Tamil</option>
            <option value="Sinhala">Sinhala</option>
          </Form.Select>
        </Form.Group>

        <Form.Group className="mb-3"><Form.Label>Venue</Form.Label>
          <Form.Select name="venue" value={formData.venue} onChange={handleChange} required>
            <option value="">Select Venue</option>
            <option value="Online">Online</option>
            <option value="Offline">Offline</option>
          </Form.Select>
        </Form.Group>

        <Form.Group className="mb-3"><Form.Label>Educator</Form.Label>
          <Form.Select name="educator" value={formData.educator} onChange={handleChange} required>
            <option value="">Select educator</option>
            {educators.map(e => <option key={e._id} value={e._id}>{e.firstName} {e.lastName}</option>)}
          </Form.Select>
        </Form.Group>

        <Form.Group className="mb-3"><Form.Label>Upload Course Image (Optional)</Form.Label>
          <Form.Control type="file" onChange={handleImageChange} accept="image/*" />
          {imagePreview && <img src={imagePreview} alt="Preview" className="mt-2" style={{ maxWidth: '200px' }} />}
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Class Schedule</Form.Label>
          {daysOfWeek.map(day => {
            const isChecked = formData.classDays.some(d => d.day === day);
            return (
              <div key={day} className="mb-2">
                <Form.Check
                  type="checkbox"
                  label={day}
                  checked={isChecked}
                  onChange={() => handleDayToggle(day)}
                />
                {isChecked && (
                  <Row className="mt-1">
                    <Col><Form.Label>Start</Form.Label>
                      <Form.Control type="time" value={timeByDay[day]?.startTime || ''} onChange={(e) => handleTimeChange(day, 'startTime', e.target.value)} />
                    </Col>
                    <Col><Form.Label>End</Form.Label>
                      <Form.Control type="time" value={timeByDay[day]?.endTime || ''} onChange={(e) => handleTimeChange(day, 'endTime', e.target.value)} />
                    </Col>
                  </Row>
                )}
              </div>
            );
          })}
        </Form.Group>

        <Button type="submit" disabled={submitting} className="w-100">
          {submitting ? <Spinner size="sm" animation="border" /> : id ? 'Update Course' : 'Create Course'}
        </Button>
      </Form>
    </Card>
  );
};

export default CourseForm;

frontend\src\components\DashboardMetrics.js
import React, { useEffect, useState } from 'react';
import { Card, Row, Col, Spinner } from 'react-bootstrap';
import axios from 'axios';
import { FaUserGraduate, FaChalkboardTeacher, FaBook, FaTasks, FaFileAlt, FaUserPlus } from 'react-icons/fa';

const DashboardMetrics = () => {
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem('token');

  useEffect(() => {
    const fetchMetrics = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/dashboard/metrics', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setMetrics(data);
      } catch (err) {
        console.error('Error fetching dashboard metrics:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchMetrics();
  }, [token]);

  if (loading) {
    return (
      <div className="text-center my-4">
        <Spinner animation="border" />
        <p>Loading metrics...</p>
      </div>
    );
  }

  if (!metrics) return <p className="text-danger">Unable to load dashboard metrics</p>;

  return (
    <Row xs={1} md={2} lg={3} className="g-4">
      <Col>
        <Card className="shadow-sm text-center">
          <Card.Body>
            <FaBook size={40} className="mb-2 text-primary" />
            <Card.Title>Courses</Card.Title>
            <Card.Text>{metrics.coursesCount}</Card.Text>
          </Card.Body>
        </Card>
      </Col>

      <Col>
        <Card className="shadow-sm text-center">
          <Card.Body>
            <FaTasks size={40} className="mb-2 text-warning" />
            <Card.Title>Assignments</Card.Title>
            <Card.Text>{metrics.assignmentsCount}</Card.Text>
          </Card.Body>
        </Card>
      </Col>

      <Col>
        <Card className="shadow-sm text-center">
          <Card.Body>
            <FaUserGraduate size={40} className="mb-2 text-success" />
            <Card.Title>Learners</Card.Title>
            <Card.Text>{metrics.learnersCount}</Card.Text>
          </Card.Body>
        </Card>
      </Col>

      <Col>
        <Card className="shadow-sm text-center">
          <Card.Body>
            <FaChalkboardTeacher size={40} className="mb-2 text-info" />
            <Card.Title>Educators</Card.Title>
            <Card.Text>{metrics.educatorsCount}</Card.Text>
          </Card.Body>
        </Card>
      </Col>

      <Col>
        <Card className="shadow-sm text-center">
          <Card.Body>
            <FaUserPlus size={40} className="mb-2 text-secondary" />
            <Card.Title>Enrollments</Card.Title>
            <Card.Text>{metrics.enrollmentsCount}</Card.Text>
          </Card.Body>
        </Card>
      </Col>

      <Col>
        <Card className="shadow-sm text-center">
          <Card.Body>
            <FaFileAlt size={40} className="mb-2 text-danger" />
            <Card.Title>Submissions</Card.Title>
            <Card.Text>{metrics.submissionsCount}</Card.Text>
          </Card.Body>
        </Card>
      </Col>
    </Row>
  );
};

export default DashboardMetrics;

frontend\src\components\EditEducator.js
// frontend/src/components/EditEducator.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import { Form, Button, Card, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const EditEducator = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    dob: '',
    sex: '',
    address: '',
    country: '',
  });
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const fetchEducator = async () => {
      try {
        const { data } = await axios.get(`http://localhost:5000/api/v1/educators/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setFormData(data);
      } catch (error) {
        toast.error('Failed to fetch educator details.');
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchEducator();
  }, [id, token]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      await axios.patch(`http://localhost:5000/api/v1/educators/${id}`, formData, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('Educator updated successfully!');
      setTimeout(() => navigate('/coordinator/educators'), 1500);
    } catch (error) {
      toast.error(error.response?.data?.message || 'Failed to update educator.');
      console.error(error);
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) return <div className="text-center my-4"><Spinner animation="border" /> Loading educator...</div>;

  return (
    <Card className="p-4">
      <ToastContainer />
      <h5 className="mb-4 text-center">Edit Educator</h5>
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3">
          <Form.Label>First Name</Form.Label>
          <Form.Control
            type="text"
            name="firstName"
            value={formData.firstName}
            onChange={handleChange}
            required
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Last Name</Form.Label>
          <Form.Control
            type="text"
            name="lastName"
            value={formData.lastName}
            onChange={handleChange}
            required
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Email (readonly)</Form.Label>
          <Form.Control type="email" value={formData.email} disabled readOnly />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Phone</Form.Label>
          <Form.Control
            type="text"
            name="phone"
            value={formData.phone}
            onChange={handleChange}
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Date of Birth</Form.Label>
          <Form.Control
            type="date"
            name="dob"
            value={formData.dob?.substring(0, 10) || ''}
            onChange={handleChange}
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Sex</Form.Label>
          <Form.Select name="sex" value={formData.sex} onChange={handleChange}>
            <option value="">Select</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
          </Form.Select>
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Address</Form.Label>
          <Form.Control
            as="textarea"
            name="address"
            value={formData.address}
            onChange={handleChange}
          />
        </Form.Group>

        <Form.Group className="mb-4">
          <Form.Label>Country</Form.Label>
          <Form.Control
            type="text"
            name="country"
            value={formData.country}
            onChange={handleChange}
          />
        </Form.Group>

        <Button type="submit" disabled={submitting} className="w-100">
          {submitting ? <Spinner size="sm" animation="border" /> : 'Update Educator'}
        </Button>
      </Form>
    </Card>
  );
};

export default EditEducator;

frontend\src\components\EditProfile.js
import React, { useEffect, useState } from 'react';
import { Form, Button, Card, Spinner } from 'react-bootstrap';
import axios from 'axios';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import AvatarUpload from './common/AvatarUpload';

const EditProfile = () => {
  const token = localStorage.getItem('token');
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    dob: '',
    sex: '',
    phone: '',
    address: '',
    country: '',
    avatarUrl: '',
  });
  const [loading, setLoading] = useState(true);
  const [updating, setUpdating] = useState(false);

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/users/profile', {
          headers: { Authorization: `Bearer ${token}` },
        });

        setFormData({
          firstName: data.firstName || '',
          lastName: data.lastName || '',
          dob: data.dob ? data.dob.slice(0, 10) : '',
          sex: data.sex || '',
          phone: data.phone || '',
          address: data.address || '',
          country: data.country || '',
          avatarUrl: data.avatarUrl || '',
        });
      } catch (err) {
        toast.error('Failed to load profile');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, [token]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setUpdating(true);

    try {
      await axios.patch(
        'http://localhost:5000/api/v1/users/profile',
        formData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      toast.success('Profile updated successfully!');
    } catch (err) {
      toast.error(err.response?.data?.message || 'Update failed');
      console.error(err);
    } finally {
      setUpdating(false);
    }
  };

  if (loading) {
    return (
      <div className="text-center my-5">
        <Spinner animation="border" /> Loading profile...
      </div>
    );
  }

  return (
    <Card className="p-4 shadow-sm">
      <ToastContainer position="top-center" />
      <h4 className="text-center mb-4">Edit Profile</h4>
      <Form onSubmit={handleSubmit}>
        <AvatarUpload
          currentAvatarUrl={`http://localhost:5000/${formData.avatarUrl}`}
          onUpload={(url) => setFormData((prev) => ({ ...prev, avatarUrl: url }))}
        />

        {[
          { name: 'firstName', label: 'First Name', type: 'text' },
          { name: 'lastName', label: 'Last Name', type: 'text' },
          { name: 'dob', label: 'Date of Birth', type: 'date' },
          { name: 'sex', label: 'Sex', type: 'select', options: ['', 'male', 'female', 'other'] },
          { name: 'phone', label: 'Phone', type: 'text' },
          { name: 'address', label: 'Address', type: 'text' },
          { name: 'country', label: 'Country', type: 'text' },
        ].map(({ name, label, type, options }) => (
          <Form.Group className="mb-3" controlId={name} key={name}>
            <Form.Label>{label}</Form.Label>
            {type === 'select' ? (
              <Form.Select
                name={name}
                value={formData[name]}
                onChange={handleChange}
                disabled={updating}
              >
                {options.map((opt) => (
                  <option key={opt} value={opt}>
                    {opt || '-- Select --'}
                  </option>
                ))}
              </Form.Select>
            ) : (
              <Form.Control
                type={type}
                name={name}
                value={formData[name]}
                onChange={handleChange}
                disabled={updating}
                required={name === 'firstName'}
              />
            )}
          </Form.Group>
        ))}

        <Button type="submit" variant="success" className="w-100" disabled={updating}>
          {updating ? <Spinner animation="border" size="sm" /> : 'Save Changes'}
        </Button>
      </Form>
    </Card>
  );
};

export default EditProfile;

frontend\src\components\EditProfileModal.js
// frontend/src/components/EditProfileModal.js
import React, { useEffect, useState } from 'react';
import { Modal, Form, Button, Image, Spinner } from 'react-bootstrap';
import axios from 'axios';
import { toast } from 'react-toastify';

const EditProfileModal = ({ show, onClose, userData, onUpdate }) => {
  const token = localStorage.getItem('token');
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    address: '',
    country: '',
  });
  const [avatarFile, setAvatarFile] = useState(null);
  const [avatarPreview, setAvatarPreview] = useState('/uploads/avatars/default-avatar.png');
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (userData) {
      setFormData({
        firstName: userData.firstName || '',
        lastName: userData.lastName || '',
        phone: userData.phone || '',
        address: userData.address || '',
        country: userData.country || '',
      });
      setAvatarPreview(`/uploads/avatars/${userData.avatarUrl || 'default-avatar.png'}`);
    }
  }, [userData]);

  const handleChange = (e) => {
    setFormData((f) => ({ ...f, [e.target.name]: e.target.value }));
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file && !file.type.startsWith('image/')) {
      toast.warn('Only image files are allowed.');
      return;
    }
    setAvatarFile(file);
    if (file) setAvatarPreview(URL.createObjectURL(file));
  };

  const uploadAvatar = async () => {
    const fd = new FormData();
    fd.append('avatar', avatarFile);
    const { data } = await axios.post(
      'http://localhost:5000/api/v1/avatar/upload',
      fd,
      { headers: { Authorization: `Bearer ${token}` } }
    );
    return data.avatarUrl;
  };

  const handleSave = async () => {
    setSaving(true);
    try {
      let avatarUrl = userData.avatarUrl;
      if (avatarFile) {
        avatarUrl = await uploadAvatar();
      }
      const payload = { ...formData, avatarUrl };
      const { data } = await axios.patch(
        'http://localhost:5000/api/v1/users/profile',
        payload,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Profile updated successfully!');
      onUpdate?.(data);
      onClose();
    } catch (err) {
      toast.error(err.response?.data?.message || 'Failed to update profile.');
      console.error(err);
    } finally {
      setSaving(false);
    }
  };

  return (
    <Modal show={show} onHide={onClose} centered backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>Edit Profile</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <div className="text-center mb-3">
          <Image
            src={avatarPreview}
            alt="avatar"
            roundedCircle
            width={100}
            height={100}
            className="border"
          />
          <Form.Control
            type="file"
            accept="image/*"
            className="mt-2"
            onChange={handleAvatarChange}
            disabled={saving}
          />
        </div>
        <Form>
          {['firstName', 'lastName', 'phone', 'address', 'country'].map((field) => (
            <Form.Group key={field} className="mb-2">
              <Form.Label>
                {field.charAt(0).toUpperCase() + field.slice(1)}
              </Form.Label>
              <Form.Control
                name={field}
                value={formData[field]}
                onChange={handleChange}
                disabled={saving}
              />
            </Form.Group>
          ))}
          <Form.Group className="mb-2">
            <Form.Label>Email (read only)</Form.Label>
            <Form.Control
              type="email"
              value={userData.email}
              disabled
              readOnly
            />
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={onClose} disabled={saving}>
          Cancel
        </Button>
        <Button variant="primary" onClick={handleSave} disabled={saving}>
          {saving ? (
            <>
              <Spinner size="sm" animation="border" role="status" aria-hidden="true" /> Saving...
            </>
          ) : (
            'Save Changes'
          )}
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default EditProfileModal;

frontend\src\components\EducatorForm.js
// frontend/src/components/EducatorForm.js
import React, { useState } from 'react';
import axios from 'axios';
import { Form, Button, Card, Image, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const EducatorForm = ({ onSuccess }) => {
  const token = localStorage.getItem('token');
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    dob: '',
    sex: '',
    phone: '',
    address: '',
    country: '',
    role: 'educator',
  });
  const [avatarFile, setAvatarFile] = useState(null);
  const [preview, setPreview] = useState('/uploads/avatars/default-avatar.png');
  const [submitting, setSubmitting] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file && !file.type.startsWith('image/')) {
      toast.warn('Only image files are allowed.');
      return;
    }
    setAvatarFile(file);
    if (file) setPreview(URL.createObjectURL(file));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const fd = new FormData();
      Object.entries(formData).forEach(([key, val]) => {
        fd.append(key, val);
      });
      if (avatarFile) {
        fd.append('avatar', avatarFile);
      }

      await axios.post(
        'http://localhost:5000/api/v1/users/register',
        fd,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'multipart/form-data',
          },
        }
      );

      toast.success('Educator registered successfully!');
      // Reset form
      setFormData({
        firstName: '',
        lastName: '',
        email: '',
        password: '',
        dob: '',
        sex: '',
        phone: '',
        address: '',
        country: '',
        role: 'educator',
      });
      setAvatarFile(null);
      setPreview('/uploads/avatars/default-avatar.png');
      onSuccess && onSuccess();
    } catch (err) {
      toast.error(err.response?.data?.message || 'Registration failed.');
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Card className="p-4">
      <ToastContainer position="top-center" />
      <h5 className="mb-4 text-center">Register New Educator</h5>
      <Form onSubmit={handleSubmit} encType="multipart/form-data">
        <div className="text-center mb-3">
          <Image src={preview} roundedCircle width={100} height={100} className="border" />
          <Form.Control
            type="file"
            accept="image/*"
            className="mt-2"
            onChange={handleAvatarChange}
            disabled={submitting}
          />
        </div>

        {[
          { label: 'First Name', name: 'firstName' },
          { label: 'Last Name', name: 'lastName' },
          { label: 'Email', name: 'email', type: 'email' },
          { label: 'Password', name: 'password', type: 'password' },
          { label: 'Date of Birth', name: 'dob', type: 'date' },
        ].map(({ label, name, type = 'text' }) => (
          <Form.Group key={name} className="mb-3">
            <Form.Label>{label}</Form.Label>
            <Form.Control
              type={type}
              name={name}
              value={formData[name]}
              onChange={handleChange}
              required
              disabled={submitting}
            />
          </Form.Group>
        ))}

        <Form.Group className="mb-3">
          <Form.Label>Sex</Form.Label>
          <Form.Select
            name="sex"
            value={formData.sex}
            onChange={handleChange}
            disabled={submitting}
            required
          >
            <option value="">Select</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
          </Form.Select>
        </Form.Group>

        {[
          { label: 'Phone', name: 'phone' },
          { label: 'Address', name: 'address' },
          { label: 'Country', name: 'country' },
        ].map(({ label, name }) => (
          <Form.Group key={name} className="mb-3">
            <Form.Label>{label}</Form.Label>
            <Form.Control
              name={name}
              value={formData[name]}
              onChange={handleChange}
              disabled={submitting}
              required
            />
          </Form.Group>
        ))}

        <Button type="submit" variant="success" className="w-100" disabled={submitting}>
          {submitting ? <Spinner size="sm" animation="border" /> : 'Register Educator'}
        </Button>
      </Form>
    </Card>
  );
};

export default EducatorForm;

frontend\src\components\EducatorList.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Table, Spinner, Form, Button } from 'react-bootstrap';
import { toast } from 'react-toastify';

const EducatorList = () => {
  const [educators, setEducators] = useState([]);
  const [search, setSearch] = useState('');
  const [loading, setLoading] = useState(true);

  const token = JSON.parse(localStorage.getItem('user'))?.token;

  useEffect(() => {
    fetchEducators();
    // eslint-disable-next-line
  }, []);

  const fetchEducators = async () => {
    setLoading(true);
    try {
      const response = await axios.get('http://localhost:5000/api/v1/educators', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setEducators(response.data);
    } catch (error) {
      console.error('Error fetching educators:', error);
      toast.error('Failed to load educators');
    } finally {
      setLoading(false);
    }
  };

  // ✅ Toggle educator status (active/inactive)
  const toggleStatus = async (id) => {
    try {
      const { data } = await axios.put(
        `http://localhost:5000/api/v1/educators/toggle-status/${id}`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      toast.success(data.message);
      fetchEducators(); // Refresh list
    } catch (err) {
      console.error(err);
      toast.error('Failed to update educator status');
    }
  };

  const filtered = educators.filter(
    (user) =>
      user.firstName?.toLowerCase().includes(search.toLowerCase()) ||
      user.email?.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div>
      <h4 className="mb-3">Educators</h4>

      <Form.Control
        type="text"
        placeholder="Search by name or email"
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="mb-3"
      />

      {loading ? (
        <div className="text-center">
          <Spinner animation="border" />
        </div>
      ) : (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Status</th> {/* ✅ Renamed */}
            </tr>
          </thead>
          <tbody>
            {filtered.length > 0 ? (
              filtered.map((educator) => (
                <tr key={educator._id}>
                  <td>{educator.firstName} {educator.lastName}</td>
                  <td>{educator.email}</td>
                  <td>{educator.phone || '-'}</td>
                  <td>
                    <Button
                      size="sm"
                      variant={educator.isActive ? 'success' : 'secondary'}
                      onClick={() => toggleStatus(educator._id)}
                    >
                      {educator.isActive ? 'Active' : 'Inactive'}
                    </Button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="4" className="text-center">No educators found.</td>
              </tr>
            )}
          </tbody>
        </Table>
      )}
    </div>
  );
};

export default EducatorList;

frontend\src\components\Footer.js
// frontend/src/components/Footer.js
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { FaFacebook, FaTwitter, FaLinkedin, FaGithub } from 'react-icons/fa';
import axios from 'axios';

const Footer = () => {
  const [year] = useState(new Date().getFullYear());
  const [links, setLinks] = useState([
    { name: 'Home', to: '/' },
    { name: 'About', to: '/about' },
    { name: 'Contact', to: '/contact' },
    { name: 'Privacy Policy', to: '/privacy-policy' },
  ]);

  useEffect(() => {
    const fetchLinks = async () => {
      try {
        const token = localStorage.getItem('token');
        const { data } = await axios.get('http://localhost:5000/api/v1/quick-links', {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (Array.isArray(data)) {
          setLinks(data);
        }
      } catch (err) {
        console.warn('Could not load footer links:', err.message);
      }
    };
    fetchLinks();
  }, []);

  return (
    <footer className="bg-dark text-white mt-5 py-4">
      <div className="container text-center text-md-start">
        <div className="row">
          {/* Brand / Description */}
          <div className="col-md-4 mb-3">
            <h5 className="text-uppercase">Learning Dashboard</h5>
            <p className="small">
              Empowering learners and educators with a streamlined platform for education, collaboration, and growth.
            </p>
          </div>

          {/* Quick Links */}
          <div className="col-md-4 mb-3">
            <h6 className="text-uppercase">Quick Links</h6>
            <ul className="list-unstyled">
              {links.map((link, index) => (
                <li key={index}>
                  {link.to ? (
                    <Link to={link.to} className="text-white text-decoration-none">
                      {link.name}
                    </Link>
                  ) : (
                    <a href={link.url} className="text-white text-decoration-none">
                      {link.name}
                    </a>
                  )}
                </li>
              ))}
            </ul>
          </div>

          {/* Social Media */}
          <div className="col-md-4 mb-3">
            <h6 className="text-uppercase">Connect With Us</h6>
            <div>
              <a href="https://facebook.com" className="text-white me-3" target="_blank" rel="noopener noreferrer">
                <FaFacebook size={20} />
              </a>
              <a href="https://twitter.com" className="text-white me-3" target="_blank" rel="noopener noreferrer">
                <FaTwitter size={20} />
              </a>
              <a href="https://linkedin.com" className="text-white me-3" target="_blank" rel="noopener noreferrer">
                <FaLinkedin size={20} />
              </a>
              <a href="https://github.com" className="text-white" target="_blank" rel="noopener noreferrer">
                <FaGithub size={20} />
              </a>
            </div>
          </div>
        </div>

        <hr className="bg-white" />

        <div className="text-center">
          <small>© {year} Learning Dashboard. All rights reserved.</small>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

frontend\src\components\InputField.js
// frontend/src/components/InputField.js
import React from 'react';
import { Form } from 'react-bootstrap';
import InputMask from 'react-input-mask';

const InputField = ({
  label,
  name,
  type = 'text',
  value,
  onChange,
  required = true,
  mask,
  placeholder = '',
  disabled = false,
  readOnly = false,
  autoComplete = 'off',
  helperText = '',
  error = '',
}) => {
  const id = `input-${name}`;
  const hasError = Boolean(error);

  const controlProps = {
    id,
    name,
    type,
    value,
    onChange,
    required,
    placeholder,
    disabled,
    readOnly,
    autoComplete,
    'aria-describedby': helperText ? `${id}-help` : undefined,
    isInvalid: hasError,
  };

  return (
    <Form.Group controlId={id} className="mb-3">
      <Form.Label>
        {label}
        {required && <span className="text-danger"> *</span>}
      </Form.Label>

      {mask ? (
        <InputMask mask={mask} value={value} onChange={onChange} disabled={disabled}>
          {(inputProps) => <Form.Control {...inputProps} {...controlProps} />}
        </InputMask>
      ) : (
        <Form.Control {...controlProps} />
      )}

      {helperText && (
        <Form.Text id={`${id}-help`} className="text-muted">
          {helperText}
        </Form.Text>
      )}

      {hasError && (
        <Form.Control.Feedback type="invalid">
          {error}
        </Form.Control.Feedback>
      )}
    </Form.Group>
  );
};

export default InputField;

frontend\src\components\Layout.js
import React, { useState, useEffect } from 'react';
import { Outlet, useLocation, useNavigate, Link } from 'react-router-dom';
import Sidebar from './Sidebar';
import Navbar from './Navbar';
import Footer from './Footer';
import Breadcrumb from 'react-bootstrap/Breadcrumb';
import DashboardTitle from './common/DashboardTitle';
import '../styles/Layout.css';

const Layout = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(() => {
    return JSON.parse(localStorage.getItem('sidebarOpen') || 'true');
  });

  const [darkMode, setDarkMode] = useState(() => {
    return JSON.parse(localStorage.getItem('darkMode') || 'false');
  });

  const location = useLocation();
  const navigate = useNavigate();
  const user = JSON.parse(localStorage.getItem('user'));

  useEffect(() => {
    document.body.classList.toggle('dark-mode', darkMode);
    localStorage.setItem('darkMode', JSON.stringify(darkMode));
  }, [darkMode]);

  useEffect(() => {
    if (location.pathname === '/') {
      if (user?.role === 'coordinator') {
        navigate('/coordinator');
      } else if (user?.role === 'educator') {
        navigate('/educator');
      } else if (user?.role === 'learner') {
        navigate('/learner');
      }
    }
  }, [location, navigate, user]);

  const toggleSidebar = () => {
    setIsSidebarOpen(prev => {
      localStorage.setItem('sidebarOpen', JSON.stringify(!prev));
      return !prev;
    });
  };

  const toggleDarkMode = () => setDarkMode(prev => !prev);

  const formatBreadcrumb = (part) => {
    switch (part.toLowerCase()) {
      case 'my-studyplans':
        return 'Study Plans';
      case 'study-plans':
        return 'Study Plans';
      case 'create':
        return ''; // skip rendering this
      default:
        return part.charAt(0).toUpperCase() + part.slice(1);
    }
  };

  const renderBreadcrumbs = () => {
    const parts = location.pathname.split('/').filter(Boolean);
    const dashboardLabel =
      user?.role === 'coordinator'
        ? 'Coordinator Dashboard'
        : user?.role === 'educator'
        ? 'Educator Dashboard'
        : user?.role === 'learner'
        ? 'Learner Dashboard'
        : 'Home';

    return (
      <Breadcrumb>
        <Breadcrumb.Item linkAs={Link} linkProps={{ to: '/' }}>
          {dashboardLabel}
        </Breadcrumb.Item>
        {parts.map((part, idx) => {
          if (formatBreadcrumb(part) === '') return null; // skip empty labels like 'create'
          const path = '/' + parts.slice(0, idx + 1).join('/');
          return (
            <Breadcrumb.Item
              key={path}
              linkAs={Link}
              linkProps={{ to: path }}
              active={idx === parts.length - 1}
            >
              {formatBreadcrumb(part)}
            </Breadcrumb.Item>
          );
        })}
      </Breadcrumb>
    );
  };

  return (
    <div className={`d-flex ${darkMode ? 'dark-mode' : ''}`}>
      <div className={`sidebar-wrapper ${isSidebarOpen ? 'expanded' : 'collapsed'}`}>
        <Sidebar />
      </div>

      <div className="flex-grow-1 d-flex flex-column vh-100 bg-light">
        <Navbar
          onToggleSidebar={toggleSidebar}
          onToggleDarkMode={toggleDarkMode}
          darkMode={darkMode}
        />

        <div className="p-2 ps-4">
          {renderBreadcrumbs()}
          <DashboardTitle />
        </div>

        <main className="flex-grow-1 overflow-auto p-3">
          <Outlet />
        </main>

        <Footer />
      </div>
    </div>
  );
};

export default Layout;

frontend\src\components\LearnerEvaluation.js
// frontend/src/components/LearnerEvaluation.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Card, Form, Button, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const LearnerEvaluation = ({ existingData = {}, onSuccess }) => {
  const token = localStorage.getItem('token');

  const [learners, setLearners] = useState([]);
  const [courses, setCourses] = useState([]);
  const [formData, setFormData] = useState({
    learner: existingData.learner || '',
    course: existingData.course || '',
    feedback: existingData.feedback || '',
    grade: existingData.grade || '',
  });
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  // Fetch learners and courses in parallel
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [lRes, cRes] = await Promise.all([
          axios.get('http://localhost:5000/api/v1/users?role=learner', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/courses', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);
        setLearners(lRes.data);
        setCourses(cRes.data.courses || cRes.data);
      } catch (err) {
        toast.error('Failed to load learners or courses.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [token]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((f) => ({ ...f, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    try {
      const url = existingData._id
        ? `http://localhost:5000/api/v1/evaluations/${existingData._id}`
        : 'http://localhost:5000/api/v1/evaluations';
      const method = existingData._id ? 'patch' : 'post';
      await axios[method](
        url,
        { ...formData },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success(existingData._id ? 'Evaluation updated!' : 'Evaluation submitted!');
      onSuccess && onSuccess();
      setFormData({ learner: '', course: '', feedback: '', grade: '' });
    } catch (err) {
      toast.error(err.response?.data?.message || 'Submission failed.');
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="text-center my-4">
        <Spinner animation="border" /> Loading...
      </div>
    );
  }

  return (
    <Card className="p-4">
      <ToastContainer position="top-center" />
      <h5 className="mb-4 text-center">
        {existingData._id ? 'Edit Evaluation' : 'Evaluate Learner'}
      </h5>
      <Form onSubmit={handleSubmit}>
        {/* Learner Select */}
        <Form.Group className="mb-3">
          <Form.Label>Select Learner</Form.Label>
          <Form.Select
            name="learner"
            value={formData.learner}
            onChange={handleChange}
            disabled={submitting}
            required
          >
            <option value="">-- Select Learner --</option>
            {learners.map((l) => (
              <option key={l._id} value={l._id}>
                {l.firstName} {l.lastName} ({l.email})
              </option>
            ))}
          </Form.Select>
        </Form.Group>

        {/* Course Select */}
        <Form.Group className="mb-3">
          <Form.Label>Select Course</Form.Label>
          <Form.Select
            name="course"
            value={formData.course}
            onChange={handleChange}
            disabled={submitting}
            required
          >
            <option value="">-- Select Course --</option>
            {courses.map((c) => (
              <option key={c._id} value={c._id}>
                {c.title}
              </option>
            ))}
          </Form.Select>
        </Form.Group>

        {/* Feedback */}
        <Form.Group className="mb-3">
          <Form.Label>Feedback</Form.Label>
          <Form.Control
            as="textarea"
            name="feedback"
            rows={4}
            value={formData.feedback}
            onChange={handleChange}
            disabled={submitting}
            required
          />
        </Form.Group>

        {/* Grade (optional) */}
        <Form.Group className="mb-3">
          <Form.Label>Grade</Form.Label>
          <Form.Control
            type="text"
            name="grade"
            placeholder="e.g., A, B, Pass"
            value={formData.grade}
            onChange={handleChange}
            disabled={submitting}
          />
        </Form.Group>

        {/* Submit Button */}
        <Button type="submit" variant="primary" className="w-100" disabled={submitting}>
          {submitting ? (
            <>
              <Spinner size="sm" animation="border" role="status" /> Submitting...
            </>
          ) : existingData._id ? 'Update Evaluation' : 'Submit Evaluation'}
        </Button>
      </Form>
    </Card>
  );
};

export default LearnerEvaluation;

frontend\src\components\Navbar.js
// frontend/src/components/Navbar.js
import React from 'react';
import { Button } from 'react-bootstrap';
import { useNavigate, NavLink } from 'react-router-dom';
import { useTheme } from '../context/ThemeContext';
import { useSidebar } from '../context/SidebarContext';
import { FaSun, FaMoon, FaBars } from 'react-icons/fa';
import { toast } from 'react-toastify';
import '../styles/Navbar.css';

const Navbar = () => {
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  // Safely parse user from localStorage, guard against literal "undefined"
  let user = {};
  const rawUser = localStorage.getItem('user');
  if (rawUser && rawUser !== 'undefined') {
    try {
      user = JSON.parse(rawUser);
    } catch {
      console.warn('Invalid user in localStorage, resetting');
      user = {};
    }
  }

  const role = localStorage.getItem('role') || '';
  const { darkMode, toggleTheme } = useTheme();
  const { toggleSidebar } = useSidebar();
  

  const handleLogout = () => {
    localStorage.clear();
    toast.info('Logged out successfully');
    navigate('/login');
  };

  return (
    <div
      className={`d-flex justify-content-between align-items-center px-3 py-2 border-bottom ${
        darkMode ? 'bg-dark text-white' : 'bg-light text-dark'
      }`}
    >
      {/* Left: Sidebar toggle & Brand */}
      <div className="d-flex align-items-center gap-3">
        <Button variant="outline-secondary" onClick={toggleSidebar}>
          <FaBars />
        </Button>
        <NavLink
          to="/"
          className={`navbar-brand ${darkMode ? 'text-white' : 'text-dark'}`}>
          Learning Dashboard
        </NavLink>
      </div>

      {/* Right: Theme toggle & User menu */}
      <div className="d-flex align-items-center gap-3">
        <Button variant={darkMode ? 'light' : 'dark'} onClick={toggleTheme}>
          {darkMode ? <FaSun /> : <FaMoon />}
        </Button>

        {user.firstName && (
          <span className="me-3">
            👋 {user.firstName} {user.lastName}
          </span>
        )}

        {token ? (
          <Button variant="outline-danger" onClick={handleLogout}>
            Logout
          </Button>
        ) : (
          <>
            <NavLink to="/login" className="btn btn-outline-primary">
              Login
            </NavLink>
            <NavLink to="/register" className="btn btn-primary">
              Register
            </NavLink>
            
          </>
        )}
      </div>
    </div>
  );
};

export default Navbar;

frontend\src\components\ProtectedRoute.js
// frontend/src/components/ProtectedRoute.js
import React from 'react';
import { Navigate } from 'react-router-dom';

/**
 * Wraps protected routes, ensuring user is authenticated and has allowed roles.
 * 
 * @param {React.ReactNode} children - The component(s) to render if allowed.
 * @param {string[]} [allowedRoles] - Optional array of roles allowed to view this route.
 */
const ProtectedRoute = ({ children, allowedRoles }) => {
  const token = localStorage.getItem('token');
  const role = localStorage.getItem('role');

  // Not logged in
  if (!token) {
    return <Navigate to="/login" replace />;
  }

  // Role not authorized
  if (allowedRoles && !allowedRoles.includes(role)) {
    return <Navigate to="/access-denied" replace />;
  }

  // Authorized
  return <>{children}</>;
};

export default ProtectedRoute;

frontend\src\components\QuizForm.js
// frontend/src/components/QuizForm.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Card, Form, Button, Spinner, Modal, Row, Col } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const QuizForm = ({ existingData = {}, onSuccess }) => {
  const token = localStorage.getItem('token');
  const isEdit = Boolean(existingData._id);

  const [formData, setFormData] = useState({
    title: existingData.title || '',
    questions: existingData.questions || [],
    course: existingData.course || '',
    durationMinutes: existingData.durationMinutes || 30,
  });
  const [courses, setCourses] = useState([]);
  const [loadingCourses, setLoadingCourses] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  const [showModal, setShowModal] = useState(false);
  const [newQuestion, setNewQuestion] = useState({
    questionText: '',
    options: ['', '', '', ''],
    correctAnswerIndex: 0,
  });

  useEffect(() => {
    const fetchCourses = async () => {
      setLoadingCourses(true);
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCourses(data.courses || data);
      } catch (err) {
        toast.error('Failed to load courses');
        console.error(err);
      } finally {
        setLoadingCourses(false);
      }
    };
    fetchCourses();
  }, [token]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((f) => ({ ...f, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.title || !formData.course || formData.questions.length === 0) {
      toast.warn('Fill all required fields and add at least one question.');
      return;
    }

    setSubmitting(true);
    try {
      const url = isEdit
        ? `http://localhost:5000/api/v1/quizzes/${existingData._id}`
        : 'http://localhost:5000/api/v1/quizzes';
      const method = isEdit ? 'patch' : 'post';

      await axios[method](url, formData, {
        headers: { Authorization: `Bearer ${token}` },
      });

      toast.success(isEdit ? 'Quiz updated!' : 'Quiz created!');
      onSuccess && onSuccess();
      if (!isEdit) {
        setFormData({ title: '', questions: [], course: '', durationMinutes: 30 });
      }
    } catch (err) {
      toast.error(err.response?.data?.message || 'Submission failed.');
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  const handleOptionChange = (index, value) => {
    const newOptions = [...newQuestion.options];
    newOptions[index] = value;
    setNewQuestion((q) => ({ ...q, options: newOptions }));
  };

  const addQuestion = () => {
    const { questionText, options, correctAnswerIndex } = newQuestion;
    if (!questionText || options.some((opt) => !opt)) {
      toast.warn('Fill question text and all options.');
      return;
    }

    setFormData((prev) => ({
      ...prev,
      questions: [...prev.questions, { ...newQuestion }],
    }));

    setNewQuestion({ questionText: '', options: ['', '', '', ''], correctAnswerIndex: 0 });
    setShowModal(false);
  };

  const deleteQuestion = (index) => {
    const updated = [...formData.questions];
    updated.splice(index, 1);
    setFormData((prev) => ({ ...prev, questions: updated }));
  };

  return (
    <Card className="p-4">
      <ToastContainer position="top-center" />
      <h5 className="mb-4 text-center">{isEdit ? 'Edit Quiz' : 'Create New Quiz'}</h5>
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3">
          <Form.Label>Quiz Title</Form.Label>
          <Form.Control
            name="title"
            value={formData.title}
            onChange={handleChange}
            disabled={submitting}
            required
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Assign to Course</Form.Label>
          {loadingCourses ? (
            <Spinner animation="border" size="sm" />
          ) : (
            <Form.Select
              name="course"
              value={formData.course}
              onChange={handleChange}
              disabled={submitting}
              required
            >
              <option value="">Select a course</option>
              {courses.map((c) => (
                <option key={c._id} value={c._id}>
                  {c.title}
                </option>
              ))}
            </Form.Select>
          )}
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Duration (minutes)</Form.Label>
          <Form.Control
            type="number"
            name="durationMinutes"
            value={formData.durationMinutes}
            onChange={handleChange}
            disabled={submitting}
            min={1}
            max={180}
            required
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Questions</Form.Label>
          {formData.questions.map((q, index) => (
            <Card className="mb-2 p-2" key={index}>
              <strong>Q{index + 1}:</strong> {q.questionText}
              <br />
              Options:
              <ul>
                {q.options.map((opt, i) => (
                  <li key={i}>
                    {opt} {i === q.correctAnswerIndex && <strong>(Correct)</strong>}
                  </li>
                ))}
              </ul>
              <Button size="sm" variant="danger" onClick={() => deleteQuestion(index)}>
                Delete
              </Button>
            </Card>
          ))}
          <Button
            variant="outline-secondary"
            size="sm"
            className="mt-2"
            disabled={submitting}
            onClick={() => setShowModal(true)}
          >
            Manage Questions
          </Button>
        </Form.Group>

        <Button type="submit" variant="primary" className="w-100" disabled={submitting}>
          {submitting ? (
            <>
              <Spinner size="sm" animation="border" /> Saving...
            </>
          ) : isEdit ? (
            'Update Quiz'
          ) : (
            'Create Quiz'
          )}
        </Button>
      </Form>

      {/* Modal for adding a question */}
      <Modal show={showModal} onHide={() => setShowModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>Add Question</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form.Group className="mb-2">
            <Form.Label>Question Text</Form.Label>
            <Form.Control
              type="text"
              value={newQuestion.questionText}
              onChange={(e) =>
                setNewQuestion((q) => ({ ...q, questionText: e.target.value }))
              }
            />
          </Form.Group>

          {newQuestion.options.map((opt, i) => (
            <Form.Group className="mb-2" key={i}>
              <Row>
                <Col xs={10}>
                  <Form.Control
                    type="text"
                    placeholder={`Option ${i + 1}`}
                    value={opt}
                    onChange={(e) => handleOptionChange(i, e.target.value)}
                  />
                </Col>
                <Col xs={2}>
                  <Form.Check
                    type="radio"
                    name="correctAnswer"
                    checked={newQuestion.correctAnswerIndex === i}
                    onChange={() =>
                      setNewQuestion((q) => ({ ...q, correctAnswerIndex: i }))
                    }
                    label=""
                    title="Mark as correct"
                  />
                </Col>
              </Row>
            </Form.Group>
          ))}

          <Button variant="success" onClick={addQuestion} className="mt-2">
            Add Question
          </Button>
        </Modal.Body>
      </Modal>
    </Card>
  );
};

export default QuizForm;

frontend\src\components\QuizList.js
// frontend/src/components/QuizList.js
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import { ListGroup, Spinner, Button } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const QuizList = () => {
  const token = localStorage.getItem('token');
  const user = JSON.parse(localStorage.getItem('user'));
  const [quizzes, setQuizzes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [attemptedQuizzes, setAttemptedQuizzes] = useState([]);

  useEffect(() => {
    const fetchQuizzes = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/quizzes', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setQuizzes(data);
      } catch (err) {
        toast.error('❌ Failed to load quizzes');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    const fetchAttempts = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/quizAttempts/my/all', {
          headers: { Authorization: `Bearer ${token}` },
        });
        const attemptedIds = data.map((attempt) => attempt.quiz);
        setAttemptedQuizzes(attemptedIds);
      } catch (err) {
        console.error('❌ Failed to fetch quiz attempts', err);
      }
    };

    fetchQuizzes();
    if (user?.role === 'learner') {
      fetchAttempts();
    }
  }, [token, user?.role]);

  const handlePublish = async (id) => {
    try {
      await axios.patch(`http://localhost:5000/api/v1/quizzes/publish/${id}`, {}, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('✅ Quiz published');
      setQuizzes((prev) =>
        prev.map((q) => (q._id === id ? { ...q, published: true } : q))
      );
    } catch (err) {
      toast.error('❌ Failed to publish quiz');
    }
  };

  if (loading) {
    return (
      <div className="text-center my-4">
        <Spinner animation="border" /> Loading quizzes...
      </div>
    );
  }

  return (
    <>
      <ToastContainer position="top-center" />
      <h5 className="mb-3">Available Quizzes</h5>
      <ListGroup>
        {quizzes.length > 0 ? (
          quizzes.map((quiz) => {
            const isAttempted = attemptedQuizzes.includes(quiz._id);
            return (
              <ListGroup.Item key={quiz._id} className="d-flex justify-content-between align-items-center">
                <div>
                  <strong>{quiz.title}</strong><br />
                  Course: {quiz.course?.title || 'N/A'}<br />
                  Duration: {quiz.durationMinutes} minutes
                  <span className={`badge ms-2 ${quiz.published ? 'bg-success' : 'bg-warning text-dark'}`}>
                    {quiz.published ? 'Published' : 'Unpublished'}
                  </span>
                </div>
                <div className="d-flex gap-2">
                  {user?.role === 'learner' && quiz.published && (
                    isAttempted ? (
                      <Button variant="outline-secondary" size="sm" disabled>
                        Attempted
                      </Button>
                    ) : (
                      <Link to={`/quizzes/attempt/${quiz._id}`}>
                        <Button variant="outline-primary" size="sm">Attempt Quiz</Button>
                      </Link>
                    )
                  )}

                  {user?.role === 'educator' && (
                    <>
                      <Link to={`/quizzes/attempt/${quiz._id}`}>
                        <Button variant="outline-info" size="sm">Trail</Button>
                      </Link>
                      {!quiz.published && (
                        <Button size="sm" variant="success" onClick={() => handlePublish(quiz._id)}>
                          Publish
                        </Button>
                      )}
                    </>
                  )}
                </div>
              </ListGroup.Item>
            );
          })
        ) : (
          <ListGroup.Item>No quizzes found.</ListGroup.Item>
        )}
      </ListGroup>
    </>
  );
};

export default QuizList;

frontend\src\components\QuizListByCourse.js
// frontend/src/components/QuizListByCourse.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { ListGroup, Form, Spinner, Button } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import { Link } from 'react-router-dom';
import 'react-toastify/dist/ReactToastify.css';

const QuizListByCourse = () => {
  const token = localStorage.getItem('token');
  const [courses, setCourses] = useState([]);
  const [quizzes, setQuizzes] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState('');
  const [loadingCourses, setLoadingCourses] = useState(true);
  const [loadingQuizzes, setLoadingQuizzes] = useState(false);

  // Fetch courses
  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCourses(data.courses || data);
      } catch (err) {
        toast.error('Failed to load courses');
        console.error(err);
      } finally {
        setLoadingCourses(false);
      }
    };
    fetchCourses();
  }, [token]);

  // Fetch quizzes when course changes
  useEffect(() => {
    if (!selectedCourse) {
      setQuizzes([]);
      return;
    }
    const fetchQuizzes = async () => {
      setLoadingQuizzes(true);
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/quizzes', {
          headers: { Authorization: `Bearer ${token}` },
          params: { course: selectedCourse },
        });
        setQuizzes(data);
      } catch (err) {
        toast.error('Failed to load quizzes');
        console.error(err);
      } finally {
        setLoadingQuizzes(false);
      }
    };
    fetchQuizzes();
  }, [selectedCourse, token]);

  return (
    <>
      <ToastContainer position="top-center" />
      <h5 className="mb-3">Quizzes by Course</h5>

      <Form.Group className="mb-3">
        <Form.Label>Select Course</Form.Label>
        {loadingCourses ? (
          <div><Spinner animation="border" size="sm" /> Loading courses...</div>
        ) : (
          <Form.Select
            value={selectedCourse}
            onChange={(e) => setSelectedCourse(e.target.value)}
          >
            <option value="">-- Select a course --</option>
            {courses.map((c) => (
              <option key={c._id} value={c._id}>
                {c.title}
              </option>
            ))}
          </Form.Select>
        )}
      </Form.Group>

      {loadingQuizzes ? (
        <div className="text-center my-3">
          <Spinner animation="border" /> Loading quizzes...
        </div>
      ) : selectedCourse ? (
        quizzes.length > 0 ? (
          <ListGroup>
            {quizzes.map((q) => (
              <ListGroup.Item key={q._id} className="d-flex justify-content-between align-items-center">
                <div>
                  <strong>{q.title}</strong><br />
                  Duration: {q.durationMinutes} mins
                </div>
                <Link to={`/quizzes/attempt/${q._id}`}>
                  <Button variant="outline-primary" size="sm">Attempt Quiz</Button>
                </Link>
              </ListGroup.Item>
            ))}
          </ListGroup>
        ) : (
          <p className="text-muted">No quizzes found for this course.</p>
        )
      ) : (
        <p className="text-muted">Please select a course to view quizzes.</p>
      )}
    </>
  );
};

export default QuizListByCourse;

frontend\src\components\Sidebar.js
// frontend/src/components/Sidebar.js
import React, { useState, useEffect } from 'react';
import { NavLink } from 'react-router-dom';
import 'bootstrap-icons/font/bootstrap-icons.css';
import '../styles/Sidebar.css';

const Sidebar = () => {
  const token = localStorage.getItem('token');
  const role = localStorage.getItem('role');
  const [collapsed, setCollapsed] = useState(() => {
    return JSON.parse(localStorage.getItem('sidebarCollapsed') || 'false');
  });
  const [visible, setVisible] = useState(true);
  const [dynamicItems, setDynamicItems] = useState([]);

  useEffect(() => {
    localStorage.setItem('sidebarCollapsed', JSON.stringify(collapsed));
  }, [collapsed]);

  useEffect(() => {
    const fetchItems = async () => {
      try {
        // Fetch dynamic nav items if needed
      } catch (err) {
        console.warn('Could not fetch dynamic nav items', err);
      }
    };
    fetchItems();
  }, [token]);

  const baseItems = [
    { to: '/courses', label: 'Courses', icon: 'bi-book' },
    { to: '/learner/quizzes', label: 'Quizzes', icon: 'bi-question-circle' },
    { to: '/submissions', label: 'Assignments', icon: 'bi-file-earmark-arrow-up' },
  ];

  const roleItems = {
    coordinator: [
      { to: '/coordinator/course', label: 'Manage Courses', icon: 'bi-journal-code' },
      { to: '/coordinator/students', label: 'Manage Students', icon: 'bi-people' },
      { to: '/coordinator/educators', label: 'Manage Educators', icon: 'bi-person-video2' },
      ...baseItems,
    ],
    educator: [
      { to: '/educator/my-studyplans', label: 'Study Plans', icon: 'bi-journal-text' },
      { to: '/quizzes/create', label: 'Create Quiz', icon: 'bi-patch-question' },
      { to: '/educator/my-quizzes', label: 'My Quizzes', icon: 'bi-journal-bookmark' },
      { to: '/assignments/create', label: 'Create Assignment', icon: 'bi-file-earmark-plus' },
      { to: '/educator/create-zoom-session', label: 'Create Zoom Session', icon: 'bi-camera-video' },
      { to: '/zoom-sessions', label: 'Live Zoom Sessions', icon: 'bi-camera-video' },
      { to: '/educator/my-courses', label: 'My Courses', icon: 'bi-book-half' },
      { to: '/educator/my-assignments', label: 'Students Assignments', icon: 'bi-journal-check' },
      { to: '/educator/my-submissions', label: 'Students Submissions', icon: 'bi-upload' },
    ],
    learner: [
      { to: '/my-courses', label: 'My Courses', icon: 'bi-collection-play' },
      { to: '/zoom-sessions', label: 'Live Zoom Sessions', icon: 'bi-camera-video' },
      { to: '/learner/studyplans', label: 'Study Plans', icon: 'bi-journal-text' },
      ...baseItems,
      { to: '/learner/quiz-history', label: 'Quiz History', icon: 'bi-journal-richtext' }, // ✅ ADDED HERE
    ],
  };

  const navItems = roleItems[role] || baseItems;

  const dashboardRoute =
    role === 'coordinator'
      ? '/coordinator/dashboard'
      : role === 'educator'
      ? '/educator/dashboard'
      : '/learner/dashboard';

  const dashboardLabel = 'Dashboard';

  if (!visible) {
    return (
      <button
        className="btn btn-secondary position-fixed top-0 start-0 m-2 d-md-none"
        onClick={() => setVisible(true)}
      >
        <i className="bi bi-list"></i>
      </button>
    );
  }

  return (
    <div
      className={`sidebar bg-light border-end vh-100 position-relative ${collapsed ? 'collapsed-sidebar' : 'expanded-sidebar'}`}
      style={{ width: collapsed ? '60px' : '220px', transition: 'width 0.3s' }}
    >
      <div className="d-flex justify-content-between align-items-center p-2">
        <button
          className="btn btn-outline-secondary btn-sm"
          onClick={() => setCollapsed((c) => !c)}
          title={collapsed ? 'Expand Sidebar' : 'Collapse Sidebar'}
        >
          <i className={`bi ${collapsed ? 'bi-chevron-double-right' : 'bi-chevron-double-left'}`}></i>
        </button>
        <button
          className="btn btn-outline-danger btn-sm d-md-none"
          onClick={() => setVisible(false)}
          title="Hide Sidebar"
        >
          <i className="bi bi-x-lg"></i>
        </button>
      </div>

      <ul className="nav flex-column px-2">
        <li className="nav-item">
          <NavLink
            to={dashboardRoute}
            className={({ isActive }) =>
              `nav-link d-flex align-items-center ${isActive ? 'active fw-bold text-primary' : 'text-dark'}`
            }
            title="Dashboard"
          >
            <i className="bi bi-speedometer2 me-2" style={{ fontSize: '1.2rem' }}></i>
            {!collapsed && dashboardLabel}
          </NavLink>
        </li>

        {navItems.map((item) => (
          <li className="nav-item" key={item.to}>
            <NavLink
              to={item.to}
              className={({ isActive }) =>
                `nav-link d-flex align-items-center ${isActive ? 'active fw-bold text-primary' : 'text-dark'}`
              }
              title={collapsed ? item.label : ''}
            >
              <i className={`bi ${item.icon} me-2`} style={{ fontSize: '1.2rem' }}></i>
              {!collapsed && item.label}
            </NavLink>
          </li>
        ))}

        {dynamicItems.map((item) => (
          <li className="nav-item" key={item.to}>
            <NavLink
              to={item.to}
              className="nav-link d-flex align-items-center text-dark"
              title={collapsed ? item.label : ''}
            >
              <i className={`bi ${item.icon} me-2`}></i>
              {!collapsed && item.label}
            </NavLink>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Sidebar;

frontend\src\components\StudentForm.js
// frontend/src/components/StudentForm.js
import React, { useState } from 'react';
import axios from 'axios';
import { Card, Form, Button, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const StudentForm = ({ existingData = {}, onSuccess }) => {
  const token = localStorage.getItem('token');
  const isEdit = Boolean(existingData._id);

  const [formData, setFormData] = useState({
    firstName: existingData.firstName || '',
    lastName: existingData.lastName || '',
    email: existingData.email || '',
    phone: existingData.phone || '',
    address: existingData.address || '',
    dob: existingData.dob ? existingData.dob.slice(0, 10) : '',
  });
  const [submitting, setSubmitting] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const url = isEdit
        ? `http://localhost:5000/api/v1/enrollments/${existingData._id}`
        : 'http://localhost:5000/api/v1/users/register';
      const method = isEdit ? 'patch' : 'post';

      await axios[method](
        url,
        formData,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      toast.success(isEdit ? 'Student updated!' : 'Student registered!');
      onSuccess && onSuccess();
      if (!isEdit) {
        setFormData({ firstName: '', lastName: '', email: '', phone: '', address: '', dob: '' });
      }
    } catch (err) {
      toast.error(err.response?.data?.message || 'Submission failed.');
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Card className="p-4">
      <ToastContainer position="top-center" />
      <h5 className="mb-4 text-center">{isEdit ? 'Edit Student' : 'Register Student'}</h5>
      <Form onSubmit={handleSubmit}>
        {[
          { label: 'First Name', name: 'firstName', type: 'text' },
          { label: 'Last Name', name: 'lastName', type: 'text' },
          { label: 'Email', name: 'email', type: 'email' },
          { label: 'Phone', name: 'phone', type: 'text' },
          { label: 'Address', name: 'address', type: 'textarea' },
          { label: 'Date of Birth', name: 'dob', type: 'date' },
        ].map(({ label, name, type }) => (
          <Form.Group className="mb-3" key={name}>
            <Form.Label>{label}</Form.Label>
            {type === 'textarea' ? (
              <Form.Control
                as="textarea"
                name={name}
                value={formData[name]}
                onChange={handleChange}
                disabled={submitting}
                required
              />
            ) : (
              <Form.Control
                type={type}
                name={name}
                value={formData[name]}
                onChange={handleChange}
                disabled={submitting}
                required
              />
            )}
          </Form.Group>
        ))}

        <Button type="submit" variant="success" className="w-100" disabled={submitting}>
          {submitting ? <Spinner size="sm" animation="border" /> : (isEdit ? 'Update Student' : 'Register Student')}
        </Button>
      </Form>
    </Card>
  );
};

export default StudentForm;

frontend\src\components\StudyPlanForm.js
// frontend/src/components/StudyPlanForm.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Card, Form, Button, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const StudyPlanForm = ({ existingData = {}, onSuccess }) => {
  const token = localStorage.getItem('token');
  const isEdit = Boolean(existingData && existingData._id);

  const [formData, setFormData] = useState({
    title: existingData?.title || '',
    description: existingData?.description || '',
    course: existingData?.course || '',
  });
  const [file, setFile] = useState(null);
  const [courses, setCourses] = useState([]);
  const [loadingCourses, setLoadingCourses] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses/my', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCourses(data.courses || data);
      } catch (err) {
        toast.error('Failed to load courses');
      } finally {
        setLoadingCourses(false);
      }
    };
    fetchCourses();
  }, [token]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const form = new FormData();
      form.append('title', formData.title);
      form.append('description', formData.description);
      form.append('course', formData.course);
      if (file) form.append('material', file);

      const url = isEdit
        ? `http://localhost:5000/api/v1/studyplans/${existingData._id}`
        : 'http://localhost:5000/api/v1/studyplans';
      const method = isEdit ? 'patch' : 'post';

      await axios[method](url, form, {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'multipart/form-data',
        },
      });

      toast.success(isEdit ? 'Study plan updated!' : 'Study plan created!');
      onSuccess && onSuccess();
      if (!isEdit) {
        setFormData({ title: '', description: '', course: '' });
        setFile(null);
      }
    } catch (err) {
      toast.error(err.response?.data?.message || 'Submission failed.');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Card className="p-4">
      <ToastContainer position="top-center" />
      <h5 className="mb-4 text-center">{isEdit ? 'Edit Study Plan' : 'Create Study Plan'}</h5>
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3">
          <Form.Label>Title</Form.Label>
          <Form.Control
            type="text"
            name="title"
            value={formData.title}
            onChange={handleChange}
            required
            disabled={submitting}
            placeholder="Enter study plan title"
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Description</Form.Label>
          <Form.Control
            as="textarea"
            name="description"
            rows={3}
            value={formData.description}
            onChange={handleChange}
            required
            disabled={submitting}
          />
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Assign to Course</Form.Label>
          {loadingCourses ? (
            <Spinner animation="border" size="sm" />
          ) : (
            <Form.Select
              name="course"
              value={formData.course}
              onChange={handleChange}
              required
              disabled={submitting}
            >
              <option value="">-- Select Course --</option>
              {courses.map((c) => (
                <option key={c._id} value={c._id}>
                  {c.title}
                </option>
              ))}
            </Form.Select>
          )}
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Upload Study Material (PDF, Word, PPT)</Form.Label>
          <Form.Control
            type="file"
            name="material"
            accept=".pdf,.doc,.docx,.ppt,.pptx"
            onChange={handleFileChange}
            disabled={submitting}
          />
        </Form.Group>

        <Button type="submit" variant="success" className="w-100" disabled={submitting}>
          {submitting ? <>Saving...</> : isEdit ? 'Update Plan' : 'Create Plan'}
        </Button>
      </Form>
    </Card>
  );
};

export default StudyPlanForm;

frontend\src\components\StudyPlanList.js
// frontend/src/components/learner/StudyPlanList.js

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { ListGroup, Spinner, Form, Button, Card, Badge } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import 'react-toastify/dist/ReactToastify.css';

const StudyPlanList = () => {
  const token = localStorage.getItem('token');
  const [studyPlans, setStudyPlans] = useState([]);
  const [courses, setCourses] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState('');
  const [loadingPlans, setLoadingPlans] = useState(true);
  const [loadingCourses, setLoadingCourses] = useState(true);
  const [paidCourseIds, setPaidCourseIds] = useState([]);
  const [enrollments, setEnrollments] = useState([]);

  // 🚫 Redirect inactive users
  useEffect(() => {
    const isActive = localStorage.getItem('isActive');
    if (isActive === 'false') {
      window.location.href = '/inactive';
    }
  }, []);

  // 📚 Fetch all courses
  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const res = await axios.get('http://localhost:5000/api/v1/courses', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCourses(res.data.courses || res.data);
      } catch (err) {
        toast.error('Failed to load courses');
      } finally {
        setLoadingCourses(false);
      }
    };
    fetchCourses();
  }, [token]);

  // 📘 Fetch study plans and learner enrollments
  useEffect(() => {
    const fetchData = async () => {
      setLoadingPlans(true);
      try {
        const [planRes, enrollRes] = await Promise.all([
          axios.get(
            `http://localhost:5000/api/v1/studyplans${selectedCourse ? `?course=${selectedCourse}` : ''}`,
            { headers: { Authorization: `Bearer ${token}` } }
          ),
          axios.get('http://localhost:5000/api/v1/enrollments', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);

        const enrollmentData = enrollRes.data;
        setEnrollments(enrollmentData);

        const paidIds = enrollmentData
          .filter((e) => e.paymentStatus === 'success')
          .map((e) => e.course._id);

        setPaidCourseIds(paidIds);

        const relevantPlans = planRes.data.filter((plan) =>
          enrollmentData.some((e) => e.course._id === plan.course._id)
        );

        setStudyPlans(relevantPlans);
      } catch (err) {
        toast.error('Failed to load study plans');
      } finally {
        setLoadingPlans(false);
      }
    };

    fetchData();
  }, [selectedCourse, token]);

  // ⏳ Access control based on payment or 7-day trial
  const canAccessMaterial = (courseId, createdAt) => {
    const enrollment = enrollments.find((e) => e.course._id === courseId);
    if (!enrollment) return false;

    const enrolledDate = new Date(enrollment.createdAt);
    const today = new Date();
    const diffDays = Math.ceil((today - enrolledDate) / (1000 * 60 * 60 * 24));

    return enrollment.paymentStatus === 'success' || diffDays <= 7;
  };

  // 📤 Export study plans to PDF
  const exportPDF = () => {
    const doc = new jsPDF();
    doc.text('Study Plan List', 14, 14);
    const rows = studyPlans.map((plan, i) => [
      i + 1,
      plan.title,
      plan.course?.title,
      `${plan.educator?.firstName || ''} ${plan.educator?.lastName || ''}`,
    ]);
    doc.autoTable({
      head: [['#', 'Title', 'Course', 'Educator']],
      body: rows,
    });
    doc.save('study_plans.pdf');
  };

  return (
    <>
      <ToastContainer position="top-center" />
      <div className="d-flex justify-content-between align-items-center">
        <h5 className="mb-3">📘 Study Plans</h5>
        <Button variant="outline-primary" size="sm" onClick={exportPDF}>
          Export PDF
        </Button>
      </div>

      <Form.Group className="mb-3" controlId="courseFilter">
        <Form.Label>Filter by Course</Form.Label>
        {loadingCourses ? (
          <Spinner animation="border" size="sm" />
        ) : (
          <Form.Select
            value={selectedCourse}
            onChange={(e) => setSelectedCourse(e.target.value)}
          >
            <option value="">-- All Courses --</option>
            {courses
              .filter((c) =>
                enrollments.some((e) => e.course._id === c._id)
              )
              .map((c) => (
                <option key={c._id} value={c._id}>
                  {c.title}
                </option>
              ))}
          </Form.Select>
        )}
      </Form.Group>

      {loadingPlans ? (
        <div className="text-center my-3">
          <Spinner animation="border" /> Loading study plans...
        </div>
      ) : studyPlans.length > 0 ? (
        <div className="row">
          {studyPlans.map((plan) => {
            const canAccess = canAccessMaterial(plan.course._id, plan.createdAt);
            return (
              <div className="col-md-6 mb-3" key={plan._id}>
                <Card>
                  <Card.Body>
                    <Card.Title>{plan.title}</Card.Title>
                    <Card.Subtitle className="mb-2 text-muted">
                      {plan.course.title} | Educator:{' '}
                      {plan.educator?.firstName || 'N/A'} {plan.educator?.lastName || ''}
                    </Card.Subtitle>
                    <Card.Text>{plan.description}</Card.Text>
                    {plan.materials?.length > 0 && (
                      <>
                        <strong>Materials:</strong>
                        <ul>
                          {plan.materials.map((m, i) => {
                            if (canAccess || i === 0) {
                              return (
                                <li key={i}>
                                  <a
                                    href={m.fileUrl}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                  >
                                    {m.fileName} {i === 0 && !canAccess && <Badge bg="info">Preview</Badge>}
                                  </a>
                                </li>
                              );
                            }
                            return null;
                          })}
                        </ul>
                        {!canAccess && (
                          <p className="text-danger small">
                            ⚠️ Full access requires payment. Only preview material shown.
                          </p>
                        )}
                      </>
                    )}
                  </Card.Body>
                </Card>
              </div>
            );
          })}
        </div>
      ) : (
        <p className="text-muted">No study plans found or not enrolled in any course.</p>
      )}
    </>
  );
};

export default StudyPlanList;

frontend\src\context\SidebarContext.js
// src/context/SidebarContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';

const SidebarContext = createContext();

export function SidebarProvider({ children }) {
  const [sidebarOpen, setSidebarOpen] = useState(() => {
    return JSON.parse(localStorage.getItem('sidebarOpen') || 'true');
  });

  useEffect(() => {
    localStorage.setItem('sidebarOpen', JSON.stringify(sidebarOpen));
  }, [sidebarOpen]);

  const toggleSidebar = () => setSidebarOpen((prev) => !prev);

  return (
    <SidebarContext.Provider value={{ sidebarOpen, toggleSidebar }}>
      {children}
    </SidebarContext.Provider>
  );
}

export function useSidebar() {
  return useContext(SidebarContext);
}

frontend\src\context\ThemeContext.js

// src/context/ThemeContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';

const ThemeContext = createContext();

export function ThemeProvider({ children }) {
  const [darkMode, setDarkMode] = useState(() => {
    return JSON.parse(localStorage.getItem('darkMode') || 'false');
  });

  useEffect(() => {
    document.body.classList.toggle('dark-mode', darkMode);
    localStorage.setItem('darkMode', JSON.stringify(darkMode));
  }, [darkMode]);

  const toggleTheme = () => setDarkMode((prev) => !prev);

  return (
    <ThemeContext.Provider value={{ darkMode, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  return useContext(ThemeContext);
}

frontend\src\hooks\useRedirectIfInactive.js
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const useRedirectIfInactive = () => {
  const navigate = useNavigate();
  useEffect(() => {
    const isActive = localStorage.getItem('isActive');
    if (isActive === 'false') {
      navigate('/inactive');
    }
  }, [navigate]);
};

export default useRedirectIfInactive;

frontend\src\pages\About.js
// frontend/src/pages/About.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, Spinner, Container } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const About = () => {
  const token = localStorage.getItem('token');
  const [info, setInfo] = useState(null);
  const [loading, setLoading] = useState(true);

  // Optional: fetch about info from backend if you have an endpoint
  useEffect(() => {
    const fetchAbout = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/about', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setInfo(data);
      } catch (err) {
        // Fallback to static info if endpoint missing
        console.warn('Could not load about info, using static content.', err);
      } finally {
        setLoading(false);
      }
    };
    fetchAbout();
  }, [token]);

  return (
    <Container className="my-5">
      <ToastContainer position="top-center" />
      {loading ? (
        <div className="text-center">
          <Spinner animation="border" /> Loading...
        </div>
      ) : (
        <Card className="shadow-sm p-4">
          <Card.Title as="h2" className="mb-3 text-center">
            About Learning Dashboard
          </Card.Title>
          <Card.Text>
            {info?.description ? (
              info.description
            ) : (
              <>
                <p>
                  Welcome to the Learning Dashboard—a comprehensive platform designed to empower 
                  course coordinators, educators, and learners. Our mission is to streamline 
                  course management, foster interactive learning experiences, and provide 
                  real-time insights into progress and performance.
                </p>
                <h5>Key Features</h5>
                <ul>
                  <li>
                    <strong>Role-Based Dashboards:</strong> Tailored interfaces for 
                    coordinators, educators, and learners.
                  </li>
                  <li>
                    <strong>Course & User Management:</strong> Easily create, update, and 
                    manage courses, educators, and student profiles.
                  </li>
                  <li>
                    <strong>Study Plans & Assignments:</strong> Educators can craft 
                    detailed study plans, quizzes, and assignments.
                  </li>
                  <li>
                    <strong>Interactive Learning:</strong> Learners can view study plans, 
                    take quizzes, and submit assignments seamlessly.
                  </li>
                  <li>
                    <strong>Analytics & Feedback:</strong> Real-time feedback, grades, and 
                    progress tracking for continuous improvement.
                  </li>
                </ul>
                <h5>Contact Us</h5>
                <p>
                  Have questions or feedback? Reach out to our support team at{' '}
                  <a href="mailto:support@learningdashboard.com">support@learningdashboard.com</a>.
                </p>
              </>
            )}
          </Card.Text>
        </Card>
      )}
    </Container>
  );
};

export default About;

frontend\src\pages\AccessDenied.jsx
// frontend/src/pages/AccessDenied.jsx
import React from 'react';
import { Container, Card, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

const AccessDenied = () => {
  const navigate = useNavigate();

  return (
    <Container className="d-flex justify-content-center align-items-center vh-100">
      <Card className="p-4 text-center shadow-sm">
        <Card.Title as="h2" className="mb-3 text-danger">
          Access Denied
        </Card.Title>
        <Card.Text className="mb-4">
          You do not have permission to view this page. Please contact your administrator 
          if you believe this is an error.
        </Card.Text>
        <Button variant="primary" onClick={() => navigate(-1)}>
          Go Back
        </Button>
        <Button
          variant="secondary"
          className="ms-2"
          onClick={() => navigate('/')}
        >
          Home
        </Button>
      </Card>
    </Container>
  );
};

export default AccessDenied;

frontend\src\pages\AdminEnrollmentPanel.js
// frontend/src/pages/AdminEnrollmentPanel.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Container, Table, Spinner, Button, Badge, Form, Row, Col
} from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import Papa from 'papaparse';
import 'react-toastify/dist/ReactToastify.css';
import {
  PieChart, Pie, Cell,
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer,
} from 'recharts';

const AdminEnrollmentPanel = () => {
  const token = localStorage.getItem('token');
  const role = localStorage.getItem('role');
  const navigate = useNavigate();

  const [allEnrollments, setAllEnrollments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [statusFilter, setStatusFilter] = useState('');
  const [dateFilter, setDateFilter] = useState('');
  const [courseFilter, setCourseFilter] = useState('');
  const [courses, setCourses] = useState([]);

  useEffect(() => {
    if (role !== 'coordinator' && role !== 'admin') {
      toast.error("Unauthorized");
      navigate('/');
    }
  }, [role, navigate]);

  useEffect(() => {
    const fetchAllData = async () => {
      try {
        const [enrollmentsRes, coursesRes] = await Promise.all([
          axios.get('http://localhost:5000/api/v1/enrollments', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/courses', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);
        setAllEnrollments(enrollmentsRes.data);
        setCourses(coursesRes.data.courses || coursesRes.data);
      } catch (err) {
        toast.error('Error loading data');
      } finally {
        setLoading(false);
      }
    };
    fetchAllData();
  }, [token]);

  const filtered = allEnrollments.filter((en) => {
    const matchDate = !dateFilter || new Date(en.enrollmentDate).toISOString().slice(0, 10) === dateFilter;
    const matchStatus = !statusFilter || en.paymentStatus === statusFilter;
    const matchCourse = !courseFilter || en.course._id === courseFilter;
    return matchDate && matchStatus && matchCourse;
  });

  const exportPDF = () => {
    const doc = new jsPDF();
    doc.text('All Learner Enrollment History', 14, 16);
    const rows = filtered.map((e) => [
      `${e.learner?.firstName || '-'} ${e.learner?.lastName || ''}`,
      e.course?.title || '',
      e.paymentStatus,
      e.status,
      e.progressPercentage + '%',
      new Date(e.enrollmentDate).toLocaleDateString(),
    ]);
    doc.autoTable({
      head: [['Learner', 'Course', 'Payment', 'Status', 'Progress', 'Date']],
      body: rows,
      startY: 20,
    });
    doc.save('all_enrollments.pdf');
  };

  const exportCSV = () => {
    const rows = filtered.map((e) => ({
      Learner: `${e.learner?.firstName || '-'} ${e.learner?.lastName || ''}`,
      Course: e.course?.title || '',
      PaymentStatus: e.paymentStatus,
      Status: e.status,
      Progress: e.progressPercentage + '%',
      Date: new Date(e.enrollmentDate).toLocaleDateString(),
    }));
    const csv = Papa.unparse(rows);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'all_enrollments.csv');
    document.body.appendChild(link);
    link.click();
  };

  return (
    <Container className="my-5">
      <ToastContainer />
      <h4 className="mb-4 text-center">🧑‍💼 Admin Enrollment Summary</h4>

      {/* Charts */}
      <Row className="mb-5">
        <Col md={6}>
          <h6>Enrollments by Payment Status</h6>
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie
                data={[
                  { name: 'Success', value: filtered.filter(e => e.paymentStatus === 'success').length },
                  { name: 'Failed', value: filtered.filter(e => e.paymentStatus === 'failed').length },
                  { name: 'Pending', value: filtered.filter(e => e.paymentStatus === 'pending').length },
                ]}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                outerRadius={80}
                label
              >
                <Cell fill="#28a745" />
                <Cell fill="#dc3545" />
                <Cell fill="#ffc107" />
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </Col>
        <Col md={6}>
          <h6>Enrollments by Course</h6>
          <ResponsiveContainer width="100%" height={250}>
            <BarChart data={
              courses.map(course => ({
                name: course.title,
                Enrollments: filtered.filter(e => e.course?._id === course._id).length
              }))
            }>
              <XAxis dataKey="name" tick={{ fontSize: 10 }} />
              <YAxis />
              <Tooltip />
              <Bar dataKey="Enrollments" fill="#007bff" />
            </BarChart>
          </ResponsiveContainer>
        </Col>
      </Row>

      {/* Filters */}
      <Row className="mb-3 g-3">
        <Col md={4}>
          <Form.Select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">All Payment Statuses</option>
            <option value="success">Success</option>
            <option value="failed">Failed</option>
            <option value="pending">Pending</option>
          </Form.Select>
        </Col>
        <Col md={4}>
          <Form.Select
            value={courseFilter}
            onChange={(e) => setCourseFilter(e.target.value)}
          >
            <option value="">All Courses</option>
            {courses.map((c) => (
              <option key={c._id} value={c._id}>{c.title}</option>
            ))}
          </Form.Select>
        </Col>
        <Col md={4}>
          <Form.Control
            type="date"
            value={dateFilter}
            onChange={(e) => setDateFilter(e.target.value)}
          />
        </Col>
      </Row>

      <div className="d-flex justify-content-end gap-2 mb-3">
        <Button variant="outline-secondary" onClick={exportPDF}>Export PDF</Button>
        <Button variant="outline-success" onClick={exportCSV}>Export CSV</Button>
      </div>

      {loading ? (
        <div className="text-center"><Spinner animation="border" /></div>
      ) : (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Learner</th>
              <th>Course</th>
              <th>Status</th>
              <th>Payment</th>
              <th>Progress</th>
              <th>Enrolled On</th>
              <th>Receipt</th>
            </tr>
          </thead>
          <tbody>
            {filtered.length > 0 ? (
              filtered.map((e) => (
                <tr key={e._id}>
                  <td>{e.learner?.firstName} {e.learner?.lastName}</td>
                  <td>{e.course?.title}</td>
                  <td><Badge bg="secondary">{e.status}</Badge></td>
                  <td>
                    <Badge
                      bg={
                        e.paymentStatus === 'success'
                          ? 'success'
                          : e.paymentStatus === 'failed'
                          ? 'danger'
                          : 'warning'
                      }
                    >
                      {e.paymentStatus}
                    </Badge>
                  </td>
                  <td>{e.progressPercentage}%</td>
                  <td>{new Date(e.enrollmentDate).toLocaleDateString()}</td>
                  <td>
                    {e.paymentStatus === 'success' && (
                      <Button
                        size="sm"
                        variant="outline-info"
                        onClick={() => navigate(`/receipt/${e._id}`)}
                      >
                        View Receipt
                      </Button>
                    )}
                  </td>
                </tr>
              ))
            ) : (
              <tr><td colSpan="7" className="text-center">No data</td></tr>
            )}
          </tbody>
        </Table>
      )}
    </Container>
  );
};

export default AdminEnrollmentPanel;


frontend\src\pages\AssignmentPage.js
// frontend/src/pages/AssignmentPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, Card, ListGroup, Button, Spinner } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const AssignmentPage = () => {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  const [assignments, setAssignments] = useState([]);
  const [loading, setLoading] = useState(true);

  // ✅ Redirect if educator is inactive
useEffect(() => {
  const isActive = localStorage.getItem('isActive');
  if (isActive === 'false') {
    navigate('/inactive');
  }
}, [navigate]);


  // Fetch assignments for this user
  useEffect(() => {
    const fetchAssignments = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/assignments', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setAssignments(data);
      } catch (err) {
        toast.error('Failed to load assignments');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchAssignments();
  }, [token]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading assignments...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h4>Assignments</h4>
        <Button onClick={() => navigate('/assignment/create')} variant="primary">
          Create Assignment
        </Button>
      </div>

      {assignments.length > 0 ? (
        <ListGroup>
          {assignments.map((a) => (
            <ListGroup.Item key={a._id} className="d-flex justify-content-between align-items-center">
              <div>
                <h5>{a.name}</h5>
                <small>Due: {new Date(a.dueDate).toLocaleString()}</small>
                <p className="mb-0">Course: {a.course?.title || 'N/A'}</p>
              </div>
              <div>
                <Link to={`/assignment/edit/${a._id}`} className="btn btn-sm btn-warning me-2">
                  Edit
                </Link>
                <Link to={`/submission?assignment=${a._id}`} className="btn btn-sm btn-success">
                  Submit
                </Link>
              </div>
            </ListGroup.Item>
          ))}
        </ListGroup>
      ) : (
        <p className="text-muted">No assignments found.</p>
      )}
    </Container>
  );
};

export default AssignmentPage;


frontend\src\pages\AttemptQuizPage.js
// frontend/src/components/AttemptQuizPage.js
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const AttemptQuizPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [quiz, setQuiz] = useState(null);
  const [answers, setAnswers] = useState([]);
  const [timeLeft, setTimeLeft] = useState(null);
  const [submitted, setSubmitted] = useState(false);
  const [score, setScore] = useState(0);
  const [attemptTime, setAttemptTime] = useState(null);
  const [attemptCount, setAttemptCount] = useState(0);
  const token = localStorage.getItem('token');
  const user = JSON.parse(localStorage.getItem('user'));

  useEffect(() => {
    const checkAttempt = async () => {
      try {
        const res = await axios.get(`http://localhost:5000/api/v1/quizAttempts/my/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (res.data?.attempted && user.role === 'learner') {
          toast.info('❌ You have already attempted this quiz.');
          navigate('/learner/quizzes');
        }
      } catch (err) {
        console.error('Attempt check failed:', err);
      }
    };
    checkAttempt();
  }, [id, token, user.role, navigate]);

  useEffect(() => {
    const fetchQuiz = async () => {
      try {
        const res = await axios.get(`http://localhost:5000/api/v1/quizzes/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setQuiz(res.data);
        setAnswers(Array(res.data.questions.length).fill(null));
        setTimeLeft(res.data.durationMinutes * 60);
        setAttemptCount(res.data.submissions?.length || 0);
      } catch (err) {
        console.error('Quiz load failed:', err);
        alert('Failed to load quiz.');
      }
    };
    fetchQuiz();
  }, [id, token]);

  useEffect(() => {
    if (!submitted && timeLeft > 0) {
      const timer = setInterval(() => {
        setTimeLeft((prev) => prev - 1);
      }, 1000);
      return () => clearInterval(timer);
    } else if (timeLeft === 0 && !submitted) {
      handleSubmit();
    }
  }, [timeLeft, submitted]);

  const handleChange = (qIndex, selectedIndex) => {
    const updatedAnswers = [...answers];
    updatedAnswers[qIndex] = selectedIndex;
    setAnswers(updatedAnswers);
  };

  const handleSubmit = async () => {
    let total = 0;
    quiz.questions.forEach((q, i) => {
      if (answers[i] === q.correctAnswerIndex) total++;
    });

    setScore(total);
    const attemptDate = new Date();
    setAttemptTime(attemptDate);
    setSubmitted(true);

    try {
      await axios.post(
        'http://localhost:5000/api/v1/quizAttempts',
        {
          quiz: quiz._id,
          answers,
          score: total,
          totalQuestions: quiz.questions.length,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
    } catch (err) {
      console.error('Failed to submit attempt:', err);
    }
  };

  const handleExportPDF = () => {
    const doc = new jsPDF();
    doc.text(`Quiz Results - ${quiz.title}`, 14, 16);
    doc.text(`Date: ${attemptTime.toLocaleString()}`, 14, 24);
    doc.text(`Score: ${score}/${quiz.questions.length}`, 14, 32);

    const rows = quiz.questions.map((q, i) => [
      `Q${i + 1}: ${q.questionText}`,
      answers[i] !== null ? q.options[answers[i]] : 'Not Answered',
      q.options[q.correctAnswerIndex],
    ]);

    autoTable(doc, {
      head: [['Question', 'Your Answer', 'Correct Answer']],
      body: rows,
      startY: 40,
    });

    doc.save(`quiz-results-${quiz._id}.pdf`);
  };

  if (!quiz) return <p>Loading quiz...</p>;

  return (
    <div className="container mt-4">
      <ToastContainer />
      <h2>{quiz.title}</h2>
      <p><strong>Course:</strong> {quiz.course?.title || 'N/A'}</p>
      <p>🧑‍🎓 <strong>Learners Attempted:</strong> {attemptCount}</p>

      {!submitted && (
        <p>
          ⏱️ Time Left: {Math.floor(timeLeft / 60)}:
          {(timeLeft % 60).toString().padStart(2, '0')}
        </p>
      )}

      {quiz.questions.map((q, idx) => (
        <div key={idx} className="mb-4">
          <h5>Q{idx + 1}: {q.questionText}</h5>
          {q.options.map((opt, optIdx) => (
            <div key={optIdx}>
              <label>
                <input
                  type="radio"
                  name={`question-${idx}`}
                  value={optIdx}
                  checked={answers[idx] === optIdx}
                  disabled={submitted}
                  onChange={() => handleChange(idx, optIdx)}
                />{' '}
                {opt}
              </label>
            </div>
          ))}
          {submitted && (
            <p>
              ✅ Correct: <strong>{q.options[q.correctAnswerIndex]}</strong><br />
              📝 Your Answer:{' '}
              <strong>{answers[idx] !== null ? q.options[answers[idx]] : 'Not Answered'}</strong>
            </p>
          )}
        </div>
      ))}

      {!submitted && (
        <button className="btn btn-primary" onClick={handleSubmit}>
          Submit All
        </button>
      )}

      {submitted && (
        <div className="alert alert-success mt-4">
          ✅ Quiz Submitted! You scored <strong>{score}</strong> out of <strong>{quiz.questions.length}</strong><br />
          📅 Attempted on: <strong>{attemptTime?.toLocaleString()}</strong>
          <br />
          <button className="btn btn-outline-dark mt-3" onClick={handleExportPDF}>
            📄 Download Result as PDF
          </button>
        </div>
      )}
    </div>
  );
};

export default AttemptQuizPage;

frontend\src\pages\ChatRoom.js
// frontend/src/pages/ChatRoom.js
import React, { useState, useEffect, useRef } from 'react';
import io from 'socket.io-client';
import { Container, Card, Form, Button, ListGroup, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const SOCKET_SERVER_URL = 'http://localhost:5000'; // adjust if needed

const ChatRoom = ({ roomId }) => {
  const token = localStorage.getItem('token');
  const [socket, setSocket] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [connecting, setConnecting] = useState(true);
  const messagesEndRef = useRef(null);

  // Auto-scroll to bottom
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(scrollToBottom, [messages]);

  useEffect(() => {
    // Initialize socket
    const newSocket = io(SOCKET_SERVER_URL, {
      auth: { token: `Bearer ${token}` }
    });

    setSocket(newSocket);

    newSocket.on('connect', () => {
      setConnecting(false);
      newSocket.emit('joinRoom', roomId);
    });

    newSocket.on('receiveMessage', (msg) => {
      setMessages((prev) => [...prev, msg]);
    });

    newSocket.on('connect_error', (err) => {
      toast.error('Connection error: ' + err.message);
    });

    return () => {
      newSocket.disconnect();
    };
  }, [roomId, token]);

  const handleSend = (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    const msg = { roomId, text: input.trim(), timestamp: Date.now() };
    socket.emit('sendMessage', msg);
    setMessages((prev) => [...prev, { ...msg, self: true }]);
    setInput('');
  };

  if (connecting) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Connecting to chat...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <Card>
        <Card.Header>Chat Room: {roomId}</Card.Header>
        <Card.Body style={{ maxHeight: '60vh', overflowY: 'auto' }}>
          <ListGroup variant="flush">
            {messages.map((msg, idx) => (
              <ListGroup.Item
                key={idx}
                className={msg.self ? 'text-end bg-light' : 'text-start'}
              >
                <small className="text-muted">
                  {new Date(msg.timestamp).toLocaleTimeString()}
                </small>
                <div>{msg.text}</div>
              </ListGroup.Item>
            ))}
            <div ref={messagesEndRef} />
          </ListGroup>
        </Card.Body>
        <Card.Footer>
          <Form onSubmit={handleSend} className="d-flex">
            <Form.Control
              type="text"
              placeholder="Type a message..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              disabled={!socket.connected}
            />
            <Button type="submit" variant="primary" className="ms-2">
              Send
            </Button>
          </Form>
        </Card.Footer>
      </Card>
    </Container>
  );
};

export default ChatRoom;

frontend\src\pages\Contact.js
// frontend/src/pages/Contact.js
import React, { useState } from 'react';
import axios from 'axios';
import { Container, Card, Form, Button, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const Contact = () => {
  const [formData, setFormData] = useState({ name: '', email: '', message: '' });
  const [submitting, setSubmitting] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((f) => ({ ...f, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    try {
      // Adjust endpoint as needed
      await axios.post('http://localhost:5000/api/v1/contact', formData);
      toast.success('Message sent! We will get back to you soon.');
      setFormData({ name: '', email: '', message: '' });
    } catch (err) {
      toast.error(err.response?.data?.message || 'Failed to send message.');
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Container className="my-5">
      <ToastContainer position="top-center" />
      <Card className="mx-auto" style={{ maxWidth: '600px' }}>
        <Card.Body>
          <Card.Title className="mb-4 text-center">Contact Us</Card.Title>
          <Form onSubmit={handleSubmit}>
            <Form.Group className="mb-3">
              <Form.Label>Your Name</Form.Label>
              <Form.Control
                name="name"
                value={formData.name}
                onChange={handleChange}
                required
                disabled={submitting}
                placeholder="Enter your name"
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Your Email</Form.Label>
              <Form.Control
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                required
                disabled={submitting}
                placeholder="Enter your email"
              />
            </Form.Group>
            <Form.Group className="mb-4">
              <Form.Label>Message</Form.Label>
              <Form.Control
                as="textarea"
                rows={5}
                name="message"
                value={formData.message}
                onChange={handleChange}
                required
                disabled={submitting}
                placeholder="Type your message here"
              />
            </Form.Group>
            <Button type="submit" variant="primary" className="w-100" disabled={submitting}>
              {submitting ? (
                <>
                  <Spinner size="sm" animation="border" role="status" aria-hidden="true" /> Sending...
                </>
              ) : (
                'Send Message'
              )}
            </Button>
          </Form>
        </Card.Body>
      </Card>
    </Container>
  );
};

export default Contact;

frontend\src\pages\CoordinatorCoursePage.js
// frontend/src/pages/CoordinatorCoursePage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, Table, Button, Spinner } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const CoordinatorCoursePage = () => {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [deletingId, setDeletingId] = useState(null);

  // Fetch all courses
  useEffect(() => {
    const fetchCourses = async () => {
      setLoading(true);
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses', {
          headers: { Authorization: `Bearer ${token}` }
        });
        // If paginated response:
        setCourses(data.courses || data);
      } catch (err) {
        toast.error('Failed to load courses');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchCourses();
  }, [token]);

  // Delete a course
  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this course?')) return;
    setDeletingId(id);
    try {
      await axios.delete(`http://localhost:5000/api/v1/courses/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setCourses((prev) => prev.filter((c) => c._id !== id));
      toast.success('Course deleted');
    } catch (err) {
      toast.error('Failed to delete course');
      console.error(err);
    } finally {
      setDeletingId(null);
    }
  };

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />

      <div className="d-flex justify-content-between align-items-center mb-3">
        <h4>Manage Courses</h4>
        <Button onClick={() => navigate('/coordinator/course/create')} variant="primary">
          + New Course
        </Button>
      </div>

      {loading ? (
        <div className="text-center my-5">
          <Spinner animation="border" /> Loading courses...
        </div>
      ) : (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Title</th>
              <th>Category</th>
              <th>Educator</th>
              <th>Start – End</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {courses.length ? (
              courses.map((course) => (
                <tr key={course._id}>
                  <td>{course.title}</td>
                  <td>{course.category}</td>
                  <td>{course.educator?.firstName} {course.educator?.lastName}</td>
                  <td>
                    {new Date(course.startDate).toLocaleDateString()} –{' '}
                    {new Date(course.endDate).toLocaleDateString()}
                  </td>
                  <td>
                    <Link
                      to={`/coordinator/course/edit/${course._id}`}
                      className="btn btn-sm btn-warning me-2"
                    >
                      Edit
                    </Link>
                    <Button
                      size="sm"
                      variant="danger"
                      disabled={deletingId === course._id}
                      onClick={() => handleDelete(course._id)}
                    >
                      {deletingId === course._id ? <Spinner size="sm" animation="border" /> : 'Delete'}
                    </Button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="5" className="text-center">No courses found.</td>
              </tr>
            )}
          </tbody>
        </Table>
      )}
    </Container>
  );
};

export default CoordinatorCoursePage;

frontend\src\pages\CoordinatorDashboard.css
.dashboard-container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 2rem;
  background-color: #f4f4f4;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  font-family: 'Segoe UI', sans-serif;
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.dashboard-title {
  font-size: 2rem;
  font-weight: bold;
  color: #2a2a2a;
}

.logout-button {
  background-color: #ff4d4d;
  color: white;
  padding: 0.5rem 1.2rem;
  border: none;
  border-radius: 8px;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.logout-button:hover {
  background-color: #e60000;
}

.dashboard-section {
  background-color: white;
  padding: 1.5rem;
  border-radius: 10px;
  margin-bottom: 2rem;
  box-shadow: 0 1px 5px rgba(0, 0, 0, 0.05);
}

.section-title {
  margin-bottom: 1rem;
  font-size: 1.4rem;
  color: #333;
}

frontend\src\pages\CoordinatorDashboard.js
// CoordinatorDashboard.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Table, Button, Spinner, Form, Row, Col, Modal, Card } from 'react-bootstrap';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { Chart, BarElement, CategoryScale, LinearScale, ArcElement, LineElement, PointElement } from 'chart.js';
import { Bar, Pie, Doughnut, Line } from 'react-chartjs-2';
import DashboardTitle from '../components/common/DashboardTitle';

Chart.register(BarElement, CategoryScale, LinearScale, ArcElement, LineElement, PointElement);

const categories = ['Mathematics', 'Physics', 'Chemistry', 'Biology', 'Engineering', 'Science and Technology', 'Programming and Web Development', 'Commerce and Management'];
const mediums = ['English', 'Tamil', 'Sinhala'];

const CoordinatorDashboard = () => {
  const [courses, setCourses] = useState([]);
  const [filteredCourses, setFilteredCourses] = useState([]);
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [category, setCategory] = useState('');
  const [medium, setMedium] = useState('');
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [selectedLearners, setSelectedLearners] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  const user = JSON.parse(localStorage.getItem('user'));
  const coordinatorName = user?.firstName ? `${user.firstName} ${user.lastName}` : 'Coordinator';

  useEffect(() => {
    const fetchMetrics = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/dashboard/metrics', {
          headers: { Authorization: `Bearer ${user?.token}` }
        });
        setMetrics(data);
      } catch (error) {
        console.error('Error fetching dashboard metrics:', error);
      }
    };
    fetchMetrics();
  }, [user?.token]);

  useEffect(() => {
    const fetchCourses = async () => {
      try {
        let queryParts = [];
        if (category) queryParts.push(`category=${category}`);
        if (medium) queryParts.push(`medium=${medium}`);
        if (startDate) queryParts.push(`startDate=${startDate.toISOString().split('T')[0]}`);
        if (endDate) queryParts.push(`endDate=${endDate.toISOString().split('T')[0]}`);
        const queryString = queryParts.length > 0 ? `?${queryParts.join('&')}` : '';

        const { data } = await axios.get(`http://localhost:5000/api/v1/courses/with-students-simple${queryString}`, {
          headers: { Authorization: `Bearer ${user?.token}` }
        });

        setCourses(data);
        setFilteredCourses(data);
      } catch (error) {
        console.error('Error fetching courses:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchCourses();
  }, [user?.token, category, medium, startDate, endDate]);

  useEffect(() => {
    const filtered = courses.filter(course =>
      course.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      course.educator?.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredCourses(filtered);
    setCurrentPage(1);
  }, [searchTerm, courses]);

  const paginatedCourses = filteredCourses.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);
  const totalPages = Math.ceil(filteredCourses.length / itemsPerPage);

  const handleExportPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(14);
    doc.text('Course Report', 14, 15);
    filteredCourses.forEach((course, idx) => {
      const startY = 20 + idx * 10;
      doc.setFontSize(12);
      doc.text(`Course: ${course.title}`, 14, startY);
      doc.text(`Educator: ${course.educator || 'N/A'}`, 14, startY + 6);
      doc.autoTable({
        head: [['Learner Name', 'Assignment Mark', 'Quiz Mark']],
        body: (course.students || []).map(learner => [
          learner.name || 'N/A',
          learner.assignmentMark?.toString() || '0',
          learner.quizMark?.toString() || '0',
        ]),
        startY: startY + 10,
        margin: { left: 14 },
        theme: 'striped',
        styles: { fontSize: 10 },
      });
    });
    doc.save(`course_report_${new Date().toISOString().slice(0, 10)}.pdf`);
  };

  const handleExportCSV = () => {
    let csvContent = 'Course Title,Category,Medium,Start Date,End Date,Educator,Learner Name,Assignment Mark,Quiz Mark\n';
    filteredCourses.forEach(course => {
      const baseRow = [
        course.title,
        course.category,
        course.medium,
        new Date(course.startDate).toLocaleDateString(),
        new Date(course.endDate).toLocaleDateString(),
        course.educator
      ];
      if ((course.students || []).length > 0) {
        course.students.forEach(learner => {
          csvContent += [...baseRow, learner.name, learner.assignmentMark, learner.quizMark].join(',') + '\n';
        });
      } else {
        csvContent += [...baseRow, 'N/A', '0', '0'].join(',') + '\n';
      }
    });
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `course_report_${new Date().toISOString().slice(0, 10)}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleShowLearners = (learners) => {
    setSelectedLearners(learners || []);
    setShowModal(true);
  };

  const topCourses = [...filteredCourses]
    .sort((a, b) => (b.students?.length || 0) - (a.students?.length || 0))
    .slice(0, 3);

  const coursePopularityData = {
    labels: filteredCourses.map(c => c.title),
    datasets: [{
      label: 'Learner Count',
      data: filteredCourses.map(c => (c.students || []).length),
      backgroundColor: 'rgba(75,192,192,0.6)'
    }]
  };

  const topCoursesData = {
    labels: topCourses.map(c => c.title),
    datasets: [{
      label: 'Top 3 Courses',
      data: topCourses.map(c => (c.students || []).length),
      backgroundColor: ['#ff6384', '#36a2eb', '#cc65fe']
    }]
  };

  const categoryData = {
    labels: categories,
    datasets: [{
      label: 'Category Count',
      data: categories.map(cat =>
        filteredCourses.filter(c => c.category === cat).length),
      backgroundColor: ['#f67280', '#6c5ce7', '#ffeaa7', '#74b9ff', '#55efc4', '#fab1a0', '#fd79a8', '#00cec9']
    }]
  };

  const mediumData = {
    labels: mediums,
    datasets: [{
      label: 'Medium Distribution',
      data: mediums.map(m =>
        filteredCourses.filter(c => c.medium === m).length),
      backgroundColor: ['#00b894', '#0984e3', '#fdcb6e']
    }]
  };

  const avgMarksData = {
    labels: filteredCourses.map(c => c.title),
    datasets: [{
      label: 'Average Mark',
      data: filteredCourses.map(c =>
        (c.students?.length || 0) > 0
          ? (c.students.reduce((sum, s) =>
              sum + (((s.assignmentMark || 0) + (s.quizMark || 0)) / 2), 0) / c.students.length).toFixed(2)
          : 0),
      backgroundColor: 'rgba(255, 159, 64, 0.6)',
      borderColor: 'rgba(255, 159, 64, 1)',
      fill: false,
      tension: 0.3
    }]
  };

  return (
    <Container className="my-4">
      <DashboardTitle title={`Welcome, ${coordinatorName}`} />
      {/* Metric Cards */}
      {metrics && (
        <Row className="mb-4">
          {Object.entries(metrics).map(([key, value]) => (
            <Col md={3} key={key}>
              <Card className="text-center shadow-sm">
                <Card.Body>
                  <Card.Title className="text-capitalize">{key.replace(/([A-Z])/g, ' $1')}</Card.Title>
                  <Card.Text className="fs-4 fw-bold">{value}</Card.Text>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      )}

      {/* Filters */}
      <Row className="mb-3">
        <Col><Form.Control placeholder="Search by title or educator" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} /></Col>
        <Col><Form.Select value={category} onChange={(e) => setCategory(e.target.value)}><option value="">All Categories</option>{categories.map(c => <option key={c}>{c}</option>)}</Form.Select></Col>
        <Col><Form.Select value={medium} onChange={(e) => setMedium(e.target.value)}><option value="">All Mediums</option>{mediums.map(m => <option key={m}>{m}</option>)}</Form.Select></Col>
        <Col><DatePicker selected={startDate} onChange={(d) => setStartDate(d)} placeholderText="Start Date" className="form-control" /></Col>
        <Col><DatePicker selected={endDate} onChange={(d) => setEndDate(d)} placeholderText="End Date" className="form-control" /></Col>
      </Row>

      <Row className="mb-3">
        <Col><Button onClick={handleExportPDF}>Export PDF</Button> <Button onClick={handleExportCSV}>Export CSV</Button></Col>
      </Row>

      {/* Course Table */}
      {!loading ? (
        <>
          <Table striped bordered hover responsive>
            <thead><tr><th>Course</th><th>Category</th><th>Medium</th><th>Venue</th><th>Start</th><th>End</th><th>Educator</th><th>Learners</th><th>Avg Mark</th><th>View</th></tr></thead>
            <tbody>
              {paginatedCourses.map(course => (
                <tr key={course._id}>
                  <td>{course.title}</td>
                  <td>{course.category}</td>
                  <td>{course.medium}</td>
                  <td>{course.venue}</td>
                  <td>{new Date(course.startDate).toLocaleDateString()}</td>
                  <td>{new Date(course.endDate).toLocaleDateString()}</td>
                  <td>{course.educator}</td>
                  <td>{(course.students || []).length}</td>
                  <td>{((course.students || []).reduce((sum, s) => sum + ((s.assignmentMark || 0) + (s.quizMark || 0)) / 2, 0) / ((course.students || []).length || 1)).toFixed(2)}</td>
                  <td><Button size="sm" onClick={() => handleShowLearners(course.students)}>View</Button></td>
                </tr>
              ))}
            </tbody>
          </Table>

          {/* Charts */}
          <Row className="mt-4">
            <Col md={6}><h5>📊 Course Popularity</h5><Bar data={coursePopularityData} /></Col>
            <Col md={6}><h5>🥇 Top 3 Courses</h5><Bar data={topCoursesData} /></Col>
          </Row>
          <Row className="mt-4">
            <Col md={6}><h5>📘 Category Distribution</h5><Pie data={categoryData} /></Col>
            <Col md={6}><h5>🌍 Medium Distribution</h5><Doughnut data={mediumData} /></Col>
          </Row>
          <Row className="mt-4">
            <Col><h5>📈 Average Marks</h5><Line data={avgMarksData} /></Col>
          </Row>

          {/* Pagination */}
          <div className="d-flex justify-content-between align-items-center mt-3">
            <Button disabled={currentPage === 1} onClick={() => setCurrentPage(prev => prev - 1)}>Prev</Button>
            <span>Page {currentPage} of {totalPages}</span>
            <Button disabled={currentPage === totalPages} onClick={() => setCurrentPage(prev => prev + 1)}>Next</Button>
          </div>
        </>
      ) : <Spinner animation="border" />}

      {/* Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
        <Modal.Header closeButton><Modal.Title>Enrolled Learners</Modal.Title></Modal.Header>
        <Modal.Body>
          <Table striped bordered>
            <thead><tr><th>Name</th><th>Assignment Mark</th><th>Quiz Mark</th></tr></thead>
            <tbody>{selectedLearners.map((s, i) => (<tr key={i}><td>{s.name}</td><td>{s.assignmentMark}</td><td>{s.quizMark}</td></tr>))}</tbody>
          </Table>
        </Modal.Body>
      </Modal>
    </Container>
  );
};

export default CoordinatorDashboard;

frontend\src\pages\CoordinatorPage.js// frontend/src/pages/CoordinatorPage.js
import React from 'react';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';

/**
 * A simple landing page for coordinators, providing quick navigation.
 */
const CoordinatorPage = () => {
  return (
    <Container className="my-5">
      <h3 className="mb-4 text-center">Coordinator Panel</h3>
      <Row xs={1} md={2} lg={3} className="g-4">
        <Col>
          <Card className="text-center h-100">
            <Card.Body>
              <Card.Title>Manage Courses</Card.Title>
              <Card.Text>Create, edit, or delete courses.</Card.Text>
              <Link to="/coordinator/course">
                <Button variant="primary">Go to Courses</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
        <Col>
          <Card className="text-center h-100">
            <Card.Body>
              <Card.Title>Manage Students</Card.Title>
              <Card.Text>View and update student details.</Card.Text>
              <Link to="/coordinator/students">
                <Button variant="primary">Go to Students</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
        <Col>
          <Card className="text-center h-100">
            <Card.Body>
              <Card.Title>Manage Educators</Card.Title>
              <Card.Text>Register, edit, or remove educators.</Card.Text>
              <Link to="/coordinator/educators">
                <Button variant="primary">Go to Educators</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
        <Col>
          <Card className="text-center h-100">
            <Card.Body>
              <Card.Title>Dashboard Metrics</Card.Title>
              <Card.Text>View platform usage statistics.</Card.Text>
              <Link to="/coordinator/dashboard">
                <Button variant="primary">View Dashboard</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default CoordinatorPage;

frontend\src\pages\CoursePage.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import { Container, Card, Button, Spinner, Row, Col } from 'react-bootstrap';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable'; // ✅ Import correctly
import { FaDownload } from 'react-icons/fa';

const CoursePage = () => {
  const { id } = useParams();
  const token = localStorage.getItem('token');
  const [course, setCourse] = useState(null);
  const [enrollmentCount, setEnrollmentCount] = useState(0);
  const [loading, setLoading] = useState(true);

  const fetchCourse = async () => {
    try {
      const { data } = await axios.get(`http://localhost:5000/api/v1/courses/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setCourse(data);
    } catch (error) {
      console.error('Error loading course details', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchEnrollmentCount = async () => {
    try {
      const { data } = await axios.get(`http://localhost:5000/api/v1/enrollments`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const count = data.filter((e) => e.course._id === id).length;
      setEnrollmentCount(count);
    } catch (error) {
      console.error('Error fetching enrollment count', error);
    }
  };

  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.text('Course Details', 14, 16);

    autoTable(doc, {
      startY: 20,
      head: [['Field', 'Value']],
      body: [
        ['Title', course?.title || ''],
        ['Category', course?.category || ''],
        ['Syllabus', course?.syllabus || ''],
        ['Venue', course?.venue || ''],
        ['Medium', course?.medium || ''],
        ['Duration', course?.duration || ''],
        ['Start Date', new Date(course?.startDate).toLocaleDateString()],
        ['End Date', new Date(course?.endDate).toLocaleDateString()],
        ['Educator', `${course?.educator?.firstName || ''} ${course?.educator?.lastName || ''}`],
        ['Enrolled Learners', enrollmentCount.toString()],
      ],
    });

    if (course?.classSchedule?.length > 0) {
      const nextY = doc.lastAutoTable.finalY + 10;
      doc.text('Class Schedule', 14, nextY);
      autoTable(doc, {
        startY: nextY + 5,
        head: [['Day', 'Start Time', 'End Time']],
        body: course.classSchedule.map((item) => [
          item.day, item.startTime, item.endTime,
        ]),
      });
    }

    doc.save(`${course?.title || 'course-details'}.pdf`);
  };

  useEffect(() => {
    fetchCourse();
    fetchEnrollmentCount();
  }, [id]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading course details...
      </Container>
    );
  }

  if (!course) {
    return (
      <Container className="text-center my-5">
        <p className="text-danger">Course not found</p>
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <Row className="mb-4">
        <Col>
          <h3>{course.title}</h3>
          <p className="text-muted">{course.category}</p>
        </Col>
        <Col className="text-end">
          <Button variant="success" onClick={exportToPDF}>
            <FaDownload className="me-2" />
            Export to PDF
          </Button>
        </Col>
      </Row>

      <Card className="mb-3 p-3 shadow-sm">
        <p><strong>Educator:</strong> {course?.educator?.firstName} {course?.educator?.lastName}</p>
        <p><strong>Syllabus:</strong> {course.syllabus}</p>
        <p><strong>Duration:</strong> {course.duration}</p>
        <p><strong>Start Date:</strong> {new Date(course.startDate).toLocaleDateString()}</p>
        <p><strong>End Date:</strong> {new Date(course.endDate).toLocaleDateString()}</p>
        <p><strong>Medium:</strong> {course.medium}</p>
        <p><strong>Venue:</strong> {course.venue}</p>
        <p><strong>Enrolled Learners:</strong> {enrollmentCount}</p>
      </Card>

      {course.classSchedule?.length > 0 && (
        <Card className="p-3 shadow-sm">
          <h5>Class Schedule</h5>
          <ul className="list-unstyled">
            {course.classSchedule.map((item, index) => (
              <li key={index}>
                <strong>{item.day}</strong>: {item.startTime} – {item.endTime}
              </li>
            ))}
          </ul>
        </Card>
      )}
    </Container>
  );
};

export default CoursePage;

frontend\src\pages\Courses.js
// frontend/src/pages/Courses.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, Row, Col, Card, Button, Spinner, Form } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom'; // ✅ ADDED
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const Courses = () => {
  const token = localStorage.getItem('token');
  const userRole = localStorage.getItem('role');
  const navigate = useNavigate(); // ✅ ADDED
  const [courses, setCourses] = useState([]);
  const [enrolledCourses, setEnrolledCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState({
    category: '',
    medium: '',
    venue: ''
  });

  const fetchCourses = async () => {
    setLoading(true);
    try {
      const params = {};
      if (filter.category) params.category = filter.category;
      if (filter.medium) params.medium = filter.medium;
      if (filter.venue) params.venue = filter.venue;

      const { data } = await axios.get('http://localhost:5000/api/v1/courses', {
        headers: { Authorization: `Bearer ${token}` },
        params
      });
      setCourses(data.courses || data);
    } catch (err) {
      toast.error('Failed to load courses');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const fetchEnrolledCourses = async () => {
    if (userRole !== 'learner') return;
    try {
      const { data } = await axios.get('http://localhost:5000/api/v1/enrollments', {
        headers: { Authorization: `Bearer ${token}` },
      });
      const enrolledCourseIds = data.map((e) => e.course._id);
      setEnrolledCourses(enrolledCourseIds);
    } catch (err) {
      console.error('Could not fetch enrollments:', err);
    }
  };

  useEffect(() => {
    fetchCourses();
  }, [filter]);

  useEffect(() => {
    fetchEnrolledCourses();
  }, []);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilter((f) => ({ ...f, [name]: value }));
  };

  const handleEnroll = async (courseId) => {
    try {
      await axios.post(
        'http://localhost:5000/api/v1/enrollments',
        { course: courseId },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Enrolled successfully');
      setEnrolledCourses((prev) => [...prev, courseId]);
    } catch (err) {
      toast.error(err.response?.data?.message || 'Enrollment failed');
    }
  };

  const handleViewDetails = (courseId) => {
    navigate(`/courses/${courseId}`); // ✅ NEW FUNCTION
  };

  return (
    <Container className="my-5">
      <ToastContainer position="top-center" />
      <h4 className="mb-4">Browse Courses</h4>

      {/* Filters */}
      <Form className="mb-4 d-flex gap-3 flex-wrap">
        {[{ label: 'Category', name: 'category', options: ['', 'Mathematics', 'Physics', 'Chemistry', 'Biology', 'Engineering', 'Science and Technology', 'Programming and Web Development', 'Commerce and Management'] },
          { label: 'Medium', name: 'medium', options: ['', 'English', 'Tamil', 'Sinhala'] },
          { label: 'Venue', name: 'venue', options: ['', 'Online', 'Face to Face'] },
        ].map(({ label, name, options }) => (
          <Form.Group key={name}>
            <Form.Label>{label}</Form.Label>
            <Form.Select
              name={name}
              value={filter[name]}
              onChange={handleFilterChange}
              disabled={loading}
            >
              {options.map((opt) => (
                <option key={opt} value={opt}>{opt || `All ${label}s`}</option>
              ))}
            </Form.Select>
          </Form.Group>
        ))}
      </Form>

      {loading ? (
        <div className="text-center my-5">
          <Spinner animation="border" /> Loading courses...
        </div>
      ) : (
        <Row xs={1} md={2} lg={3} className="g-4">
          {courses.length > 0 ? (
            courses.map((course) => {
              const isEnrolled = enrolledCourses.includes(course._id);
              return (
                <Col key={course._id}>
                  <Card className="h-100">
                    <Card.Body>
                      <Card.Title>{course.title}</Card.Title>
                      <Card.Subtitle className="mb-2 text-muted">{course.category}</Card.Subtitle>
                      <Card.Text>
                        Duration: {course.duration}<br />
                        Medium: {course.medium}<br />
                        Venue: {course.venue}
                      </Card.Text>
                    </Card.Body>
                    <Card.Footer className="d-flex justify-content-between align-items-center">
                      {userRole === 'learner' ? (
                        isEnrolled ? (
                          <Button size="sm" variant="info" onClick={() => handleViewDetails(course._id)}>
                            View Details
                          </Button>
                        ) : (
                          <Button
                            size="sm"
                            variant="success"
                            onClick={() => handleEnroll(course._id)}
                          >
                            Enroll
                          </Button>
                        )
                      ) : (
                        <Button size="sm" variant="primary" onClick={() => handleViewDetails(course._id)}>
                          View Details
                        </Button>
                      )}
                      <small className="text-muted">
                        {new Date(course.startDate).toLocaleDateString()} – {new Date(course.endDate).toLocaleDateString()}
                      </small>
                    </Card.Footer>
                  </Card>
                </Col>
              );
            })
          ) : (
            <Col>
              <p className="text-center text-muted">No courses match your filter.</p>
            </Col>
          )}
        </Row>
      )}
    </Container>
  );
};

export default Courses;

frontend\src\pages\CreateSessionForm.js
// frontend/src/pages/CreateSessionForm.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, Card, Form, Button, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const CreateSessionForm = ({ existingData = {}, onSuccess }) => {
  const token = localStorage.getItem('token');
  const isEdit = Boolean(existingData._id);

  const [courses, setCourses] = useState([]);
  const [loadingCourses, setLoadingCourses] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  const [formData, setFormData] = useState({
    topic: existingData.topic || '',
    description: existingData.description || '',
    course: existingData.course || '',
    scheduledDate: existingData.scheduledDate
      ? existingData.scheduledDate.slice(0, 16)
      : '',
    durationMinutes: existingData.durationMinutes || 60,
    link: existingData.link || '',
  });

  // Fetch courses for dropdown
  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCourses(data.courses || data);
      } catch (err) {
        toast.error('Failed to load courses');
        console.error(err);
      } finally {
        setLoadingCourses(false);
      }
    };
    fetchCourses();
  }, [token]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((f) => ({ ...f, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const payload = {
        ...formData,
        scheduledDate: new Date(formData.scheduledDate).toISOString(),
        durationMinutes: Number(formData.durationMinutes),
      };
      const url = isEdit
        ? `http://localhost:5000/api/v1/doubts/${existingData._id}`
        : 'http://localhost:5000/api/v1/doubts';
      const method = isEdit ? 'patch' : 'post';

      await axios[method](url, payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      toast.success(isEdit ? 'Session updated!' : 'Session created!');
      onSuccess && onSuccess();
      if (!isEdit) {
        setFormData({
          topic: '',
          description: '',
          course: '',
          scheduledDate: '',
          durationMinutes: 60,
          link: '',
        });
      }
    } catch (err) {
      toast.error(err.response?.data?.message || 'Submission failed.');
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <Card className="p-4">
        <h5 className="mb-4 text-center">
          {isEdit ? 'Edit Doubt Session' : 'Create Doubt Session'}
        </h5>
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Topic</Form.Label>
            <Form.Control
              name="topic"
              value={formData.topic}
              onChange={handleChange}
              required
              disabled={submitting}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Description</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              name="description"
              value={formData.description}
              onChange={handleChange}
              disabled={submitting}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Course</Form.Label>
            {loadingCourses ? (
              <Spinner animation="border" size="sm" />
            ) : (
              <Form.Select
                name="course"
                value={formData.course}
                onChange={handleChange}
                disabled={submitting}
                required
              >
                <option value="">Select course</option>
                {courses.map((c) => (
                  <option key={c._id} value={c._id}>
                    {c.title}
                  </option>
                ))}
              </Form.Select>
            )}
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Scheduled Date & Time</Form.Label>
            <Form.Control
              type="datetime-local"
              name="scheduledDate"
              value={formData.scheduledDate}
              onChange={handleChange}
              disabled={submitting}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Duration (minutes)</Form.Label>
            <Form.Control
              type="number"
              name="durationMinutes"
              min={1}
              max={180}
              value={formData.durationMinutes}
              onChange={handleChange}
              disabled={submitting}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Session Link (optional)</Form.Label>
            <Form.Control
              type="url"
              name="link"
              placeholder="https://..."
              value={formData.link}
              onChange={handleChange}
              disabled={submitting}
            />
          </Form.Group>

          <Button type="submit" variant="success" className="w-100" disabled={submitting}>
            {submitting ? (
              <>
                <Spinner size="sm" animation="border" /> Saving...
              </>
            ) : isEdit ? 'Update Session' : 'Create Session'}
          </Button>
        </Form>
      </Card>
    </Container>
  );
};

export default CreateSessionForm;

frontend\src\pages\Dashboard.css

frontend\src\pages\Dashboard.js
// frontend/src/pages/Dashboard.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Row, Col, Card, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import 'react-toastify/dist/ReactToastify.css';

const Dashboard = () => {
  const token = localStorage.getItem('token');
  const role = localStorage.getItem('role');
  const navigate = useNavigate();

  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // If learner, redirect to learner dashboard page
    if (role === 'learner') {
      navigate('/learner');
      return;
    }
    // Else fetch coordinator/educator metrics
    const fetchMetrics = async () => {
      try {
        const { data } = await axios.get(
          'http://localhost:5000/api/v1/dashboard/metrics',
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setMetrics(data);
      } catch (err) {
        toast.error('Failed to load dashboard metrics');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchMetrics();
  }, [role, token, navigate]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading dashboard...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4 text-center">
        {role === 'coordinator' ? 'Coordinator Dashboard' : 'Educator Dashboard'}
      </h4>
      <Row xs={1} md={3} className="g-4">
        <Col>
          <Card className="text-center p-3">
            <Card.Title>Courses</Card.Title>
            <Card.Text>{metrics.coursesCount}</Card.Text>
          </Card>
        </Col>
        <Col>
          <Card className="text-center p-3">
            <Card.Title>Assignments</Card.Title>
            <Card.Text>{metrics.assignmentsCount}</Card.Text>
          </Card>
        </Col>
        <Col>
          <Card className="text-center p-3">
            <Card.Title>Educators</Card.Title>
            <Card.Text>{metrics.educatorsCount}</Card.Text>
          </Card>
        </Col>
        {role === 'coordinator' && (
          <>
            <Col>
              <Card className="text-center p-3">
                <Card.Title>Learners</Card.Title>
                <Card.Text>{metrics.learnersCount}</Card.Text>
              </Card>
            </Col>
            <Col>
              <Card className="text-center p-3">
                <Card.Title>Enrollments</Card.Title>
                <Card.Text>{metrics.enrollmentsCount}</Card.Text>
              </Card>
            </Col>
            <Col>
              <Card className="text-center p-3">
                <Card.Title>Submissions</Card.Title>
                <Card.Text>{metrics.submissionsCount}</Card.Text>
              </Card>
            </Col>
          </>
        )}
        {role === 'educator' && (
          <Col>
            <Card className="text-center p-3">
              <Card.Title>Submissions</Card.Title>
              <Card.Text>{metrics.submissionsCount}</Card.Text>
            </Card>
          </Col>
        )}
      </Row>
    </Container>
  );
};

export default Dashboard;

frontend\src\pages\EditEducator.js
// frontend/src/pages/EditEducator.js
import React from 'react';
import { useParams } from 'react-router-dom';
import EditEducator from '../components/EditEducator';

const EditEducatorPage = () => {
  const { id } = useParams();

  return (
    <div className="container mt-4">
      <EditEducator educatorId={id} />
    </div>
  );
};

export default EditEducatorPage;

frontend\src\pages\EducatorDashboard.css
body {
  font-family: 'Segoe UI', sans-serif;
  background-color: #f9f9f9;
  margin: 0;
  padding: 0;
}

.dashboard-container {
  max-width: 960px;
  margin: 2rem auto;
  padding: 2rem;
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
}

.dashboard-section {
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #ddd;
}

.dashboard-section h2 {
  font-size: 1.6rem;
  margin-bottom: 1rem;
  color: #2c3e50;
}

.card {
  padding: 1.5rem;
  background: #f7f9fb;
  border-radius: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  margin-bottom: 2rem;
}

form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

input,
textarea,
select {
  padding: 0.9rem;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 1rem;
  transition: border 0.2s ease;
}

input:focus,
textarea:focus,
select:focus {
  border-color: #007bff;
  outline: none;
}

button {
  padding: 0.9rem 1.5rem;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease;
}

button:hover {
  background-color: #0056b3;
}

ul {
  list-style: none;
  padding: 0;
}

ul li {
  margin: 0.5rem 0;
  padding: 0.75rem;
  background-color: #ffffff;
  border: 1px solid #ddd;
  border-radius: 6px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.02);
}

textarea {
  resize: vertical;
  min-height: 100px;
}

frontend\src\pages\EducatorDashboard.js
// frontend/src/pages/EducatorDashboard.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Row, Col, Card, Spinner, Button } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import 'react-toastify/dist/ReactToastify.css';

const EducatorDashboard = () => {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const isActive = localStorage.getItem('isActive');
    if (isActive === 'false') {
      navigate('/inactive');
    }
  }, [navigate]);

  useEffect(() => {
    const fetchMetrics = async () => {
      try {
        const { data } = await axios.get(
          'http://localhost:5000/api/v1/dashboard/metrics',
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        setMetrics(data);
      } catch (err) {
        toast.error('Failed to load dashboard metrics');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchMetrics();
  }, [token]);

  if (loading || !metrics) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading dashboard...
      </Container>
    );
  }

  const {
    coursesCount = 0,
    assignmentsCount = 0,
    submissionsCount = 0,
  } = metrics;

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4 text-center">Educator Dashboard</h4>
      <Row xs={1} md={3} className="g-4">
        
        <Col>
          <Card className="text-center p-3 shadow-sm">
            <Card.Title>Your Courses</Card.Title>
            <Card.Text className="fs-4 fw-bold">{coursesCount}</Card.Text>
            <Button variant="primary" onClick={() => navigate('/educator/my-courses')}>
              My Courses
            </Button>
          </Card>
        </Col>

        <Col>
          <Card className="text-center p-3 shadow-sm">
            <Card.Title>Your Assignments</Card.Title>
            <Card.Text className="fs-4 fw-bold">{assignmentsCount}</Card.Text>
            <Button variant="primary" onClick={() => navigate('/educator/my-assignments')}>
              My Assignments
            </Button>
          </Card>
        </Col>

        <Col>
          <Card className="text-center p-3 shadow-sm">
            <Card.Title>Submissions Received</Card.Title>
            <Card.Text className="fs-4 fw-bold">{submissionsCount}</Card.Text>
            <Button variant="primary" onClick={() => navigate('/educator/my-submissions')}>
              My Submissions
            </Button>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default EducatorDashboard;

frontend\src\pages\EducatorEditProfile.js
// frontend/src/components/EducatorEditProfile.js
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Card, Form, Button, Image, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const EducatorEditProfile = () => {
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    address: '',
    country: '',
  });
  const [avatarFile, setAvatarFile] = useState(null);
  const [avatarPreview, setAvatarPreview] = useState('/uploads/avatars/default-avatar.png');
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  // Load profile
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/users/profile', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setFormData({
          firstName: data.firstName,
          lastName: data.lastName,
          phone: data.phone || '',
          address: data.address || '',
          country: data.country || '',
        });
        setAvatarPreview(`/uploads/avatars/${data.avatarUrl || 'default-avatar.png'}`);
      } catch (err) {
        toast.error('Failed to load profile');
      } finally {
        setLoading(false);
      }
    };
    fetchProfile();
  }, [token]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((f) => ({ ...f, [name]: value }));
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file && !file.type.startsWith('image/')) {
      toast.warn('Only image files are allowed.');
      return;
    }
    setAvatarFile(file);
    if (file) setAvatarPreview(URL.createObjectURL(file));
  };

  const uploadAvatar = async () => {
    const fd = new FormData();
    fd.append('avatar', avatarFile);
    const { data } = await axios.post(
      'http://localhost:5000/api/v1/avatar/upload',
      fd,
      { headers: { Authorization: `Bearer ${token}` } }
    );
    return data.avatarUrl;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    try {
      let avatarUrl = formData.avatarUrl;
      if (avatarFile) avatarUrl = await uploadAvatar();
      await axios.patch(
        'http://localhost:5000/api/v1/users/profile',
        { ...formData, avatarUrl },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Profile updated successfully');
      setTimeout(() => navigate('/educator'), 1500);
    } catch (err) {
      toast.error('Update failed');
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return <div className="text-center my-5"><Spinner animation="border" /> Loading...</div>;
  }

  return (
    <Card className="p-4">
      <ToastContainer position="top-center" />
      <h5 className="mb-4 text-center">Edit Profile</h5>
      <Form onSubmit={handleSubmit} encType="multipart/form-data">
        <div className="text-center mb-3">
          <Image src={avatarPreview} roundedCircle width={100} height={100} className="border" />
          <Form.Control
            type="file"
            accept="image/*"
            className="mt-2"
            onChange={handleAvatarChange}
            disabled={submitting}
          />
        </div>
        {['firstName','lastName','phone','address','country'].map((field) => (
          <Form.Group key={field} className="mb-3">
            <Form.Label>{field.charAt(0).toUpperCase()+field.slice(1)}</Form.Label>
            <Form.Control
              name={field}
              value={formData[field]}
              onChange={handleChange}
              disabled={submitting}
            />
          </Form.Group>
        ))}
        <Button type="submit" variant="primary" className="w-100" disabled={submitting}>
          {submitting ? <Spinner size="sm" animation="border" /> : 'Save Changes'}
        </Button>
      </Form>
    </Card>
  );
};

export default EducatorEditProfile;

frontend\src\pages\EducatorPage.js
// frontend/src/pages/EducatorPage.js
import React from 'react';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';

/**
 * Landing page for educators, providing quick access to common tasks.
 */
const EducatorPage = () => {
  return (
    <Container className="my-5">
      <h3 className="mb-4 text-center">Educator Panel</h3>
      <Row xs={1} md={2} lg={3} className="g-4">
        <Col>
          <Card className="h-100 text-center">
            <Card.Body>
              <Card.Title>Study Plan</Card.Title>
              <Card.Text>Design detailed study plans for your courses.</Card.Text>
              <Link to="/educator/my-studyplans">
                <Button variant="primary">New Study Plan</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
        <Col>
          <Card className="h-100 text-center">
            <Card.Body>
              <Card.Title>Create Quiz</Card.Title>
              <Card.Text>Build quizzes and assessments.</Card.Text>
              <Link to="/quizzes/create">
                <Button variant="primary">New Quiz</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
        <Col>
          <Card className="h-100 text-center">
            <Card.Body>
              <Card.Title>Create Assignment</Card.Title>
              <Card.Text>Assign tasks and assignments to learners.</Card.Text>
              <Link to="/assignments/create">
                <Button variant="primary">New Assignment</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
        <Col>
          <Card className="h-100 text-center">
            <Card.Body>
              <Card.Title>View My Courses</Card.Title>
              <Card.Text>Manage your course offerings.</Card.Text>
              <Link to="/courses">
                <Button variant="primary">My Courses</Button>
              </Link>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default EducatorPage;

frontend\src\pages\EnrollmentHistory.js
import React, { useEffect, useState } from 'react';
import { Container, Table, Button, Form, Row, Col } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { saveAs } from 'file-saver';
import { toast } from 'react-toastify';

const EnrollmentHistory = () => {
  const [enrollments, setEnrollments] = useState([]);
  const [filterDate, setFilterDate] = useState('');
  const [filterStatus, setFilterStatus] = useState('');
  const navigate = useNavigate();

  const token = localStorage.getItem('token');

  useEffect(() => {
    fetchEnrollments();
  }, []);

  const fetchEnrollments = async () => {
    try {
      const res = await axios.get('/api/enrollments/my', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setEnrollments(res.data);
    } catch (err) {
      toast.error('Failed to fetch enrollment history');
    }
  };

  const handleRetryPayment = (courseId) => {
    navigate(`/payment/${courseId}`);
  };

  const exportCSV = () => {
    const csv = [
      ['Course Title', 'Date', 'Status'],
      ...enrollments.map((en) => [
        en.course.title,
        new Date(en.createdAt).toLocaleDateString(),
        en.paymentStatus,
      ]),
    ]
      .map((row) => row.join(','))
      .join('\n');

    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'enrollment_history.csv');
  };

  const filteredEnrollments = enrollments.filter((en) => {
    const matchDate = filterDate
      ? new Date(en.createdAt).toLocaleDateString() === filterDate
      : true;
    const matchStatus = filterStatus ? en.paymentStatus === filterStatus : true;
    return matchDate && matchStatus;
  });

  return (
    <Container className="mt-4">
      <h3>Enrollment History</h3>

      <Row className="mb-3">
        <Col md={3}>
          <Form.Label>Filter by Date</Form.Label>
          <Form.Control
            type="date"
            onChange={(e) => setFilterDate(new Date(e.target.value).toLocaleDateString())}
          />
        </Col>
        <Col md={3}>
          <Form.Label>Filter by Status</Form.Label>
          <Form.Select onChange={(e) => setFilterStatus(e.target.value)}>
            <option value="">All</option>
            <option value="success">Success</option>
            <option value="pending">Pending</option>
            <option value="failed">Failed</option>
          </Form.Select>
        </Col>
        <Col md={6} className="d-flex align-items-end justify-content-end">
          <Button variant="outline-secondary" onClick={exportCSV}>
            Export CSV
          </Button>
        </Col>
      </Row>

      <Table striped bordered hover responsive>
        <thead>
          <tr>
            <th>Course</th>
            <th>Date</th>
            <th>Status</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {filteredEnrollments.map((en) => (
            <tr key={en._id}>
              <td>{en.course.title}</td>
              <td>{new Date(en.createdAt).toLocaleDateString()}</td>
              <td>{en.paymentStatus}</td>
              <td>
                {(en.paymentStatus === 'pending' || en.paymentStatus === 'failed') && (
                  <Button
                    size="sm"
                    variant="outline-primary"
                    onClick={() => handleRetryPayment(en.course._id)}
                  >
                    Retry Payment
                  </Button>
                )}

                {en.paymentStatus === 'success' && (
                  <Button
                    size="sm"
                    variant="outline-success"
                    onClick={() => navigate(`/receipt/${en._id}`)}
                  >
                    View Receipt
                  </Button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </Container>
  );
};

export default EnrollmentHistory;

frontend\src\pages\EvaluationPage.js
// frontend/src/pages/EvaluationPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, Table, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const EvaluationPage = () => {
  const token = localStorage.getItem('token');
  const [evaluations, setEvaluations] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch all evaluations
  useEffect(() => {
    const fetchEvaluations = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/evaluations', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setEvaluations(data.data || data);
      } catch (err) {
        toast.error('Failed to load evaluations');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchEvaluations();
  }, [token]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading evaluations...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4">Learner Evaluations</h4>
      {evaluations.length > 0 ? (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Learner</th>
              <th>Course</th>
              <th>Educator</th>
              <th>Feedback</th>
              <th>Grade</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody>
            {evaluations.map((ev) => (
              <tr key={ev._id}>
                <td>{ev.learner.firstName} {ev.learner.lastName}</td>
                <td>{ev.course.title}</td>
                <td>{ev.educator.firstName} {ev.educator.lastName}</td>
                <td>{ev.feedback}</td>
                <td>{ev.grade}</td>
                <td>{new Date(ev.createdAt).toLocaleDateString()}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      ) : (
        <p className="text-muted">No evaluations found.</p>
      )}
    </Container>
  );
};

export default EvaluationPage;

frontend\src\pages\ForumPage.js
// ForumPage.js (Enhanced with sorting, search, and better UX)
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Container, Form, Button, Spinner, Card, Row, Col,
} from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import ForumPostCard from '../components/shared/ForumPostCard';


const ForumPage = () => {
  const token = localStorage.getItem('token');
  const [posts, setPosts] = useState([]);
  const [content, setContent] = useState('');
  const [course, setCourse] = useState('');
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState(null);
  const [submitting, setSubmitting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOrder, setSortOrder] = useState('latest');

  useEffect(() => {
    const fetchAll = async () => {
      try {
        const [cRes, pRes, uRes] = await Promise.all([
          axios.get('http://localhost:5000/api/v1/courses', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/forum', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/users/me', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);
        setCourses(cRes.data.courses || cRes.data);
        setPosts(pRes.data);
        setUser(uRes.data);
      } catch (err) {
        toast.error('Failed to load forum data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchAll();
  }, [token]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!content.trim() || !course) {
      toast.warn('Please select a course and enter content');
      return;
    }
    setSubmitting(true);
    try {
      await axios.post(
        'http://localhost:5000/api/v1/forum',
        { content, course },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Post created');
      setContent('');
      refreshPosts();
    } catch (err) {
      toast.error('Failed to create post');
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  const refreshPosts = async () => {
    try {
      const pRes = await axios.get('http://localhost:5000/api/v1/forum', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setPosts(pRes.data);
    } catch (err) {
      toast.error('Failed to reload forum posts');
    }
  };

  const buildThreadedPosts = () => {
    const map = {};
    const roots = [];

    posts.forEach((post) => {
      map[post._id] = { ...post, replies: [] };
    });

    posts.forEach((post) => {
      if (post.parentPost) {
        map[post.parentPost]?.replies.push(map[post._id]);
      } else {
        roots.push(map[post._id]);
      }
    });

    const filtered = roots.filter((p) =>
      p.content.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (sortOrder === 'latest') {
      return filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    } else {
      return filtered.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
    }
  };

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading forum...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4">📚 Course Forum</h4>

      <Card className="p-3 mb-4">
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Select Course</Form.Label>
            <Form.Select
              value={course}
              onChange={(e) => setCourse(e.target.value)}
              disabled={submitting}
              required
            >
              <option value="">-- Choose a course --</option>
              {courses.map((c) => (
                <option key={c._id} value={c._id}>{c.title}</option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Your Post</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              value={content}
              onChange={(e) => setContent(e.target.value)}
              disabled={submitting}
              required
              placeholder="Write your post here..."
            />
          </Form.Group>

          <Button type="submit" variant="primary" disabled={submitting}>
            {submitting ? <Spinner size="sm" animation="border" /> : 'Post'}
          </Button>
        </Form>
      </Card>

      <Row className="mb-3">
        <Col md={6}>
          <Form.Control
            type="text"
            placeholder="🔍 Search posts..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </Col>
        <Col md={6} className="text-md-end mt-2 mt-md-0">
          <Form.Select
            value={sortOrder}
            onChange={(e) => setSortOrder(e.target.value)}
          >
            <option value="latest">Sort: Latest</option>
            <option value="oldest">Sort: Oldest</option>
          </Form.Select>
        </Col>
      </Row>

      {buildThreadedPosts().map((post) => (
        <ForumPostCard
          key={post._id}
          post={post}
          replies={post.replies}
          currentUser={user}
          onUpdate={refreshPosts}
        />
      ))}
    </Container>
  );
};

export default ForumPage;

frontend\src\pages\Home.js
// frontend/src/pages/Home.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Card, Row, Col, Spinner, Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import '../styles/Home.css';


const Home = () => {
  const token = localStorage.getItem('token');
  const [featuredCourses, setFeaturedCourses] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch a few featured courses
  useEffect(() => {
    const fetchFeatured = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/courses?limit=3', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setFeaturedCourses(data.courses || data);
      } catch (err) {
        toast.error('Failed to load featured courses');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchFeatured();
  }, [token]);

  return (
    <Container fluid className="p-0">
      <ToastContainer position="top-center" />
          <Container fluid className="py-5 text-center bg-primary text-white mb-0">
    +        <h1>Welcome to the Learning Dashboard</h1>
    +        <p>Manage courses, engage learners, and track progress—all in one place.</p>
    +        <Link to="/courses">
    +          <Button variant="light">Browse Courses</Button>
    +        </Link>
    +      </Container>

      <Container className="my-5">
        <h4 className="mb-4">Featured Courses</h4>
        {loading ? (
          <div className="text-center my-5">
            <Spinner animation="border" /> Loading...
          </div>
        ) : (
          <Row xs={1} md={3} className="g-4">
            {featuredCourses.map((course) => (
              <Col key={course._id}>
                <Card className="h-100">
                  <Card.Body>
                    <Card.Title>{course.title}</Card.Title>
                    <Card.Subtitle className="mb-2 text-muted">
                      {course.category}
                    </Card.Subtitle>
                    <Card.Text>
                      Duration: {course.duration}<br />
                      Medium: {course.medium}
                    </Card.Text>
                  </Card.Body>
                  <Card.Footer>
                    <Link to={`/courses/${course._id}`} className="btn btn-sm btn-primary">
                      View Details
                    </Link>
                  </Card.Footer>
                </Card>
              </Col>
            ))}
          </Row>
        )}
      </Container>
    </Container>
  );
};

export default Home;

frontend\src\pages\InactivePage.js
import React from 'react';
import { Container, Alert } from 'react-bootstrap';

const InactivePage = () => {
  return (
    <Container className="py-5">
      <Alert variant="danger" className="text-center">
        <h4>Your account is inactive.</h4>
        <p>Please contact your coordinator to regain access.</p>
      </Alert>
    </Container>
  );
};

export default InactivePage;

frontend\src\pages\LearnerDashboard.css
.learner-dashboard {
  font-family: 'Segoe UI', sans-serif;
  background: linear-gradient(to right, #2193b0, #6dd5ed);
  min-height: 100vh;
  padding: 1rem;
  color: #333;
}

.top-bar {
  background: #4e00b6;
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.2rem 2rem;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  margin-bottom: 2rem;
}

.logout-btn {
  background: #fff;
  color: #4e00b6;
  border: none;
  padding: 8px 18px;
  border-radius: 8px;
  font-weight: bold;
  cursor: pointer;
  transition: 0.3s;
}
.logout-btn:hover {
  background: #e2d8ff;
}

.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 1.5rem;
}

.profile-card, .section-card {
  background: white;
  padding: 1.5rem;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.profile-card h2,
.section-card h2 {
  margin-bottom: 1rem;
  color: #4e00b6;
}

.profile-info {
  display: flex;
  align-items: flex-start;
  gap: 1.5rem;
}

.avatar-image {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  object-fit: cover;
  box-shadow: 0 0 5px rgba(0,0,0,0.2);
}

.profile-card {
  display: flex;
  align-items: center;
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  gap: 2rem;
  flex-wrap: wrap;
}

.profile-left {
  flex-shrink: 0;
}

.profile-avatar {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid #6a0dad;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.profile-avatar-placeholder {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  background-color: #eee;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  color: #666;
  border: 3px dashed #aaa;
}

.profile-right {
  flex: 1;
}

.profile-right h2 {
  color: #6a0dad;
  margin-bottom: 1rem;
}

frontend\src\pages\LearnerDashboard.jsx
// frontend/src/pages/LearnerDashboard.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Container,
  Row,
  Col,
  Card,
  ListGroup,
  Spinner,
  Button,
  ProgressBar,
} from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import 'react-toastify/dist/ReactToastify.css';

const LearnerDashboard = () => {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  const [myCourses, setMyCourses] = useState([]);
  const [assignments, setAssignments] = useState([]);
  const [quizAttempts, setQuizAttempts] = useState([]);
  const [allQuizzesCount, setAllQuizzesCount] = useState(0);
  const [loading, setLoading] = useState(true);

  // ---------- Fetch everything ----------
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [coursesRes, subsRes, attemptsRes, quizzesRes] = await Promise.all([
          axios.get('http://localhost:5000/api/v1/enrollments', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/submissions', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/quizAttempts/my-attempts', {
            headers: { Authorization: `Bearer ${token}` },
          }),
          axios.get('http://localhost:5000/api/v1/quizzes', {
            headers: { Authorization: `Bearer ${token}` },
          }),
        ]);

        setMyCourses(coursesRes.data);
        setAssignments(subsRes.data);
        setQuizAttempts(attemptsRes.data);
        setAllQuizzesCount(quizzesRes.data.length);
      } catch (err) {
        toast.error('Failed to load dashboard data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [token]);

  // ---------- Derived numbers ----------
  const quizzesAttempted = quizAttempts.length;
  const quizProgress = allQuizzesCount
    ? Math.round((quizzesAttempted / allQuizzesCount) * 100)
    : 0;

  // ---------- Loading ----------
  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading dashboard...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4 text-center">Learner Dashboard</h4>

      {/* ---- 1. KPI Row ---- */}
      <Row className="g-4 mb-4">
        <Col md={4}>
          <Card bg="primary" text="white" className="text-center">
            <Card.Body>
              <Card.Title>{myCourses.length}</Card.Title>
              <Card.Text>Total Courses</Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={4}>
          <Card bg="info" text="white" className="text-center">
            <Card.Body>
              <Card.Title>{assignments.length}</Card.Title>
              <Card.Text>Total Assignments</Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={4}>
          <Card bg="success" text="white" className="text-center">
            <Card.Body>
              <Card.Title>
                {quizzesAttempted}/{allQuizzesCount}
              </Card.Title>
              <Card.Text>Quizzes Attempted</Card.Text>
              <ProgressBar
                now={quizProgress}
                label={`${quizProgress}%`}
                variant="light"
              />
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* ---- 2. Detailed Panels ---- */}
      <Row className="g-4">
        {/* Courses */}
        <Col xs={12} md={6}>
          <Card>
            <Card.Header>My Courses</Card.Header>
            <ListGroup variant="flush">
              {myCourses.length ? (
                myCourses.map((en) => (
                  <ListGroup.Item key={en._id}>
                    <strong>{en.course.title}</strong> — Status: {en.status}
                    <Button
                      variant="link"
                      size="sm"
                      onClick={() => navigate(`/courses/${en.course._id}`)}
                    >
                      View
                    </Button>
                  </ListGroup.Item>
                ))
              ) : (
                <ListGroup.Item>No course enrollments found.</ListGroup.Item>
              )}
            </ListGroup>
          </Card>
        </Col>

        {/* Submissions */}
        <Col xs={12} md={6}>
          <Card>
            <Card.Header>My Submissions</Card.Header>
            <ListGroup variant="flush">
              {assignments.length ? (
                assignments.map((sub) => (
                  <ListGroup.Item key={sub._id}>
                    <strong>{sub.assignment.name}</strong> — Status:{' '}
                    {sub.status}
                    <Button
                      variant="link"
                      size="sm"
                      onClick={() => navigate(`/submissions/${sub._id}`)}
                    >
                      Details
                    </Button>
                  </ListGroup.Item>
                ))
              ) : (
                <ListGroup.Item>No submissions found.</ListGroup.Item>
              )}
            </ListGroup>
          </Card>
        </Col>
      </Row>

      {/* ---- 3. Quiz Performance ---- */}
      <Row className="g-4 mt-4">
        <Col xs={12}>
          <Card>
            <Card.Header>Quiz Performance</Card.Header>
            <ListGroup variant="flush">
              {quizAttempts.length ? (
                quizAttempts.map((att) => (
                  <ListGroup.Item key={att._id}>
                    <Row className="align-items-center">
                      <Col md={4}>
                        <strong>{att.quiz.title}</strong>
                      </Col>
                      <Col md={4}>
                        Score:{' '}
                        <strong>
                          {att.score}/{att.totalQuestions}
                        </strong>
                      </Col>
                      <Col md={4}>
                        <ProgressBar
                          now={(att.score / att.totalQuestions) * 100}
                          variant="success"
                          label={`${Math.round(
                            (att.score / att.totalQuestions) * 100
                          )}%`}
                        />
                      </Col>
                    </Row>
                  </ListGroup.Item>
                ))
              ) : (
                <ListGroup.Item>
                  You haven’t attempted any quizzes yet.
                </ListGroup.Item>
              )}
            </ListGroup>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default LearnerDashboard;

frontend\src\pages\LearnerQuizHistory.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Table, Spinner, Container, Alert } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import 'react-toastify/dist/ReactToastify.css';

const LearnerQuizHistory = () => {
  const [attempts, setAttempts] = useState([]);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchAttempts = async () => {
      if (!token) {
        toast.error('Please login again');
        navigate('/login');
        return;
      }

      try {
        const { data } = await axios.get(
          'http://localhost:5000/api/v1/quizAttempts/my-attempts',
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setAttempts(data);
      } catch (err) {
        toast.error('❌ Failed to load results. Please try again.');
        console.error('Quiz history fetch error:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchAttempts();
  }, [token, navigate]);

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-3">📜 Quiz Result History</h4>

      {loading ? (
        <Spinner animation="border" variant="primary" />
      ) : attempts.length === 0 ? (
        <Alert variant="info">You haven't attempted any quizzes yet.</Alert>
      ) : (
        <Table striped bordered hover responsive>
          <thead className="table-dark">
            <tr>
              <th>#</th>
              <th>Quiz Title</th>
              <th>Score</th>
              <th>Total Questions</th>
              <th>Attempted On</th>
            </tr>
          </thead>
          <tbody>
            {attempts.map((attempt, index) => (
              <tr key={attempt._id}>
                <td>{index + 1}</td>
                <td>{attempt.quiz?.title || 'N/A'}</td>
                <td>{attempt.score}</td>
                <td>{attempt.totalQuestions}</td>
                <td>{new Date(attempt.attemptedAt).toLocaleString()}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}
    </Container>
  );
};

export default LearnerQuizHistory;


frontend\src\pages\LiveSessions.js
// frontend/src/pages/LiveSessions.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Card, ListGroup, Spinner, Button } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const LiveSessions = () => {
  const token = localStorage.getItem('token');
  const [sessions, setSessions] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch upcoming doubt/live sessions
  useEffect(() => {
    const fetchSessions = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/doubts', {
          headers: { Authorization: `Bearer ${token}` },
        });
        // Filter to future or active sessions
        const now = new Date();
        setSessions(
          data.filter((s) => new Date(s.scheduledDate) >= now && s.isActive)
        );
      } catch (err) {
        toast.error('Failed to load live sessions');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchSessions();
  }, [token]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading live sessions...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4 text-center">Upcoming Live Sessions</h4>
      {sessions.length > 0 ? (
        <ListGroup>
          {sessions.map((session) => (
            <ListGroup.Item key={session._id} className="d-flex justify-content-between align-items-center">
              <div>
                <h5>{session.topic}</h5>
                <p className="mb-1">{session.description}</p>
                <small>
                  {new Date(session.scheduledDate).toLocaleString()} ({session.durationMinutes} mins)
                </small>
              </div>
              {session.link ? (
                <Button
                  variant="primary"
                  onClick={() => window.open(session.link, '_blank')}
                >
                  Join
                </Button>
              ) : (
                <Button variant="secondary" disabled>
                  No Link
                </Button>
              )}
            </ListGroup.Item>
          ))}
        </ListGroup>
      ) : (
        <p className="text-center text-muted">No upcoming sessions.</p>
      )}
    </Container>
  );
};

export default LiveSessions;

frontend\src\pages\Login.js
import React, { useState } from 'react';
import axios from 'axios';
import { Container, Card, Form, Button, Spinner } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import '../styles/Auth.css';

const Login = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({ email: '', password: '' });
  const [submitting, setSubmitting] = useState(false);

  const handleChange = (e) => {
    setFormData((f) => ({ ...f, [e.target.name]: e.target.value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    try {
      const { data } = await axios.post(
        'http://localhost:5000/api/v1/users/login',
        formData
      );

      // ✅ Store all essential user data
      localStorage.setItem('token', data.token);
      localStorage.setItem('role', data.role);
      localStorage.setItem('email', data.email);
      localStorage.setItem('firstName', data.firstName);
      localStorage.setItem('lastName', data.lastName);
      localStorage.setItem('userId', data._id);
      localStorage.setItem('avatarUrl', data.avatarUrl);

      // ✅ Store isActive to control inactive educator blocking
      if (typeof data.isActive !== 'undefined') {
        localStorage.setItem('isActive', data.isActive);
      }

      // ✅ Optional full user store
      localStorage.setItem('user', JSON.stringify(data));

      toast.success('Logged in successfully!');

      // ✅ Redirect based on role
      if (data.role === 'coordinator') {
        navigate('coordinator/dashboard');
      } else if (data.role === 'educator') {
        // ✅ Check if educator is inactive before navigating
        if (data.isActive === false) {
          toast.error('Your account is inactive. Please contact your coordinator.');
          return;
        }
        navigate('educator/dashboard');
      } else if (data.role === 'learner') {
        navigate('learner');
      } else {
        toast.error('Unrecognized role. Please contact admin.');
      }
    } catch (err) {
      toast.error(err.response?.data?.message || 'Login failed');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="auth-wrapper">
      <ToastContainer position="top-center" />
      <Card className="auth-card">
        <h5>Login to Dashboard</h5>
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="Enter your email"
              required
              disabled={submitting}
            />
          </Form.Group>
          <Form.Group className="mb-4">
            <Form.Label>Password</Form.Label>
            <Form.Control
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              placeholder="Enter your password"
              required
              disabled={submitting}
            />
          </Form.Group>
          <Button
            type="submit"
            variant="primary"
            className="w-100"
            disabled={submitting}
          >
            {submitting ? (
              <>
                <Spinner size="sm" animation="border" role="status" /> Logging in...
              </>
            ) : (
              'Login'
            )}
          </Button>
        </Form>
        <div className="auth-footer">
          <span>Don’t have an account?</span>{' '}
          <Link to="/register">Register now</Link>
        </div>
      </Card>
    </div>
  );
};

export default Login;

frontend\src\pages\MyCourses.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Card, Row, Col, Spinner, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const MyCourses = () => {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();
  const [enrollments, setEnrollments] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchEnrollments = async () => {
    try {
      const { data } = await axios.get('http://localhost:5000/api/v1/enrollments', {
        headers: { Authorization: `Bearer ${token}` },
      });

      const sorted = [...data].sort(
        (a, b) => new Date(b.enrollmentDate) - new Date(a.enrollmentDate)
      );
      setEnrollments(sorted);
    } catch (err) {
      toast.error('Failed to load your courses');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchEnrollments();
  }, [token]);

  const handleUnenroll = async (enrollmentId) => {
    if (!window.confirm('Are you sure you want to unenroll from this course?')) return;
    try {
      await axios.delete(`http://localhost:5000/api/v1/enrollments/${enrollmentId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('Unenrolled successfully');
      setEnrollments(enrollments.filter((e) => e._id !== enrollmentId));
    } catch (err) {
      toast.error('Failed to unenroll');
      console.error(err);
    }
  };

  const handlePayNow = (enrollmentId) => {
    if (!enrollmentId) {
      toast.error("Invalid enrollment ID");
      return;
    }
    navigate(`/payment/${enrollmentId}`);
  };

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading your courses...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4 text-center">My Courses</h4>
      <Row xs={1} md={2} lg={3} className="g-4">
        {enrollments.length > 0 ? (
          enrollments.map((enrollment) => {
            const { course, _id, paymentStatus, enrollmentDate } = enrollment;
            const startDate = course?.startDate ? new Date(course.startDate).toLocaleDateString() : '';
            const endDate = course?.endDate ? new Date(course.endDate).toLocaleDateString() : '';
            const isUnenrollable =
              new Date() - new Date(course?.startDate) < 7 * 24 * 60 * 60 * 1000;

            return (
              <Col key={_id}>
                <Card className="h-100 shadow-sm">
                  <Card.Body>
                    <Card.Title>{course?.title || 'Untitled'}</Card.Title>
                    <Card.Subtitle className="mb-2 text-muted">{course?.category}</Card.Subtitle>
                    <Card.Text>
                      <strong>Venue:</strong> {course?.venue || 'N/A'} <br />
                      <strong>Medium:</strong> {course?.medium || 'N/A'} <br />
                      <strong>Duration:</strong> {course?.duration || 'N/A'} <br />
                      <strong>Status:</strong> {enrollment?.status || 'N/A'} <br />
                    </Card.Text>
                  </Card.Body>
                  <Card.Footer className="text-center">
                    <small className="text-muted">
                      {startDate} – {endDate}
                    </small>
                    <br />
                    {paymentStatus !== 'success' && (
                      <Button
                        variant="warning"
                        size="sm"
                        className="mt-2 w-100"
                        onClick={() => handlePayNow(_id)}
                      >
                        Pay Now
                      </Button>
                    )}
                    {isUnenrollable && (
                      <Button
                        variant="danger"
                        size="sm"
                        className="mt-2 w-100"
                        onClick={() => handleUnenroll(_id)}
                      >
                        Unenroll
                      </Button>
                    )}
                  </Card.Footer>
                </Card>
              </Col>
            );
          })
        ) : (
          <Col>
            <p className="text-center text-muted">
              You are not enrolled in any courses yet.
            </p>
          </Col>
        )}
      </Row>
    </Container>
  );
};

export default MyCourses;


frontend\src\pages\NotFound.js
// frontend/src/pages/NotFound.js
import React from 'react';
import { Container, Card, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

const NotFound = () => {
  const navigate = useNavigate();
  return (
    <Container className="d-flex justify-content-center align-items-center vh-100">
      <Card className="text-center p-4 shadow-sm">
        <Card.Title as="h2" className="mb-3">404 - Page Not Found</Card.Title>
        <Card.Text className="mb-4">
          Oops! The page you’re looking for doesn’t exist.
        </Card.Text>
        <Button variant="primary" onClick={() => navigate('/')}>
          Go Home
        </Button>
      </Card>
    </Container>
  );
};

export default NotFound;

frontend\src\pages\PaymentPage.js
// src/pages/PaymentPage.js
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Container, Card, Button, Spinner } from 'react-bootstrap';
import { toast } from 'react-toastify';

const PaymentPage = () => {
  const { enrollmentId } = useParams();
  const [enrollment, setEnrollment] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  useEffect(() => {
    const fetchEnrollment = async () => {
      try {
        const { data } = await axios.get(`http://localhost:5000/api/v1/enrollments/${enrollmentId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setEnrollment(data);
      } catch (err) {
        toast.error('Failed to load enrollment info');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchEnrollment();
  }, [enrollmentId, token]);

  const handlePayment = async () => {
    try {
      await axios.patch(`http://localhost:5000/api/v1/enrollments/${enrollmentId}`,
        { paymentStatus: 'success' },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success('Payment completed!');
      navigate('/my-courses');
    } catch (err) {
      toast.error('Payment failed');
      console.error(err);
    }
  };

  if (loading) {
    return <Container className="text-center my-5"><Spinner animation="border" /> Loading...</Container>;
  }

  if (!enrollment) return <Container className="text-center my-5">Enrollment not found.</Container>;

  const course = enrollment.course;
  return (
    <Container className="my-4">
      <Card className="p-4 shadow">
        <h4 className="mb-3">Payment for: {course?.title}</h4>
        <p><strong>Category:</strong> {course?.category}</p>
        <p><strong>Fee:</strong> ${course?.courseFee || 'Free'}</p>
        <p><strong>Learner:</strong> {enrollment?.learner?.firstName} {enrollment?.learner?.lastName}</p>
        {enrollment.paymentStatus === 'success' ? (
          <Button variant="success" disabled>Already Paid</Button>
        ) : (
          <Button variant="primary" onClick={handlePayment}>Pay Now</Button>
        )}
      </Card>
    </Container>
  );
};

export default PaymentPage;

frontend\src\pages\PaymentReceipt.js
// frontend/src/pages/PaymentReceipt.js
import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import { Container, Card, Spinner, Button } from 'react-bootstrap';
import { useParams } from 'react-router-dom';
import { useReactToPrint } from 'react-to-print';
import { toast } from 'react-toastify';

const PaymentReceipt = () => {
  const { enrollmentId } = useParams();
  const token = localStorage.getItem('token');
  const [enrollment, setEnrollment] = useState(null);
  const [loading, setLoading] = useState(true);
  const componentRef = useRef();

  useEffect(() => {
    const fetchEnrollment = async () => {
      try {
        const { data } = await axios.get(`http://localhost:5000/api/v1/enrollments/${enrollmentId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setEnrollment(data);
      } catch (err) {
        toast.error('Failed to load receipt');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchEnrollment();
  }, [enrollmentId, token]);

  const handlePrint = useReactToPrint({
    content: () => componentRef.current,
  });

  return (
    <Container className="my-5">
      {loading ? (
        <Spinner animation="border" />
      ) : enrollment ? (
        <>
          <div ref={componentRef}>
            <Card className="p-4">
              <h4 className="text-center">Payment Receipt</h4>
              <hr />
              <p><strong>Receipt ID:</strong> {enrollment._id}</p>
              <p><strong>Course:</strong> {enrollment.course?.title}</p>
              <p><strong>Category:</strong> {enrollment.course?.category}</p>
              <p><strong>Learner:</strong> {enrollment.learner?.firstName} {enrollment.learner?.lastName}</p>
              <p><strong>Payment Status:</strong> {enrollment.paymentStatus}</p>
              <p><strong>Status:</strong> {enrollment.status}</p>
              <p><strong>Fee:</strong> Rs. {enrollment.course?.fee}</p>
              <p><strong>Date:</strong> {new Date(enrollment.enrollmentDate).toLocaleDateString()}</p>
            </Card>
          </div>
          <div className="text-center mt-3">
            <Button onClick={handlePrint}>🖨️ Print Receipt</Button>
          </div>
        </>
      ) : (
        <p className="text-muted">Enrollment not found</p>
      )}
    </Container>
  );
};

export default PaymentReceipt;

frontend\src\pages\PlanPage.js
// frontend/src/pages/PlanPage.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Card, ListGroup, Spinner, Button } from 'react-bootstrap';
import { useParams, useNavigate } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const PlanPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const [plan, setPlan] = useState(null);
  const [loading, setLoading] = useState(true);

  // Fetch study plan by ID
  useEffect(() => {
    const fetchPlan = async () => {
      try {
        const { data } = await axios.get(
          `http://localhost:5000/api/v1/studyplans/${id}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setPlan(data);
      } catch (err) {
        toast.error('Failed to load study plan');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchPlan();
  }, [id, token]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading plan...
      </Container>
    );
  }

  if (!plan) {
    return (
      <Container className="text-center my-5">
        <p className="text-muted">Study plan not found.</p>
        <Button variant="primary" onClick={() => navigate(-1)}>
          Go Back
        </Button>
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <Card className="mb-4">
        <Card.Body>
          <Card.Title>{plan.title}</Card.Title>
          {plan.description && <Card.Text>{plan.description}</Card.Text>}
        </Card.Body>
      </Card>

      <h5>Schedule</h5>
      {plan.schedule && plan.schedule.length > 0 ? (
        <ListGroup>
          {plan.schedule.map((item, idx) => (
            <ListGroup.Item key={idx}>
              <strong>{new Date(item.date).toLocaleDateString()}:</strong> {item.topic}
              {item.notesUrl && (
                <div>
                  <a href={item.notesUrl} target="_blank" rel="noopener noreferrer">
                    View Notes
                  </a>
                </div>
              )}
            </ListGroup.Item>
          ))}
        </ListGroup>
      ) : (
        <p className="text-muted">No schedule entries.</p>
      )}
    </Container>
  );
};

export default PlanPage;

frontend\src\pages\QuizPage.js
// frontend/src/pages/QuizPage.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Card, Spinner, ListGroup, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const QuizPage = () => {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  const [quizzes, setQuizzes] = useState([]);
  const [loading, setLoading] = useState(true);

  // ✅ Redirect if educator is inactive
  useEffect(() => {
    const isActive = localStorage.getItem('isActive');
    if (isActive === 'false') {
      navigate('/inactive');
    }
  }, [navigate]);

  useEffect(() => {
    const fetchQuizzes = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/quizzes', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setQuizzes(data);
      } catch (err) {
        toast.error('Failed to load quizzes');
      } finally {
        setLoading(false);
      }
    };
    fetchQuizzes();
  }, [token]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading quizzes...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4>Quiz List</h4>
      {quizzes.length > 0 ? (
        <ListGroup>
          {quizzes.map((quiz) => (
            <ListGroup.Item key={quiz._id}>
              <strong>{quiz.title}</strong> – {quiz.course?.title || 'No course'}
              <Button
                size="sm"
                className="float-end"
                variant="primary"
                onClick={() => navigate(`/quiz/edit/${quiz._id}`)}
              >
                Edit
              </Button>
            </ListGroup.Item>
          ))}
        </ListGroup>
      ) : (
        <p>No quizzes found.</p>
      )}
    </Container>
  );
};

export default QuizPage;

frontend\src\pages\Register.js
// frontend/src/pages/Register.js
import React, { useState } from 'react';
import axios from 'axios';
import { Card, Form, Button, Spinner } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import '../styles/Auth.css';

const Register = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    dob: '',
    sex: '',
    phone: '',
    address: '',
    country: '',
    role: '',   // start empty so placeholder shows
  });
  const [submitting, setSubmitting] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((f) => ({ ...f, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    try {
      await axios.post('http://localhost:5000/api/v1/users/register', formData);
      toast.success('Registered successfully! Redirecting to login...');
      setTimeout(() => navigate('/login'), 1500);
    } catch (err) {
      toast.error(err.response?.data?.message || 'Registration failed');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="auth-wrapper">
      <ToastContainer position="top-center" />
      <Card className="auth-card">
        <h5>Create an Account</h5>
        <Form onSubmit={handleSubmit}>
          {[
            { label: 'First Name', name: 'firstName', type: 'text' },
            { label: 'Last Name',  name: 'lastName',  type: 'text' },
            { label: 'Email',      name: 'email',     type: 'email' },
            { label: 'Password',   name: 'password',  type: 'password' },
            { label: 'Date of Birth', name: 'dob',    type: 'date' },
          ].map(({ label, name, type }) => (
            <Form.Group className="mb-3" controlId={name} key={name}>
              <Form.Label>{label}</Form.Label>
              <Form.Control
                type={type}
                name={name}
                value={formData[name]}
                onChange={handleChange}
                required
                disabled={submitting}
              />
            </Form.Group>
          ))}

          <Form.Group className="mb-3" controlId="sex">
            <Form.Label>Sex</Form.Label>
            <Form.Select
              name="sex"
              value={formData.sex}
              onChange={handleChange}
              required
              disabled={submitting}
            >
              <option value="">Select sex</option>
              <option value="Male">Male</option>
              <option value="Female">Female</option>
              <option value="Other">Other</option>
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3" controlId="role">
            <Form.Label>Role</Form.Label>
            <Form.Select
              name="role"
              value={formData.role}
              onChange={handleChange}
              required
              disabled={submitting}
            >
              <option value="">Select role</option>
              <option value="learner">Learner</option>
              <option value="educator">Educator</option>
              <option value="coordinator">Coordinator</option>
            </Form.Select>
          </Form.Group>

          {[
            { label: 'Phone',   name: 'phone',   type: 'text'     },
            { label: 'Address', name: 'address', type: 'textarea' },
            { label: 'Country', name: 'country', type: 'text'     },
          ].map(({ label, name, type }) => (
            <Form.Group className="mb-3" controlId={name} key={name}>
              <Form.Label>{label}</Form.Label>
              {type === 'textarea' ? (
                <Form.Control
                  as="textarea"
                  rows={2}
                  name={name}
                  value={formData[name]}
                  onChange={handleChange}
                  disabled={submitting}
                />
              ) : (
                <Form.Control
                  type={type}
                  name={name}
                  value={formData[name]}
                  onChange={handleChange}
                  disabled={submitting}
                />
              )}
            </Form.Group>
          ))}

          <Button
            type="submit"
            variant="primary"
            className="w-100"
            disabled={submitting}
          >
            {submitting ? (
              <>
                <Spinner size="sm" animation="border" /> Registering...
              </>
            ) : (
              'Register'
            )}
          </Button>
        </Form>

        <div className="auth-footer">
          <span>Already have an account?</span>{' '}
          <Link to="/login">Login here</Link>
        </div>
      </Card>
    </div>
  );
};

export default Register;

frontend\src\pages\StudentPage.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Table, Spinner, Form, Button, Collapse, Row, Col } from 'react-bootstrap';
import { toast } from 'react-toastify';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

const StudentPage = () => {
  const [students, setStudents] = useState([]);
  const [search, setSearch] = useState('');
  const [loading, setLoading] = useState(true);
  const [expandedStudentIds, setExpandedStudentIds] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState('');
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);

  let token = '';
  try {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      const userObj = JSON.parse(storedUser);
      token = userObj?.token || '';
    }
  } catch (e) {
    console.error('Error parsing user token from localStorage:', e);
  }

  useEffect(() => {
    const fetchStudents = async () => {
      if (!token) {
        toast.error('Unauthorized: Token not found. Please log in again.');
        setLoading(false);
        return;
      }

      setLoading(true);
      try {
        const response = await axios.get('http://localhost:5000/api/v1/enrollments/by-learner', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setStudents(response.data);
      } catch (error) {
        console.error('Error fetching students:', error);
        const msg = error.response?.data?.message || 'Failed to load learners';
        toast.error(msg);
      } finally {
        setLoading(false);
      }
    };

    fetchStudents();
  }, [token]);

  // ✅ Fix: Call correct route to delete enrollment
  const handleUnenroll = async (courseId, learnerId, courseTitle) => {
    const confirm = window.confirm(`Are you sure you want to unenroll from "${courseTitle}"?`);
    if (!confirm) return;

    try {
      const enrollmentToDelete = students
        .flatMap(s => s.enrolledCourses.map(c => ({ ...c, learnerId: s._id })))
        .find(ec => ec._id === courseId && ec.learnerId === learnerId);

      if (!enrollmentToDelete?.enrollmentId) {
        toast.error('Enrollment ID not found for this course.');
        return;
      }

      await axios.delete(`http://localhost:5000/api/v1/enrollments/${enrollmentToDelete.enrollmentId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      toast.success('Unenrolled successfully.');

      const updatedStudents = students.map(student => {
        if (student._id === learnerId) {
          return {
            ...student,
            enrolledCourses: student.enrolledCourses.filter(c => c._id !== courseId),
          };
        }
        return student;
      });
      setStudents(updatedStudents);
    } catch (error) {
      console.error('Unenroll failed:', error);
      toast.error(error.response?.data?.message || 'Unenroll failed.');
    }
  };

  const handleExportPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text('Learner Course Enrollment Report', 14, 15);

    filteredStudents.forEach((student, index) => {
      const startY = 25 + index * 10;
      doc.setFontSize(12);
      doc.text(`${student.firstName} ${student.lastName} (${student.email})`, 14, startY);
      const courseData = (student.enrolledCourses || []).map(c => [c.title]);

      doc.autoTable({
        startY: startY + 2,
        head: [['Enrolled Courses']],
        body: courseData.length > 0 ? courseData : [['None']],
        margin: { left: 14 },
        theme: 'striped',
        styles: { fontSize: 10 },
      });
    });

    doc.save('learner_course_enrollments.pdf');
  };

  const handleExportCSV = () => {
    let csv = 'Name,Email,Phone,Country,Course Title\n';
    filteredStudents.forEach(student => {
      const base = [
        `${student.firstName} ${student.lastName}`,
        student.email,
        student.phone || '-',
        student.country || '-',
      ];
      if (student.enrolledCourses?.length > 0) {
        student.enrolledCourses.forEach(course => {
          csv += [...base, course.title].join(',') + '\n';
        });
      } else {
        csv += [...base, 'None'].join(',') + '\n';
      }
    });

    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'learner_course_enrollments.csv';
    link.click();
  };

  const toggleExpandAll = () => {
    if (expandedStudentIds.length === filteredStudents.length) {
      setExpandedStudentIds([]);
    } else {
      setExpandedStudentIds(filteredStudents.map(s => s._id));
    }
  };

  const courseOptions = Array.from(
    new Set(students.flatMap(s => s.enrolledCourses?.map(c => c.title) || []))
  );

  const filteredStudents = students.filter(student => {
    const matchSearch =
      student.firstName?.toLowerCase().includes(search.toLowerCase()) ||
      student.email?.toLowerCase().includes(search.toLowerCase());

    const matchCourse =
      !selectedCourse ||
      student.enrolledCourses?.some(course => course.title === selectedCourse);

    const matchDate =
      (!startDate && !endDate) ||
      student.enrolledCourses?.some(course => {
        const enrolledAt = new Date(course.enrolledAt || course.createdAt || student.createdAt);
        return (!startDate || enrolledAt >= startDate) && (!endDate || enrolledAt <= endDate);
      });

    return matchSearch && matchCourse && matchDate;
  });

  return (
    <div>
      <h4 className="mb-3">Learners</h4>

      <Row className="mb-3 g-2">
        <Col md={3}>
          <Form.Control
            type="text"
            placeholder="Search by name or email"
            value={search}
            onChange={e => setSearch(e.target.value)}
          />
        </Col>
        <Col md={3}>
          <Form.Select value={selectedCourse} onChange={e => setSelectedCourse(e.target.value)}>
            <option value="">All Courses</option>
            {courseOptions.map(course => (
              <option key={course} value={course}>{course}</option>
            ))}
          </Form.Select>
        </Col>
        <Col md={2}>
          <DatePicker
            selected={startDate}
            onChange={date => setStartDate(date)}
            placeholderText="Start Date"
            className="form-control"
          />
        </Col>
        <Col md={2}>
          <DatePicker
            selected={endDate}
            onChange={date => setEndDate(date)}
            placeholderText="End Date"
            className="form-control"
          />
        </Col>
        <Col md={2} className="d-flex gap-2">
          <Button variant="outline-primary" onClick={toggleExpandAll}>
            {expandedStudentIds.length === filteredStudents.length ? 'Collapse All' : 'Expand All'}
          </Button>
          <Button variant="success" onClick={handleExportPDF}>PDF</Button>
          <Button variant="info" onClick={handleExportCSV}>CSV</Button>
        </Col>
      </Row>

      {loading ? (
        <div className="text-center"><Spinner animation="border" /></div>
      ) : (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
              <th>Country</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredStudents.length > 0 ? (
              filteredStudents.map(student => (
                <React.Fragment key={student._id}>
                  <tr>
                    <td>{student.firstName} {student.lastName}</td>
                    <td>{student.email}</td>
                    <td>{student.phone || '-'}</td>
                    <td>{student.country || '-'}</td>
                    <td>
                      <Button
                        size="sm"
                        variant="info"
                        onClick={() => {
                          if (expandedStudentIds.includes(student._id)) {
                            setExpandedStudentIds(prev => prev.filter(id => id !== student._id));
                          } else {
                            setExpandedStudentIds(prev => [...prev, student._id]);
                          }
                        }}
                      >
                        {expandedStudentIds.includes(student._id) ? 'Hide Courses' : 'View Courses'}
                      </Button>
                    </td>
                  </tr>
                  <tr>
                    <td colSpan="5" style={{ padding: 0, borderTop: 'none' }}>
                      <Collapse in={expandedStudentIds.includes(student._id)}>
                        <div className="p-3">
                          {student.enrolledCourses?.length > 0 ? (
                            <Table size="sm" bordered>
                              <thead>
                                <tr>
                                  <th>Course Title</th>
                                  <th>Action</th>
                                </tr>
                              </thead>
                              <tbody>
                                {student.enrolledCourses.map(course => (
                                  <tr key={course._id}>
                                    <td>{course.title}</td>
                                    <td>
                                      <Button
                                        variant="danger"
                                        size="sm"
                                        onClick={() =>
                                          handleUnenroll(course._id, student._id, course.title)
                                        }
                                      >
                                        Unenroll
                                      </Button>
                                    </td>
                                  </tr>
                                ))}
                              </tbody>
                            </Table>
                          ) : (
                            <div>No enrolled courses.</div>
                          )}
                        </div>
                      </Collapse>
                    </td>
                  </tr>
                </React.Fragment>
              ))
            ) : (
              <tr>
                <td colSpan="5" className="text-center">No learners found.</td>
              </tr>
            )}
          </tbody>
        </Table>
      )}
    </div>
  );
};

export default StudentPage;

frontend\src\pages\SubmissionPage.js
// frontend/src/pages/SubmissionPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, Table, Spinner, Badge } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const SubmissionPage = () => {
  const token = localStorage.getItem('token');
  const [submissions, setSubmissions] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch submissions
  useEffect(() => {
    const fetchSubmissions = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/submissions', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setSubmissions(data);
      } catch (err) {
        toast.error('Failed to load submissions');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchSubmissions();
  }, [token]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading submissions...
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4">Submissions</h4>
      {submissions.length > 0 ? (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Assignment</th>
              <th>Course</th>
              <th>Submitted By</th>
              <th>Status</th>
              <th>Grade</th>
              <th>Submitted At</th>
            </tr>
          </thead>
          <tbody>
            {submissions.map((sub) => (
              <tr key={sub._id}>
                <td>{sub.assignment.name}</td>
                <td>{sub.assignment.course.title}</td>
                <td>{sub.learner.firstName} {sub.learner.lastName}</td>
                <td>
                  <Badge bg={
                    sub.status === 'graded' ? 'success' :
                    sub.status === 'late' ? 'warning' :
                    sub.status === 'resubmitted' ? 'info' : 'secondary'
                  }>
                    {sub.status}
                  </Badge>
                </td>
                <td>{sub.grade ?? '—'}</td>
                <td>{new Date(sub.submittedAt).toLocaleString()}</td>
              </tr>
            ))}
          </tbody>
        </Table>
      ) : (
        <p className="text-center text-muted">No submissions available.</p>
      )}
    </Container>
  );
};

export default SubmissionPage;

frontend\src\pages\UnenrollLearner.js
// frontend/src/pages/UnenrollLearner.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Container, Table, Button, Spinner } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const UnenrollLearner = () => {
  const token = localStorage.getItem('token');
  const [enrollments, setEnrollments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [removingId, setRemovingId] = useState(null);

  useEffect(() => {
    const fetchEnrollments = async () => {
      try {
        const { data } = await axios.get('http://localhost:5000/api/v1/enrollments', {
          headers: { Authorization: `Bearer ${token}` },
        });
        setEnrollments(data);
      } catch (err) {
        toast.error('Failed to load your enrollments');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchEnrollments();
  }, [token]);

  const handleUnenroll = async (id) => {
    if (!window.confirm('Are you sure you want to unenroll from this course?')) return;
    setRemovingId(id);
    try {
      await axios.delete(`http://localhost:5000/api/v1/enrollments/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setEnrollments((prev) => prev.filter((e) => e._id !== id));
      toast.success('Successfully unenrolled');
    } catch (err) {
      toast.error('Failed to unenroll');
      console.error(err);
    } finally {
      setRemovingId(null);
    }
  };

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <h4 className="mb-4">My Enrollments</h4>
      {loading ? (
        <div className="text-center my-5">
          <Spinner animation="border" /> Loading...
        </div>
      ) : enrollments.length > 0 ? (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>Course</th>
              <th>Status</th>
              <th>Enrolled On</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {enrollments.map((en) => (
              <tr key={en._id}>
                <td>{en.course.title}</td>
                <td>{en.status}</td>
                <td>{new Date(en.enrollmentDate).toLocaleDateString()}</td>
                <td>
                  <Button
                    variant="danger"
                    size="sm"
                    disabled={removingId === en._id}
                    onClick={() => handleUnenroll(en._id)}
                  >
                    {removingId === en._id ? <Spinner size="sm" animation="border" /> : 'Unenroll'}
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      ) : (
        <p className="text-center text-muted">You have no active enrollments.</p>
      )}
    </Container>
  );
};

export default UnenrollLearner;

frontend\src\pages\ViewEducator.js
// frontend/src/pages/ViewEducator.js
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Container, Card, Spinner, Button, Row, Col } from 'react-bootstrap';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const ViewEducator = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  const [educator, setEducator] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchEducator = async () => {
      try {
        const { data } = await axios.get(`http://localhost:5000/api/v1/educators/${id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setEducator(data);
      } catch (err) {
        toast.error('Failed to load educator details');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchEducator();
  }, [id, token]);

  if (loading) {
    return (
      <Container className="text-center my-5">
        <Spinner animation="border" /> Loading educator...
      </Container>
    );
  }

  if (!educator) {
    return (
      <Container className="text-center my-5">
        <p className="text-muted">Educator not found.</p>
        <Button onClick={() => navigate(-1)}>Go Back</Button>
      </Container>
    );
  }

  return (
    <Container className="my-4">
      <ToastContainer position="top-center" />
      <Card className="mx-auto" style={{ maxWidth: '600px' }}>
        <Card.Header className="text-center">
          <h4>{educator.user.firstName} {educator.user.lastName}</h4>
        </Card.Header>
        <Card.Body>
          <Row className="mb-3">
            <Col xs={4} className="text-center">
              <img
                src={educator.avatarUrl ? `/uploads/avatars/${educator.avatarUrl}` : '/uploads/avatars/default-avatar.png'}
                alt="Avatar"
                className="rounded-circle"
                width={100}
                height={100}
              />
            </Col>
            <Col xs={8}>
              <p><strong>Email:</strong> {educator.user.email}</p>
              <p><strong>Phone:</strong> {educator.phone || 'N/A'}</p>
              <p><strong>Country:</strong> {educator.country || 'N/A'}</p>
            </Col>
          </Row>
          {educator.qualifications && (
            <div className="mb-3">
              <h6>Qualifications</h6>
              <p>{educator.qualifications}</p>
            </div>
          )}
          <div className="mb-3">
            <h6>Experience</h6>
            <p>{educator.experienceYears} {educator.experienceYears === 1 ? 'year' : 'years'}</p>
          </div>
          {educator.bio && (
            <div className="mb-3">
              <h6>About</h6>
              <p>{educator.bio}</p>
            </div>
          )}
          <Button variant="primary" onClick={() => navigate(-1)}>Back</Button>
        </Card.Body>
      </Card>
    </Container>
  );
};

export default ViewEducator;

frontend\src\styles\_variables.css
:root {
  /* Colors */
  --primary: #0069d9;
  --primary-dark: #0053ba;
  --secondary: #6c757d;
  --light-bg: #f8f9fa;
  --dark-bg: #121212;
  --text-dark: #343a40;
  --text-light: #e0e0e0;

  /* Spacing */
  --space-xs: 0.25rem;
  --space-sm: 0.5rem;
  --space: 1rem;
  --space-lg: 1.5rem;

  /* Border radius */
  --radius: 0.5rem;

  /* Shadows */
  --shadow-soft: 0 2px 8px rgba(0,0,0,0.1);
  --shadow-dark: 0 2px 8px rgba(0,0,0,0.5);
}


frontend\src\styles\Auth.css
/* src/styles/Auth.css */

/* Full-screen gradient background */
.auth-wrapper {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #4e54c8 0%, #8f94fb 100%);
}

/* Card container */
.auth-card {
  background: #fff;
  border-radius: 0.75rem;
  box-shadow: 0 4px 20px rgba(0,0,0,0.1);
  padding: 2rem;
  max-width: 420px;
  width: 100%;
}

/* Title styling */
.auth-card h5 {
  text-align: center;
  margin-bottom: 1.5rem;
  color: #4e54c8;
  font-size: 1.5rem;
  font-weight: 600;
}

/* Form controls */
.auth-card .form-control,
.auth-card .form-select {
  border-radius: 0.5rem;
  border: 1px solid #ced4da;
  padding: .75rem 1rem;
  transition: border-color .2s, box-shadow .2s;
}
.auth-card .form-control:focus,
.auth-card .form-select:focus {
  border-color: #4e54c8;
  box-shadow: 0 0 0 0.2rem rgba(78,84,200,0.25);
}

/* Submit button */
.auth-card .btn-primary {
  background-color: #4e54c8;
  border-color: #4e54c8;
  border-radius: 0.5rem;
  padding: .75rem;
  font-weight: 500;
  transition: background-color .2s, transform .2s;
}
.auth-card .btn-primary:hover {
  background-color: #3b3f9a;
  transform: translateY(-1px);
}

/* Auth footer */
.auth-footer {
  text-align: center;
  margin-top: 1rem;
  font-size: .9rem;
}
.auth-footer a {
  color: #4e54c8;
  text-decoration: none;
  font-weight: 500;
}
.auth-footer a:hover {
  text-decoration: underline;
}

/* Responsive tweak */
@media (max-width: 576px) {
  .auth-card { padding: 1.5rem; }
}

frontend\src\styles\global.css
@import './_variables.css';

/* Base reset & typography */
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
body {
  font-family: 'Segoe UI', sans-serif;
  background-color: var(--light-bg);
  color: var(--text-dark);
  line-height: 1.6;
}
a {
  text-decoration: none;
  color: var(--primary);
}
a:hover {
  color: var(--primary-dark);
}

/* Utility classes */
.mt-1 { margin-top: var(--space-xs); }
.mt-2 { margin-top: var(--space-sm); }
.mt-3 { margin-top: var(--space); }
.mb-3 { margin-bottom: var(--space); }
.p-3  { padding: var(--space); }
.text-center { text-align: center; }

/* Cards */
.card {
  border: none;
  border-radius: var(--radius);
  box-shadow: var(--shadow-soft);
}
.card.bg-light {
  background-color: #fff;
}
.card-title {
  margin-bottom: var(--space-sm);
}

/* Forms */
.form-control,
.form-select {
  border-radius: var(--radius);
  border: 1px solid #ced4da;
}
.form-control:focus,
.form-select:focus {
  box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
  border-color: var(--primary);
}

/* Buttons */
.btn {
  border-radius: var(--radius);
  padding: var(--space-sm) var(--space);
}
.btn-primary {
  background-color: var(--primary);
  border-color: var(--primary);
}
.btn-primary:hover {
  background-color: var(--primary-dark);
  border-color: var(--primary-dark);
}

/* Dark mode */
body.dark-mode {
  background-color: var(--dark-bg);
  color: var(--text-light);
}
body.dark-mode .card {
  background-color: #1e1e1e;
  box-shadow: var(--shadow-dark);
}

frontend\src\styles\Home.css
/* Hero banner */
.hero {
  background: linear-gradient(135deg, #0069d9 0%, #0053ba 100%);
  color: #fff;
  text-align: center;
  padding: 4rem 1rem;
  border-radius: 0.5rem;
  margin-bottom: 2rem;
}

.hero h1 {
  font-size: 2.5rem;
  margin-bottom: 1rem;
}

.hero p {
  font-size: 1.1rem;
  margin-bottom: 2rem;
}

.hero .btn-browse {
  background-color: #fff;
  color: #0053ba;
  border: none;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  border-radius: 2rem;
  transition: background-color 0.2s, transform 0.2s;
}

.hero .btn-browse:hover {
  background-color: #f0f0f0;
  transform: translateY(-2px);
}

/* Featured courses grid */
.featured-courses {
  margin-bottom: 2rem;
}
.featured-courses .card {
  transition: transform 0.2s, box-shadow 0.2s;
}
.featured-courses .card:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 16px rgba(0,0,0,0.15);
}

/* Footer */
.footer {
  background-color: #212529;
  color: #adb5bd;
  padding: 3rem 1rem 1rem;
  margin-top: 4rem;
}
.footer .footer-container {
  max-width: 1140px;
  margin: 0 auto;
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
}
.footer .footer-section {
  flex: 1 1 200px;
}
.footer .footer-section h6 {
  color: #fff;
  margin-bottom: 1rem;
  font-size: 1rem;
  text-transform: uppercase;
}
.footer .footer-section a {
  color: #adb5bd;
  display: block;
  margin-bottom: 0.5rem;
  text-decoration: none;
}
.footer .footer-section a:hover {
  color: #fff;
}
.footer hr {
  border-color: #343a40;
  margin: 2rem 0 1rem;
}
.footer small {
  display: block;
  text-align: center;
  color: #6c757d;
}

frontend\src\styles\Layout.css
/* When sidebar is collapsed */
.sidebar-wrapper.collapsed-sidebar {
  width: 60px;
}
.sidebar-wrapper.expanded-sidebar {
  width: 220px;
}

/* Main content shifts accordingly */
.sidebar-wrapper + .flex-grow-1 {
  transition: margin-left 0.3s;
}
.collapsed-sidebar + .flex-grow-1 {
  margin-left: 60px;
}
.expanded-sidebar + .flex-grow-1 {
  margin-left: 220px;
}

frontend\src\styles\Navbar.css
.navbar {
  background: var(--primary);
  box-shadow: var(--shadow-soft);
  padding: var(--space-sm) var(--space);
}
.navbar .navbar-brand {
  color: #fff !important;
  font-weight: bold;
}
.navbar .btn-outline-primary {
  color: #fff;
  border-color: #fff;
}
.navbar .btn-outline-primary:hover {
  background-color: rgba(255,255,255,0.1);
}

frontend\src\styles\Sidebar.css
.sidebar {
  background-color: var(--secondary);
  color: #fff;
  height: 100vh;
  transition: width 0.3s;
}
.sidebar .nav-link {
  color: #ddd;
  padding: var(--space-sm) var(--space);
  display: flex;
  align-items: center;
}
.sidebar .nav-link:hover,
.sidebar .nav-link.active {
  background-color: rgba(255,255,255,0.1);
  color: #fff;
}
.sidebar .bi {
  margin-right: var(--space-sm);
}

frontend\src\App.css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

frontend\src\App.js
// frontend/src/App.js
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';

// Context providers
import { ThemeProvider } from './context/ThemeContext';
import { SidebarProvider } from './context/SidebarContext';

// Layout & utilities
import Layout from './components/Layout';
import ProtectedRoute from './components/ProtectedRoute';

// Public pages
import Home from './pages/Home';
import About from './pages/About';
import Contact from './pages/Contact';
import NotFound from './pages/NotFound';

// Auth pages
import Login from './pages/Login';
import Register from './pages/Register';
import AccessDenied from './pages/AccessDenied';

// Coordinator
import CoordinatorPage from './pages/CoordinatorPage';
import CoordinatorDashboard from './pages/CoordinatorDashboard';
import CoordinatorCoursePage from './pages/CoordinatorCoursePage';
import CourseForm from './components/CourseForm';
import StudentPage from './pages/StudentPage';
import EducatorList from './components/EducatorList';
import EditEducatorPage from './pages/EditEducator';
import CoordinatorAnalytics from './components/coordinator/CoordinatorAnalytics';


// Educator
import EducatorPage from './pages/EducatorPage';
import EducatorDashboard from './pages/EducatorDashboard';
import QuizForm from './components/QuizForm';
import QuizPage from './pages/QuizPage';
import AssignmentForm from './components/AssignmentForm';
import CreateZoomSession from './components/educator/CreateZoomSession';
import EMyCourses from './components/educator/EMyCourses';
import EMyAssignments from './components/educator/EMyAssignments';
import EMySubmissions from './components/educator/EMySubmissions';
import EStudyPlanPage from './components/educator/EStudyPlanPage';
import EducatorQuizList from './components/educator/EducatorQuizList';
import AttemptQuizPage from './pages/AttemptQuizPage';



// Learner
import LearnerDashboard from './pages/LearnerDashboard';
import MyCourses from './pages/MyCourses';
import AssignmentSubmission from './components/AssignmentSubmission';
import UnenrollLearner from './pages/UnenrollLearner';
import EnrollmentHistory from './pages/EnrollmentHistory';
import LearnerQuizList from './components/learner/LearnerQuizList'; // or correct path
import LearnerQuizHistory from './pages/LearnerQuizHistory';

// Shared listing pages
import Courses from './pages/Courses';
import CoursePage from './pages/CoursePage';
import AssignmentPage from './pages/AssignmentPage';
import ForumPage from './pages/ForumPage';
import EvaluationPage from './pages/EvaluationPage';
import SubmissionPage from './pages/SubmissionPage';
import LiveZoomSessions from './components/shared/ZoomSessionList';

import AdminEnrollmentPanel from './pages/AdminEnrollmentPanel';
import PaymentPage from './pages/PaymentPage';
import PaymentReceipt from './pages/PaymentReceipt';
import InactivePage from './pages/InactivePage';
import ResultHistory from './components/learner/ResultHistory';
import StudyPlanList from './components/StudyPlanList';




function App() {
  return (
    <ThemeProvider>
      <SidebarProvider>
        <BrowserRouter>
          <Routes>
            {/* Public auth routes (no Layout) */}
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />
            <Route path="/access-denied" element={<AccessDenied />} />
            <Route path="/payment/:id" element={<PaymentPage />} />
            <Route path="/receipt/:id" element={<PaymentReceipt />} />
            <Route path="/inactive" element={<InactivePage />} />

            {/* All other routes are wrapped by Layout (Navbar + Sidebar) */}
            <Route path="/" element={<Layout />}>
            {/*<Route path="/payment/:enrollmentId" element={<PaymentPage />} />*/}
            <Route path="/payment/:id" element={<PaymentPage />} />

              {/* Home */}
              <Route index element={<Home />} />

              {/* Public pages */}
              <Route path="about" element={<About />} />
              <Route path="contact" element={<Contact />} />

              {/* Educator */}
              <Route path="/educator/my-courses" element={<EMyCourses />} />
              <Route path="/educator/my-assignments" element={<EMyAssignments />} />
              <Route path="/educator/my-submissions" element={<EMySubmissions />} />
              <Route path="/educator/my-studyplans" element={<EStudyPlanPage />} />
              <Route path="/educator/my-quizzes" element={<EducatorQuizList />} />
              <Route path="/quizzes/attempt/:id" element={<AttemptQuizPage />} />

              {/* learner */}
              <Route path="/learner/dashboard" element={<LearnerDashboard />} />
              <Route path="/learner/quiz-history" element={<ResultHistory />} />
              <Route path="/learner/studyplans" element={<StudyPlanList />} />
              <Route path="/learner/quizzes" element={<LearnerQuizList />} />
              <Route path="/learner/quiz/attempt/:id" element={<AttemptQuizPage />} />
              <Route path="/learner/quiz-history" element={<LearnerQuizHistory />} />





              {/* Coordinator-only */}
              <Route
                path="coordinator"
                element={
                  <ProtectedRoute allowedRoles={['coordinator']}>
                    <CoordinatorPage />
                  </ProtectedRoute>
                }
              />
              <Route
                path="coordinator/dashboard"
                element={
                  <ProtectedRoute allowedRoles={['coordinator']}>
                    <CoordinatorDashboard />
                  </ProtectedRoute>
                }
              />
              <Route
                path="coordinator/course"
                element={
                  <ProtectedRoute allowedRoles={['coordinator']}>
                    <CoordinatorCoursePage />
                  </ProtectedRoute>
                }
              />
              <Route
                path="coordinator/course/create"
                element={
                  <ProtectedRoute allowedRoles={['coordinator']}>
                    <CourseForm />
                  </ProtectedRoute>
                }
              />
              <Route
                path="coordinator/course/edit/:id"
                element={
                  <ProtectedRoute allowedRoles={['coordinator']}>
                    <CourseForm />
                  </ProtectedRoute>
                }
              />
              <Route
                path="coordinator/students"
                element={
                  <ProtectedRoute allowedRoles={['coordinator']}>
                    <StudentPage />
                  </ProtectedRoute>
                }
              />
              <Route
                path="coordinator/educators"
                element={
                  <ProtectedRoute allowedRoles={['coordinator']}>
                    <EducatorList />
                  </ProtectedRoute>
                }
              />
              <Route
                path="coordinator/educators/edit/:id"
                element={
                  <ProtectedRoute allowedRoles={['coordinator']}>
                    <EditEducatorPage />
                  </ProtectedRoute>
                }
              />

              {/* Educator-only */}
              <Route
                path="educator"
                element={
                  <ProtectedRoute allowedRoles={['educator']}>
                    <EducatorPage />
                  </ProtectedRoute>
                }
              />
              <Route
                path="educator/dashboard"
                element={
                  <ProtectedRoute allowedRoles={['educator']}>
                    <EducatorDashboard />
                  </ProtectedRoute>
                }
              />
              <Route
                path="quizzes/create"
                element={
                  <ProtectedRoute allowedRoles={['educator', 'coordinator']}>
                    <QuizForm />
                  </ProtectedRoute>
                }
              />
              <Route
                path="quizzes/edit/:id"
                element={
                  <ProtectedRoute allowedRoles={['educator', 'coordinator']}>
                    <QuizForm />
                  </ProtectedRoute>
                }
              />
              <Route
                path="assignments/create"
                element={
                  <ProtectedRoute allowedRoles={['educator', 'coordinator']}>
                    <AssignmentForm />
                  </ProtectedRoute>
                }
              />
              <Route
                path="assignments/edit/:id"
                element={
                  <ProtectedRoute allowedRoles={['educator', 'coordinator']}>
                    <AssignmentForm />
                  </ProtectedRoute>
                }
              />
               <Route
                  path="/educator/create-zoom-session"
                  element={
                    <ProtectedRoute allowedRoles={['educator', 'coordinator']}>
                      <CreateZoomSession />
                    </ProtectedRoute>
                  }
                />

              {/* Learner-only */}
              <Route
                path="learner"
                element={
                  <ProtectedRoute allowedRoles={['learner']}>
                    <LearnerDashboard />
                  </ProtectedRoute>
                }
              />
              <Route
                path="my-courses"
                element={
                  <ProtectedRoute allowedRoles={['learner']}>
                    <MyCourses />
                  </ProtectedRoute>
                }
              />
              <Route
                path="submissions/create"
                element={
                  <ProtectedRoute allowedRoles={['learner']}>
                    <AssignmentSubmission />
                  </ProtectedRoute>
                }
              />
              <Route
                path="unenroll"
                element={
                  <ProtectedRoute allowedRoles={['learner']}>
                    <UnenrollLearner />
                  </ProtectedRoute>
                }
              />

              <Route path="/admin/enrollments" element={<AdminEnrollmentPanel />} />

              {/* Shared listing pages */}
              <Route path="courses" element={<Courses />} />
              <Route path="courses/:id" element={<CoursePage />} />
              <Route path="assignments" element={<AssignmentPage />} />
              <Route path="forum" element={<ForumPage />} />
              <Route path="evaluations" element={<EvaluationPage />} />
              <Route path="submissions" element={<SubmissionPage />} />
              <Route path="/enrollment-history" element={<EnrollmentHistory />} />


              {/* allows both educators and learners to use the same view. */}
              <Route
                path="/zoom-sessions"
                element={
                  <ProtectedRoute allowedRoles={['learner', 'educator']}>
                    <LiveZoomSessions />
                  </ProtectedRoute>
                }
              />

              {/* 404 fallback */}
              <Route path="*" element={<NotFound />} />
            </Route>
          </Routes>
        </BrowserRouter>
      </SidebarProvider>
    </ThemeProvider>
  );
}

export default App;

frontend\src\index.js
// frontend/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';
import './index.css';
import './styles/global.css';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
